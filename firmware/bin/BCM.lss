
bin/BCM.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	10002000 	.word	0x10002000
       4:	000000c1 	.word	0x000000c1
       8:	000000d1 	.word	0x000000d1
       c:	000000d3 	.word	0x000000d3
	...
      2c:	000000d5 	.word	0x000000d5
	...
      38:	000000d7 	.word	0x000000d7
      3c:	00000829 	.word	0x00000829
      40:	000000db 	.word	0x000000db
      44:	000000db 	.word	0x000000db
      48:	000000db 	.word	0x000000db
      4c:	000000db 	.word	0x000000db
      50:	000000db 	.word	0x000000db
      54:	000000db 	.word	0x000000db
      58:	000000db 	.word	0x000000db
      5c:	000000db 	.word	0x000000db
      60:	000000db 	.word	0x000000db
      64:	000000db 	.word	0x000000db
      68:	000000db 	.word	0x000000db
      6c:	000000db 	.word	0x000000db
      70:	000000db 	.word	0x000000db
      74:	00000839 	.word	0x00000839
      78:	000000db 	.word	0x000000db
      7c:	00000bff 	.word	0x00000bff
      80:	000000db 	.word	0x000000db
      84:	000000db 	.word	0x000000db
      88:	000000db 	.word	0x000000db
      8c:	000000db 	.word	0x000000db
      90:	000000db 	.word	0x000000db
      94:	000000db 	.word	0x000000db
	...
      a0:	000000db 	.word	0x000000db
      a4:	000000db 	.word	0x000000db
      a8:	000000db 	.word	0x000000db
      ac:	00000000 	.word	0x00000000
      b0:	000000db 	.word	0x000000db
      b4:	000000db 	.word	0x000000db
      b8:	000000db 	.word	0x000000db
      bc:	000000db 	.word	0x000000db

000000c0 <Reset_Handler>:

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
      c0:	4801      	ldr	r0, [pc, #4]	; (c8 <Reset_Handler+0x8>)
    BLX     R0
      c2:	4780      	blx	r0
.if (RAM_MODE)
    LDR     R0,=main
      c4:	4801      	ldr	r0, [pc, #4]	; (cc <Reset_Handler+0xc>)
    BX      R0
      c6:	4700      	bx	r0

/* Reset Handler */

Reset_Handler:
    .fnstart
    LDR     R0, =SystemInit
      c8:	00000d49 	.word	0x00000d49
    BLX     R0
.if (RAM_MODE)
    LDR     R0,=main
      cc:	00000c19 	.word	0x00000c19

000000d0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
      d0:	e7fe      	b.n	d0 <NMI_Handler>

000000d2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
      d2:	e7fe      	b.n	d2 <HardFault_Handler>

000000d4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
      d4:	e7fe      	b.n	d4 <SVC_Handler>

000000d6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
      d6:	e7fe      	b.n	d6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
      d8:	e7fe      	b.n	d8 <PendSV_Handler+0x2>

000000da <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
      da:	e7fe      	b.n	da <Default_Handler>

000000dc <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
      dc:	6802      	ldr	r2, [r0, #0]
      de:	4b03      	ldr	r3, [pc, #12]	; (ec <setStartMode+0x10>)
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
      e0:	0609      	lsls	r1, r1, #24

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
      e2:	4013      	ands	r3, r2
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
      e4:	4319      	orrs	r1, r3
      e6:	6001      	str	r1, [r0, #0]
}
      e8:	4770      	bx	lr
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	f8ffffff 	.word	0xf8ffffff

000000f0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
      f0:	b538      	push	{r3, r4, r5, lr}
      f2:	1c04      	adds	r4, r0, #0
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_SYSCTL_PowerUp(SYSCTL_POWERDOWN_ADC_PD);
      f4:	2010      	movs	r0, #16
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
      f6:	1c0d      	adds	r5, r1, #0
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_SYSCTL_PowerUp(SYSCTL_POWERDOWN_ADC_PD);
      f8:	f000 faea 	bl	6d0 <Chip_SYSCTL_PowerUp>
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
      fc:	2180      	movs	r1, #128	; 0x80
      fe:	4a10      	ldr	r2, [pc, #64]	; (140 <Chip_ADC_Init+0x50>)
     100:	0189      	lsls	r1, r1, #6
     102:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
     104:	430b      	orrs	r3, r1
     106:	67d3      	str	r3, [r2, #124]	; 0x7c

	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_ADC);

	pADC->INTEN = 0;		/* Disable all interrupts */
     108:	2300      	movs	r3, #0

	cr |= ADC_CR_PDN;

	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
     10a:	4a0e      	ldr	r2, [pc, #56]	; (144 <Chip_ADC_Init+0x54>)

	Chip_SYSCTL_PowerUp(SYSCTL_POWERDOWN_ADC_PD);

	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_ADC);

	pADC->INTEN = 0;		/* Disable all interrupts */
     10c:	60e3      	str	r3, [r4, #12]

	cr |= ADC_CR_PDN;

	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
     10e:	602a      	str	r2, [r5, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
     110:	712b      	strb	r3, [r5, #4]
	clk = 11;

	ADCSetup->burstMode = false;
     112:	716b      	strb	r3, [r5, #5]
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetSystemClockRate();
     114:	f000 f8c0 	bl	298 <Chip_Clock_GetSystemClockRate>
	clk = 11;

	ADCSetup->burstMode = false;
	div = getClkDiv(false, ADCSetup->adcRate, clk);
	cr |= ADC_CR_CLKDIV(div);
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
     118:	2307      	movs	r3, #7
     11a:	792d      	ldrb	r5, [r5, #4]
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
     11c:	0040      	lsls	r0, r0, #1
	clk = 11;

	ADCSetup->burstMode = false;
	div = getClkDiv(false, ADCSetup->adcRate, clk);
	cr |= ADC_CR_CLKDIV(div);
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
     11e:	401d      	ands	r5, r3
     120:	2380      	movs	r3, #128	; 0x80
     122:	046d      	lsls	r5, r5, #17
     124:	039b      	lsls	r3, r3, #14
     126:	431d      	orrs	r5, r3
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
     128:	4b07      	ldr	r3, [pc, #28]	; (148 <Chip_ADC_Init+0x58>)
     12a:	4908      	ldr	r1, [pc, #32]	; (14c <Chip_ADC_Init+0x5c>)
     12c:	18c0      	adds	r0, r0, r3
     12e:	f000 fe51 	bl	dd4 <__aeabi_uidiv>
     132:	3801      	subs	r0, #1
	ADCSetup->bitsAccuracy = ADC_10BITS;
	clk = 11;

	ADCSetup->burstMode = false;
	div = getClkDiv(false, ADCSetup->adcRate, clk);
	cr |= ADC_CR_CLKDIV(div);
     134:	b2c0      	uxtb	r0, r0
     136:	0200      	lsls	r0, r0, #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
     138:	4328      	orrs	r0, r5
	pADC->CR = cr;
     13a:	6020      	str	r0, [r4, #0]
}
     13c:	bd38      	pop	{r3, r4, r5, pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	40048004 	.word	0x40048004
     144:	00061a80 	.word	0x00061a80
     148:	00432380 	.word	0x00432380
     14c:	00864700 	.word	0x00864700

00000150 <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
     150:	3104      	adds	r1, #4
     152:	0089      	lsls	r1, r1, #2
     154:	580b      	ldr	r3, [r1, r0]
	if (!ADC_DR_DONE(temp)) {
		return ERROR;
     156:	2000      	movs	r0, #0
/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
	if (!ADC_DR_DONE(temp)) {
     158:	4283      	cmp	r3, r0
     15a:	da03      	bge.n	164 <Chip_ADC_ReadValue+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
     15c:	041b      	lsls	r3, r3, #16
     15e:	0d9b      	lsrs	r3, r3, #22
     160:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
     162:	3001      	adds	r0, #1

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	return readAdcVal(pADC, channel, data);
}
     164:	4770      	bx	lr

00000166 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
     166:	2a01      	cmp	r2, #1
     168:	d00e      	beq.n	188 <Chip_ADC_ReadStatus+0x22>
     16a:	2a00      	cmp	r2, #0
     16c:	d007      	beq.n	17e <Chip_ADC_ReadStatus+0x18>
     16e:	2a02      	cmp	r2, #2
     170:	d111      	bne.n	196 <Chip_ADC_ReadStatus+0x30>
	case ADC_DR_OVERRUN_STAT:
		channel += 8;
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;

	case ADC_DR_ADINT_STAT:
		return pADC->STAT >> 16 ? SET : RESET;
     172:	6b00      	ldr	r0, [r0, #48]	; 0x30
     174:	0c00      	lsrs	r0, r0, #16
     176:	1e41      	subs	r1, r0, #1
     178:	4188      	sbcs	r0, r1
     17a:	b2c0      	uxtb	r0, r0
     17c:	e00c      	b.n	198 <Chip_ADC_ReadStatus+0x32>
/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
	case ADC_DR_DONE_STAT:
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
     17e:	6b00      	ldr	r0, [r0, #48]	; 0x30
     180:	2301      	movs	r3, #1
     182:	40c8      	lsrs	r0, r1
     184:	4018      	ands	r0, r3
     186:	e007      	b.n	198 <Chip_ADC_ReadStatus+0x32>

	case ADC_DR_OVERRUN_STAT:
		channel += 8;
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
     188:	6b00      	ldr	r0, [r0, #48]	; 0x30
	switch (StatusType) {
	case ADC_DR_DONE_STAT:
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;

	case ADC_DR_OVERRUN_STAT:
		channel += 8;
     18a:	3108      	adds	r1, #8
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
     18c:	b2c9      	uxtb	r1, r1
     18e:	40c8      	lsrs	r0, r1
     190:	4002      	ands	r2, r0
     192:	b2d0      	uxtb	r0, r2
     194:	e000      	b.n	198 <Chip_ADC_ReadStatus+0x32>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
     196:	2000      	movs	r0, #0
}
     198:	4770      	bx	lr
	...

0000019c <Chip_ADC_SetStartMode>:
	}
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
     19c:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
     19e:	2901      	cmp	r1, #1
     1a0:	d90a      	bls.n	1b8 <Chip_ADC_SetStartMode+0x1c>
		if (EdgeOption) {
     1a2:	2a00      	cmp	r2, #0
     1a4:	d004      	beq.n	1b0 <Chip_ADC_SetStartMode+0x14>
			pADC->CR |= ADC_CR_EDGE;
     1a6:	2280      	movs	r2, #128	; 0x80
     1a8:	6803      	ldr	r3, [r0, #0]
     1aa:	0512      	lsls	r2, r2, #20
     1ac:	4313      	orrs	r3, r2
     1ae:	e002      	b.n	1b6 <Chip_ADC_SetStartMode+0x1a>
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
     1b0:	6802      	ldr	r2, [r0, #0]
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <Chip_ADC_SetStartMode+0x24>)
     1b4:	4013      	ands	r3, r2
     1b6:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
     1b8:	f7ff ff90 	bl	dc <setStartMode>
}
     1bc:	bd08      	pop	{r3, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	f7ffffff 	.word	0xf7ffffff

000001c4 <Chip_ADC_EnableChannel>:
}

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
     1c4:	2a01      	cmp	r2, #1
     1c6:	d104      	bne.n	1d2 <Chip_ADC_EnableChannel+0xe>
		pADC->CR |= ADC_CR_CH_SEL(channel);
     1c8:	408a      	lsls	r2, r1
     1ca:	6803      	ldr	r3, [r0, #0]
     1cc:	431a      	orrs	r2, r3
     1ce:	6002      	str	r2, [r0, #0]
     1d0:	e008      	b.n	1e4 <Chip_ADC_EnableChannel+0x20>
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
     1d2:	6802      	ldr	r2, [r0, #0]
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <Chip_ADC_EnableChannel+0x24>)
     1d6:	4013      	ands	r3, r2
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
     1d8:	2201      	movs	r2, #1
     1da:	408a      	lsls	r2, r1
{
	if (NewState == ENABLE) {
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
     1dc:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
     1de:	6803      	ldr	r3, [r0, #0]
     1e0:	4393      	bics	r3, r2
     1e2:	6003      	str	r3, [r0, #0]
	}
}
     1e4:	4770      	bx	lr
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	f8ffffff 	.word	0xf8ffffff

000001ec <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
     1ec:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
     1ee:	f000 f853 	bl	298 <Chip_Clock_GetSystemClockRate>
     1f2:	4b01      	ldr	r3, [pc, #4]	; (1f8 <SystemCoreClockUpdate+0xc>)
     1f4:	6018      	str	r0, [r3, #0]
}
     1f6:	bd08      	pop	{r3, pc}
     1f8:	1000011c 	.word	0x1000011c

000001fc <Chip_Clock_GetWDTOSCRate>:

#endif

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
     1fc:	b508      	push	{r3, lr}
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
     1fe:	4b07      	ldr	r3, [pc, #28]	; (21c <Stack_Size+0x1c>)
     200:	6a59      	ldr	r1, [r3, #36]	; 0x24
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
     202:	231f      	movs	r3, #31
{
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
     204:	05ca      	lsls	r2, r1, #23
	div = reg & 0x1F;

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
     206:	0f12      	lsrs	r2, r2, #28
	uint32_t div;
	CHIP_WDTLFO_OSC_T clk;

	/* Get WDT oscillator settings */
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
	div = reg & 0x1F;
     208:	4019      	ands	r1, r3

	/* Compute clock rate and divided by divde value */
	return wdtOSCRate[clk] / ((div + 1) << 1);
     20a:	4b05      	ldr	r3, [pc, #20]	; (220 <Stack_Size+0x20>)
     20c:	0092      	lsls	r2, r2, #2
     20e:	3101      	adds	r1, #1
     210:	0049      	lsls	r1, r1, #1
     212:	58d0      	ldr	r0, [r2, r3]
     214:	f000 fdde 	bl	dd4 <__aeabi_uidiv>

/* Return estimated watchdog oscillator rate */
uint32_t Chip_Clock_GetWDTOSCRate(void)
{
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
}
     218:	bd08      	pop	{r3, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	40048000 	.word	0x40048000
     220:	00001ddc 	.word	0x00001ddc

00000224 <Chip_Clock_GetSystemPLLInClockRate>:
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
     224:	4b06      	ldr	r3, [pc, #24]	; (240 <Chip_Clock_GetSystemPLLInClockRate+0x1c>)
     226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     228:	2303      	movs	r3, #3
     22a:	4013      	ands	r3, r2
     22c:	d005      	beq.n	23a <Chip_Clock_GetSystemPLLInClockRate+0x16>
		clkRate = Chip_Clock_GetExtClockInRate();
		break;
#endif

	default:
		clkRate = 0;
     22e:	2000      	movs	r0, #0
/* Return System PLL input clock rate */
uint32_t Chip_Clock_GetSystemPLLInClockRate(void)
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
     230:	2b01      	cmp	r3, #1
     232:	d103      	bne.n	23c <Chip_Clock_GetSystemPLLInClockRate+0x18>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
     234:	4b03      	ldr	r3, [pc, #12]	; (244 <Chip_Clock_GetSystemPLLInClockRate+0x20>)
     236:	6818      	ldr	r0, [r3, #0]
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_PLLCLKSRC_MAINOSC:
		clkRate = Chip_Clock_GetMainOscRate();
		break;
     238:	e000      	b.n	23c <Chip_Clock_GetSystemPLLInClockRate+0x18>
{
	uint32_t clkRate;

	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
	case SYSCTL_PLLCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
     23a:	4803      	ldr	r0, [pc, #12]	; (248 <Chip_Clock_GetSystemPLLInClockRate+0x24>)
	default:
		clkRate = 0;
	}

	return clkRate;
}
     23c:	4770      	bx	lr
     23e:	46c0      	nop			; (mov r8, r8)
     240:	40048000 	.word	0x40048000
     244:	00001e30 	.word	0x00001e30
     248:	00b71b00 	.word	0x00b71b00

0000024c <Chip_Clock_GetSystemPLLOutClockRate>:

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
     24c:	4b04      	ldr	r3, [pc, #16]	; (260 <Chip_Clock_GetSystemPLLOutClockRate+0x14>)
	return clkRate;
}

/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
     24e:	b510      	push	{r4, lr}
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
     250:	689c      	ldr	r4, [r3, #8]
     252:	f7ff ffe7 	bl	224 <Chip_Clock_GetSystemPLLInClockRate>
}

/* Compute a PLL frequency */
STATIC uint32_t Chip_Clock_GetPLLFreq(uint32_t PLLReg, uint32_t inputRate)
{
	uint32_t msel = ((PLLReg & 0x1F) + 1);
     256:	231f      	movs	r3, #31
     258:	4023      	ands	r3, r4
     25a:	3301      	adds	r3, #1

	return inputRate * msel;
     25c:	4358      	muls	r0, r3
/* Return System PLL output clock rate */
uint32_t Chip_Clock_GetSystemPLLOutClockRate(void)
{
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
								 Chip_Clock_GetSystemPLLInClockRate());
}
     25e:	bd10      	pop	{r4, pc}
     260:	40048000 	.word	0x40048000

00000264 <Chip_Clock_GetMainClockRate>:

#endif

/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
     264:	b508      	push	{r3, lr}
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
     266:	4b0a      	ldr	r3, [pc, #40]	; (290 <Chip_Clock_GetMainClockRate+0x2c>)
     268:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     26a:	2303      	movs	r3, #3
     26c:	4013      	ands	r3, r2
     26e:	2b02      	cmp	r3, #2
     270:	d006      	beq.n	280 <Chip_Clock_GetMainClockRate+0x1c>
     272:	2b03      	cmp	r3, #3
     274:	d007      	beq.n	286 <Chip_Clock_GetMainClockRate+0x22>
     276:	2b01      	cmp	r3, #1
     278:	d108      	bne.n	28c <Chip_Clock_GetMainClockRate+0x28>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
		break;

	case SYSCTL_MAINCLKSRC_PLLIN:
		clkRate = Chip_Clock_GetSystemPLLInClockRate();
     27a:	f7ff ffd3 	bl	224 <Chip_Clock_GetSystemPLLInClockRate>
		break;
     27e:	e006      	b.n	28e <Chip_Clock_GetMainClockRate+0x2a>
		clkRate = Chip_Clock_GetLFOOSCRate();
		break;

#else
	case SYSCTL_MAINCLKSRC_WDTOSC:
		clkRate = Chip_Clock_GetWDTOSCRate();
     280:	f7ff ffbc 	bl	1fc <Chip_Clock_GetWDTOSCRate>
		break;
     284:	e003      	b.n	28e <Chip_Clock_GetMainClockRate+0x2a>
#endif

	case SYSCTL_MAINCLKSRC_PLLOUT:
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
     286:	f7ff ffe1 	bl	24c <Chip_Clock_GetSystemPLLOutClockRate>
		break;
     28a:	e000      	b.n	28e <Chip_Clock_GetMainClockRate+0x2a>
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
     28c:	4801      	ldr	r0, [pc, #4]	; (294 <Chip_Clock_GetMainClockRate+0x30>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
     28e:	bd08      	pop	{r3, pc}
     290:	40048000 	.word	0x40048000
     294:	00b71b00 	.word	0x00b71b00

00000298 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
     298:	b508      	push	{r3, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
     29a:	f7ff ffe3 	bl	264 <Chip_Clock_GetMainClockRate>
     29e:	4b02      	ldr	r3, [pc, #8]	; (2a8 <Chip_Clock_GetSystemClockRate+0x10>)
     2a0:	6f99      	ldr	r1, [r3, #120]	; 0x78
     2a2:	f000 fd97 	bl	dd4 <__aeabi_uidiv>
}
     2a6:	bd08      	pop	{r3, pc}
     2a8:	40048000 	.word	0x40048000

000002ac <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
     2ac:	2140      	movs	r1, #64	; 0x40
     2ae:	4a02      	ldr	r2, [pc, #8]	; (2b8 <Chip_GPIO_Init+0xc>)
     2b0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
     2b2:	430b      	orrs	r3, r1
     2b4:	67d3      	str	r3, [r2, #124]	; 0x7c
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
     2b6:	4770      	bx	lr
     2b8:	40048004 	.word	0x40048004

000002bc <Chip_GPIO_WriteDirBit>:
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_GPIO);
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
     2bc:	b510      	push	{r4, lr}
     2be:	2480      	movs	r4, #128	; 0x80
     2c0:	0409      	lsls	r1, r1, #16
     2c2:	0224      	lsls	r4, r4, #8
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
     2c4:	1841      	adds	r1, r0, r1
}

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
     2c6:	2b00      	cmp	r3, #0
     2c8:	d006      	beq.n	2d8 <Chip_GPIO_WriteDirBit+0x1c>
		pGPIO[port].DIR |= 1UL << bit;
     2ca:	2001      	movs	r0, #1
     2cc:	4090      	lsls	r0, r2
     2ce:	1c02      	adds	r2, r0, #0
     2d0:	590b      	ldr	r3, [r1, r4]
     2d2:	431a      	orrs	r2, r3
     2d4:	510a      	str	r2, [r1, r4]
     2d6:	e004      	b.n	2e2 <Chip_GPIO_WriteDirBit+0x26>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
     2d8:	2001      	movs	r0, #1
     2da:	4090      	lsls	r0, r2
     2dc:	590b      	ldr	r3, [r1, r4]
     2de:	4383      	bics	r3, r0
     2e0:	510b      	str	r3, [r1, r4]
	}
}
     2e2:	bd10      	pop	{r4, pc}

000002e4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c;
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
     2e4:	2901      	cmp	r1, #1
     2e6:	d104      	bne.n	2f2 <Chip_I2C_EventHandler+0xe>
		return;
	}

	stat = &iic->mXfer->status;
     2e8:	4b02      	ldr	r3, [pc, #8]	; (2f4 <Chip_I2C_EventHandler+0x10>)
     2ea:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {
     2ec:	7d13      	ldrb	r3, [r2, #20]
     2ee:	2b04      	cmp	r3, #4
     2f0:	d0fc      	beq.n	2ec <Chip_I2C_EventHandler+0x8>
	}
}
     2f2:	4770      	bx	lr
     2f4:	10000100 	.word	0x10000100

000002f8 <handleMasterXferState>:
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
     2f8:	23f8      	movs	r3, #248	; 0xf8
     2fa:	6842      	ldr	r2, [r0, #4]
	return I2C_SLAVE_GENERAL;
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
     2fc:	b510      	push	{r4, lr}
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
     2fe:	4013      	ands	r3, r2

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
	switch (getCurState(pI2C)) {
     300:	2b28      	cmp	r3, #40	; 0x28
     302:	d027      	beq.n	354 <handleMasterXferState+0x5c>
     304:	dc0c      	bgt.n	320 <handleMasterXferState+0x28>
     306:	2b10      	cmp	r3, #16
     308:	d01c      	beq.n	344 <handleMasterXferState+0x4c>
     30a:	dc04      	bgt.n	316 <handleMasterXferState+0x1e>
     30c:	2b00      	cmp	r3, #0
     30e:	d049      	beq.n	3a4 <handleMasterXferState+0xac>
     310:	2b08      	cmp	r3, #8
     312:	d017      	beq.n	344 <handleMasterXferState+0x4c>
     314:	e04a      	b.n	3ac <handleMasterXferState+0xb4>
     316:	2b18      	cmp	r3, #24
     318:	d01c      	beq.n	354 <handleMasterXferState+0x5c>
     31a:	2b20      	cmp	r3, #32
     31c:	d040      	beq.n	3a0 <handleMasterXferState+0xa8>
     31e:	e045      	b.n	3ac <handleMasterXferState+0xb4>
     320:	2b40      	cmp	r3, #64	; 0x40
     322:	d036      	beq.n	392 <handleMasterXferState+0x9a>
     324:	dc06      	bgt.n	334 <handleMasterXferState+0x3c>
     326:	2b30      	cmp	r3, #48	; 0x30
     328:	d03a      	beq.n	3a0 <handleMasterXferState+0xa8>
     32a:	2b38      	cmp	r3, #56	; 0x38
     32c:	d13e      	bne.n	3ac <handleMasterXferState+0xb4>
		xfer->status = I2C_STATUS_NAK;
		cclr &= ~I2C_CON_STO;
		break;

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
     32e:	2302      	movs	r3, #2
     330:	750b      	strb	r3, [r1, #20]
     332:	e03b      	b.n	3ac <handleMasterXferState+0xb4>

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
	switch (getCurState(pI2C)) {
     334:	2b50      	cmp	r3, #80	; 0x50
     336:	d022      	beq.n	37e <handleMasterXferState+0x86>
		}
		break;

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
		cclr &= ~I2C_CON_STO;
     338:	222c      	movs	r2, #44	; 0x2c

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
	switch (getCurState(pI2C)) {
     33a:	2b58      	cmp	r3, #88	; 0x58
     33c:	d020      	beq.n	380 <handleMasterXferState+0x88>
     33e:	2b48      	cmp	r3, #72	; 0x48
     340:	d134      	bne.n	3ac <handleMasterXferState+0xb4>
     342:	e02d      	b.n	3a0 <handleMasterXferState+0xa8>
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
     344:	688a      	ldr	r2, [r1, #8]
     346:	4253      	negs	r3, r2
     348:	415a      	adcs	r2, r3
     34a:	780b      	ldrb	r3, [r1, #0]
     34c:	005b      	lsls	r3, r3, #1
     34e:	4313      	orrs	r3, r2
     350:	6083      	str	r3, [r0, #8]
     352:	e02b      	b.n	3ac <handleMasterXferState+0xb4>
		break;

	/* Tx handling */
	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
     354:	688b      	ldr	r3, [r1, #8]
     356:	2b00      	cmp	r3, #0
     358:	d109      	bne.n	36e <handleMasterXferState+0x76>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
     35a:	690b      	ldr	r3, [r1, #16]
     35c:	2b00      	cmp	r3, #0
     35e:	d101      	bne.n	364 <handleMasterXferState+0x6c>
     360:	3b11      	subs	r3, #17
     362:	e001      	b.n	368 <handleMasterXferState+0x70>
     364:	2321      	movs	r3, #33	; 0x21
     366:	425b      	negs	r3, r3
     368:	223c      	movs	r2, #60	; 0x3c
     36a:	401a      	ands	r2, r3
     36c:	e01f      	b.n	3ae <handleMasterXferState+0xb6>
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
     36e:	684a      	ldr	r2, [r1, #4]
			xfer->txSz--;
     370:	3b01      	subs	r3, #1
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
     372:	1c54      	adds	r4, r2, #1
     374:	604c      	str	r4, [r1, #4]
     376:	7812      	ldrb	r2, [r2, #0]
     378:	6082      	str	r2, [r0, #8]
			xfer->txSz--;
     37a:	608b      	str	r3, [r1, #8]
     37c:	e016      	b.n	3ac <handleMasterXferState+0xb4>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
     37e:	223c      	movs	r2, #60	; 0x3c
	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
		cclr &= ~I2C_CON_STO;

	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
     380:	68cb      	ldr	r3, [r1, #12]
     382:	1c5c      	adds	r4, r3, #1
     384:	60cc      	str	r4, [r1, #12]
     386:	6884      	ldr	r4, [r0, #8]
     388:	701c      	strb	r4, [r3, #0]
		xfer->rxSz--;
     38a:	690b      	ldr	r3, [r1, #16]
     38c:	3b01      	subs	r3, #1
     38e:	610b      	str	r3, [r1, #16]
     390:	e000      	b.n	394 <handleMasterXferState+0x9c>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
     392:	223c      	movs	r2, #60	; 0x3c
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if (xfer->rxSz > 1) {
     394:	690b      	ldr	r3, [r1, #16]
     396:	2b01      	cmp	r3, #1
     398:	dd09      	ble.n	3ae <handleMasterXferState+0xb6>
			cclr &= ~I2C_CON_AA;
     39a:	2304      	movs	r3, #4
     39c:	439a      	bics	r2, r3
     39e:	e006      	b.n	3ae <handleMasterXferState+0xb6>

	/* NAK Handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x30:		/* DATA sent NAK received */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2C_STATUS_NAK;
     3a0:	2301      	movs	r3, #1
     3a2:	e000      	b.n	3a6 <handleMasterXferState+0xae>
		xfer->status = I2C_STATUS_ARBLOST;
		break;

	/* Bus Error */
	case 0x00:
		xfer->status = I2C_STATUS_BUSERR;
     3a4:	2303      	movs	r3, #3
     3a6:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
     3a8:	222c      	movs	r2, #44	; 0x2c
     3aa:	e000      	b.n	3ae <handleMasterXferState+0xb6>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
     3ac:	223c      	movs	r2, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
	}


	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
     3ae:	233c      	movs	r3, #60	; 0x3c
     3b0:	4053      	eors	r3, r2
     3b2:	6003      	str	r3, [r0, #0]
	pI2C->CONCLR = cclr;
     3b4:	6182      	str	r2, [r0, #24]
     3b6:	7d0b      	ldrb	r3, [r1, #20]

	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
     3b8:	06d2      	lsls	r2, r2, #27
     3ba:	d502      	bpl.n	3c2 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
			xfer->status = I2C_STATUS_DONE;
		}
		return 0;
	}
	return 1;
     3bc:	2001      	movs	r0, #1
	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
	pI2C->CONCLR = cclr;

	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
     3be:	2b02      	cmp	r3, #2
     3c0:	d103      	bne.n	3ca <handleMasterXferState+0xd2>
     3c2:	2000      	movs	r0, #0
		if (xfer->status == I2C_STATUS_BUSY) {
     3c4:	2b04      	cmp	r3, #4
     3c6:	d100      	bne.n	3ca <handleMasterXferState+0xd2>
			xfer->status = I2C_STATUS_DONE;
     3c8:	7508      	strb	r0, [r1, #20]
		}
		return 0;
	}
	return 1;
}
     3ca:	bd10      	pop	{r4, pc}

000003cc <getSlaveIndex>:
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
     3cc:	23f8      	movs	r3, #248	; 0xf8
     3ce:	6842      	ldr	r2, [r0, #4]
	return 1;
}

/* Find the slave address of SLA+W or SLA+R */
I2C_SLAVE_ID getSlaveIndex(LPC_I2C_T *pI2C)
{
     3d0:	b530      	push	{r4, r5, lr}
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
     3d2:	4013      	ands	r3, r2
}

/* Find the slave address of SLA+W or SLA+R */
I2C_SLAVE_ID getSlaveIndex(LPC_I2C_T *pI2C)
{
	switch (getCurState(pI2C)) {
     3d4:	2b70      	cmp	r3, #112	; 0x70
     3d6:	d00b      	beq.n	3f0 <getSlaveIndex+0x24>
     3d8:	dc04      	bgt.n	3e4 <getSlaveIndex+0x18>
     3da:	2b60      	cmp	r3, #96	; 0x60
     3dc:	d008      	beq.n	3f0 <getSlaveIndex+0x24>
     3de:	2b68      	cmp	r3, #104	; 0x68
     3e0:	d137      	bne.n	452 <getSlaveIndex+0x86>
     3e2:	e005      	b.n	3f0 <getSlaveIndex+0x24>
     3e4:	2ba8      	cmp	r3, #168	; 0xa8
     3e6:	d003      	beq.n	3f0 <getSlaveIndex+0x24>
     3e8:	2bb0      	cmp	r3, #176	; 0xb0
     3ea:	d001      	beq.n	3f0 <getSlaveIndex+0x24>
     3ec:	2b78      	cmp	r3, #120	; 0x78
     3ee:	d130      	bne.n	452 <getSlaveIndex+0x86>
	case 0x68:
	case 0x70:
	case 0x78:
	case 0xA8:
	case 0xB0:
		return lookupSlaveIndex(pI2C, pI2C->DAT);
     3f0:	6883      	ldr	r3, [r0, #8]
     3f2:	b2d9      	uxtb	r1, r3

/* Get the index of the active slave */
STATIC I2C_SLAVE_ID lookupSlaveIndex(LPC_I2C_T *pI2C, uint8_t slaveAddr)
{
	if (!(slaveAddr >> 1)) {
		return I2C_SLAVE_GENERAL;					/* General call address */
     3f4:	2300      	movs	r3, #0
}

/* Get the index of the active slave */
STATIC I2C_SLAVE_ID lookupSlaveIndex(LPC_I2C_T *pI2C, uint8_t slaveAddr)
{
	if (!(slaveAddr >> 1)) {
     3f6:	084a      	lsrs	r2, r1, #1
     3f8:	429a      	cmp	r2, r3
     3fa:	d02b      	beq.n	454 <getSlaveIndex+0x88>
}

/* Match the slave address */
STATIC int isSlaveAddrMatching(uint8_t addr1, uint8_t addr2, uint8_t mask)
{
	mask |= 1;
     3fc:	2401      	movs	r4, #1
STATIC I2C_SLAVE_ID lookupSlaveIndex(LPC_I2C_T *pI2C, uint8_t slaveAddr)
{
	if (!(slaveAddr >> 1)) {
		return I2C_SLAVE_GENERAL;					/* General call address */
	}
	if (isSlaveAddrMatching(pI2C->ADR0, slaveAddr, pI2C->MASK[0])) {
     3fe:	68c2      	ldr	r2, [r0, #12]
     400:	6b03      	ldr	r3, [r0, #48]	; 0x30

/* Match the slave address */
STATIC int isSlaveAddrMatching(uint8_t addr1, uint8_t addr2, uint8_t mask)
{
	mask |= 1;
	return (addr1 & ~mask) == (addr2 & ~mask);
     402:	404a      	eors	r2, r1
}

/* Match the slave address */
STATIC int isSlaveAddrMatching(uint8_t addr1, uint8_t addr2, uint8_t mask)
{
	mask |= 1;
     404:	4323      	orrs	r3, r4
	return (addr1 & ~mask) == (addr2 & ~mask);
     406:	b2db      	uxtb	r3, r3
     408:	b2d2      	uxtb	r2, r2
     40a:	439a      	bics	r2, r3
{
	if (!(slaveAddr >> 1)) {
		return I2C_SLAVE_GENERAL;					/* General call address */
	}
	if (isSlaveAddrMatching(pI2C->ADR0, slaveAddr, pI2C->MASK[0])) {
		return I2C_SLAVE_0;
     40c:	1c23      	adds	r3, r4, #0
STATIC I2C_SLAVE_ID lookupSlaveIndex(LPC_I2C_T *pI2C, uint8_t slaveAddr)
{
	if (!(slaveAddr >> 1)) {
		return I2C_SLAVE_GENERAL;					/* General call address */
	}
	if (isSlaveAddrMatching(pI2C->ADR0, slaveAddr, pI2C->MASK[0])) {
     40e:	2a00      	cmp	r2, #0
     410:	d020      	beq.n	454 <getSlaveIndex+0x88>
		return I2C_SLAVE_0;
	}
	if (isSlaveAddrMatching(pI2C->ADR1, slaveAddr, pI2C->MASK[1])) {
     412:	6a02      	ldr	r2, [r0, #32]
     414:	6b45      	ldr	r5, [r0, #52]	; 0x34

/* Match the slave address */
STATIC int isSlaveAddrMatching(uint8_t addr1, uint8_t addr2, uint8_t mask)
{
	mask |= 1;
	return (addr1 & ~mask) == (addr2 & ~mask);
     416:	404a      	eors	r2, r1
}

/* Match the slave address */
STATIC int isSlaveAddrMatching(uint8_t addr1, uint8_t addr2, uint8_t mask)
{
	mask |= 1;
     418:	432b      	orrs	r3, r5
	return (addr1 & ~mask) == (addr2 & ~mask);
     41a:	b2db      	uxtb	r3, r3
     41c:	b2d2      	uxtb	r2, r2
     41e:	439a      	bics	r2, r3
	}
	if (isSlaveAddrMatching(pI2C->ADR0, slaveAddr, pI2C->MASK[0])) {
		return I2C_SLAVE_0;
	}
	if (isSlaveAddrMatching(pI2C->ADR1, slaveAddr, pI2C->MASK[1])) {
		return I2C_SLAVE_1;
     420:	2302      	movs	r3, #2
		return I2C_SLAVE_GENERAL;					/* General call address */
	}
	if (isSlaveAddrMatching(pI2C->ADR0, slaveAddr, pI2C->MASK[0])) {
		return I2C_SLAVE_0;
	}
	if (isSlaveAddrMatching(pI2C->ADR1, slaveAddr, pI2C->MASK[1])) {
     422:	2a00      	cmp	r2, #0
     424:	d016      	beq.n	454 <getSlaveIndex+0x88>
		return I2C_SLAVE_1;
	}
	if (isSlaveAddrMatching(pI2C->ADR2, slaveAddr, pI2C->MASK[2])) {
     426:	6a42      	ldr	r2, [r0, #36]	; 0x24
     428:	6b83      	ldr	r3, [r0, #56]	; 0x38

/* Match the slave address */
STATIC int isSlaveAddrMatching(uint8_t addr1, uint8_t addr2, uint8_t mask)
{
	mask |= 1;
	return (addr1 & ~mask) == (addr2 & ~mask);
     42a:	404a      	eors	r2, r1
}

/* Match the slave address */
STATIC int isSlaveAddrMatching(uint8_t addr1, uint8_t addr2, uint8_t mask)
{
	mask |= 1;
     42c:	4323      	orrs	r3, r4
	return (addr1 & ~mask) == (addr2 & ~mask);
     42e:	b2db      	uxtb	r3, r3
     430:	b2d2      	uxtb	r2, r2
     432:	439a      	bics	r2, r3
	}
	if (isSlaveAddrMatching(pI2C->ADR1, slaveAddr, pI2C->MASK[1])) {
		return I2C_SLAVE_1;
	}
	if (isSlaveAddrMatching(pI2C->ADR2, slaveAddr, pI2C->MASK[2])) {
		return I2C_SLAVE_2;
     434:	2303      	movs	r3, #3
		return I2C_SLAVE_0;
	}
	if (isSlaveAddrMatching(pI2C->ADR1, slaveAddr, pI2C->MASK[1])) {
		return I2C_SLAVE_1;
	}
	if (isSlaveAddrMatching(pI2C->ADR2, slaveAddr, pI2C->MASK[2])) {
     436:	2a00      	cmp	r2, #0
     438:	d00c      	beq.n	454 <getSlaveIndex+0x88>
		return I2C_SLAVE_2;
	}
	if (isSlaveAddrMatching(pI2C->ADR3, slaveAddr, pI2C->MASK[3])) {
     43a:	6a82      	ldr	r2, [r0, #40]	; 0x28
     43c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
}

/* Match the slave address */
STATIC int isSlaveAddrMatching(uint8_t addr1, uint8_t addr2, uint8_t mask)
{
	mask |= 1;
     43e:	431c      	orrs	r4, r3
	return (addr1 & ~mask) == (addr2 & ~mask);
     440:	1c0b      	adds	r3, r1, #0
     442:	4053      	eors	r3, r2
     444:	b2e4      	uxtb	r4, r4
     446:	b2db      	uxtb	r3, r3
     448:	43a3      	bics	r3, r4
	if (isSlaveAddrMatching(pI2C->ADR3, slaveAddr, pI2C->MASK[3])) {
		return I2C_SLAVE_3;
	}

	/* If everything is fine the code should never come here */
	return I2C_SLAVE_GENERAL;
     44a:	4258      	negs	r0, r3
     44c:	4143      	adcs	r3, r0
     44e:	009b      	lsls	r3, r3, #2
     450:	e000      	b.n	454 <getSlaveIndex+0x88>
	case 0xB0:
		return lookupSlaveIndex(pI2C, pI2C->DAT);
	}

	/* If everything is fine code should never come here */
	return I2C_SLAVE_GENERAL;
     452:	2300      	movs	r3, #0
}
     454:	1c18      	adds	r0, r3, #0
     456:	bd30      	pop	{r4, r5, pc}

00000458 <handleSlaveXferState>:
int handleSlaveXferState(LPC_I2C_T *pI2C, I2C_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
	int ret = RET_SLAVE_BUSY;

	xfer->status = I2C_STATUS_BUSY;
     458:	2304      	movs	r3, #4
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
     45a:	6842      	ldr	r2, [r0, #4]
int handleSlaveXferState(LPC_I2C_T *pI2C, I2C_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
	int ret = RET_SLAVE_BUSY;

	xfer->status = I2C_STATUS_BUSY;
     45c:	750b      	strb	r3, [r1, #20]
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
     45e:	33f4      	adds	r3, #244	; 0xf4
     460:	4013      	ands	r3, r2
{
	uint32_t cclr = I2C_CON_FLAGS;
	int ret = RET_SLAVE_BUSY;

	xfer->status = I2C_STATUS_BUSY;
	switch (getCurState(pI2C)) {
     462:	2b90      	cmp	r3, #144	; 0x90
     464:	d020      	beq.n	4a8 <handleSlaveXferState+0x50>
     466:	dc0e      	bgt.n	486 <handleSlaveXferState+0x2e>
     468:	2b70      	cmp	r3, #112	; 0x70
     46a:	d029      	beq.n	4c0 <handleSlaveXferState+0x68>
     46c:	dc04      	bgt.n	478 <handleSlaveXferState+0x20>
     46e:	2b60      	cmp	r3, #96	; 0x60
     470:	d026      	beq.n	4c0 <handleSlaveXferState+0x68>
     472:	2b68      	cmp	r3, #104	; 0x68
     474:	d024      	beq.n	4c0 <handleSlaveXferState+0x68>
     476:	e044      	b.n	502 <handleSlaveXferState+0xaa>
     478:	2b80      	cmp	r3, #128	; 0x80
     47a:	d015      	beq.n	4a8 <handleSlaveXferState+0x50>
     47c:	2b88      	cmp	r3, #136	; 0x88
     47e:	d038      	beq.n	4f2 <handleSlaveXferState+0x9a>
     480:	2b78      	cmp	r3, #120	; 0x78
     482:	d13e      	bne.n	502 <handleSlaveXferState+0xaa>
     484:	e01c      	b.n	4c0 <handleSlaveXferState+0x68>
     486:	2bb0      	cmp	r3, #176	; 0xb0
     488:	d023      	beq.n	4d2 <handleSlaveXferState+0x7a>
     48a:	dc06      	bgt.n	49a <handleSlaveXferState+0x42>
     48c:	2ba0      	cmp	r3, #160	; 0xa0
     48e:	d030      	beq.n	4f2 <handleSlaveXferState+0x9a>
     490:	2ba8      	cmp	r3, #168	; 0xa8
     492:	d01e      	beq.n	4d2 <handleSlaveXferState+0x7a>
     494:	2b98      	cmp	r3, #152	; 0x98
     496:	d134      	bne.n	502 <handleSlaveXferState+0xaa>
     498:	e02b      	b.n	4f2 <handleSlaveXferState+0x9a>
     49a:	2bc0      	cmp	r3, #192	; 0xc0
     49c:	d029      	beq.n	4f2 <handleSlaveXferState+0x9a>
     49e:	2bc8      	cmp	r3, #200	; 0xc8
     4a0:	d027      	beq.n	4f2 <handleSlaveXferState+0x9a>
     4a2:	2bb8      	cmp	r3, #184	; 0xb8
     4a4:	d019      	beq.n	4da <handleSlaveXferState+0x82>
     4a6:	e02c      	b.n	502 <handleSlaveXferState+0xaa>
	case 0x80:		/* SLA: Data received + ACK sent */
	case 0x90:		/* GC: Data received + ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
     4a8:	68cb      	ldr	r3, [r1, #12]
     4aa:	1c5a      	adds	r2, r3, #1
     4ac:	60ca      	str	r2, [r1, #12]
     4ae:	6882      	ldr	r2, [r0, #8]
     4b0:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
     4b2:	690b      	ldr	r3, [r1, #16]
		ret = RET_SLAVE_RX;
     4b4:	2205      	movs	r2, #5
	xfer->status = I2C_STATUS_BUSY;
	switch (getCurState(pI2C)) {
	case 0x80:		/* SLA: Data received + ACK sent */
	case 0x90:		/* GC: Data received + ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;
     4b6:	3b01      	subs	r3, #1
     4b8:	610b      	str	r3, [r1, #16]
		ret = RET_SLAVE_RX;
		if (xfer->rxSz > 1) {
     4ba:	2b01      	cmp	r3, #1
     4bc:	dc24      	bgt.n	508 <handleSlaveXferState+0xb0>
     4be:	e021      	b.n	504 <handleSlaveXferState+0xac>

	case 0x60:		/* Own SLA+W received */
	case 0x68:		/* Own SLA+W received after losing arbitration */
	case 0x70:		/* GC+W received */
	case 0x78:		/* GC+W received after losing arbitration */
		xfer->slaveAddr = pI2C->DAT & ~1;
     4c0:	2201      	movs	r2, #1
     4c2:	6883      	ldr	r3, [r0, #8]
     4c4:	4393      	bics	r3, r2
     4c6:	700b      	strb	r3, [r1, #0]
		if (xfer->rxSz > 1) {
     4c8:	690b      	ldr	r3, [r1, #16]
     4ca:	4293      	cmp	r3, r2
     4cc:	dd19      	ble.n	502 <handleSlaveXferState+0xaa>

/* Slave state machine handler */
int handleSlaveXferState(LPC_I2C_T *pI2C, I2C_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
	int ret = RET_SLAVE_BUSY;
     4ce:	2200      	movs	r2, #0
     4d0:	e01a      	b.n	508 <handleSlaveXferState+0xb0>
		}
		break;

	case 0xA8:		/* SLA+R received */
	case 0xB0:		/* SLA+R received after losing arbitration */
		xfer->slaveAddr = pI2C->DAT & ~1;
     4d2:	2201      	movs	r2, #1
     4d4:	6883      	ldr	r3, [r0, #8]
     4d6:	4393      	bics	r3, r2
     4d8:	700b      	strb	r3, [r1, #0]

	case 0xB8:		/* DATA sent and ACK received */
		pI2C->DAT = *xfer->txBuff++;
     4da:	684b      	ldr	r3, [r1, #4]
     4dc:	1c5a      	adds	r2, r3, #1
     4de:	604a      	str	r2, [r1, #4]
     4e0:	781b      	ldrb	r3, [r3, #0]
		xfer->txSz--;
		if (xfer->txSz > 0) {
			cclr &= ~I2C_CON_AA;
		}
		ret = RET_SLAVE_TX;
     4e2:	2206      	movs	r2, #6
	case 0xA8:		/* SLA+R received */
	case 0xB0:		/* SLA+R received after losing arbitration */
		xfer->slaveAddr = pI2C->DAT & ~1;

	case 0xB8:		/* DATA sent and ACK received */
		pI2C->DAT = *xfer->txBuff++;
     4e4:	6083      	str	r3, [r0, #8]
		xfer->txSz--;
     4e6:	688b      	ldr	r3, [r1, #8]
     4e8:	3b01      	subs	r3, #1
     4ea:	608b      	str	r3, [r1, #8]
		if (xfer->txSz > 0) {
     4ec:	2b00      	cmp	r3, #0
     4ee:	dc0b      	bgt.n	508 <handleSlaveXferState+0xb0>
     4f0:	e008      	b.n	504 <handleSlaveXferState+0xac>
	case 0x88:		/* SLA: Data received + NAK sent */
	case 0x98:		/* GC: Data received + NAK sent */
	case 0xA0:		/* STOP/Repeated START condition received */
		ret = RET_SLAVE_IDLE;
		cclr &= ~I2C_CON_AA;
		xfer->status = I2C_STATUS_DONE;
     4f2:	2300      	movs	r3, #0
     4f4:	750b      	strb	r3, [r1, #20]
		if (xfer->slaveAddr & 1) {
     4f6:	780b      	ldrb	r3, [r1, #0]
	case 0xC0:		/* Data transmitted and NAK received */
	case 0xC8:		/* Last data transmitted and ACK received */
	case 0x88:		/* SLA: Data received + NAK sent */
	case 0x98:		/* GC: Data received + NAK sent */
	case 0xA0:		/* STOP/Repeated START condition received */
		ret = RET_SLAVE_IDLE;
     4f8:	2202      	movs	r2, #2
		cclr &= ~I2C_CON_AA;
		xfer->status = I2C_STATUS_DONE;
		if (xfer->slaveAddr & 1) {
     4fa:	07db      	lsls	r3, r3, #31
     4fc:	d504      	bpl.n	508 <handleSlaveXferState+0xb0>
			cclr &= ~I2C_CON_STA;
     4fe:	2318      	movs	r3, #24
     500:	e003      	b.n	50a <handleSlaveXferState+0xb2>

/* Slave state machine handler */
int handleSlaveXferState(LPC_I2C_T *pI2C, I2C_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
	int ret = RET_SLAVE_BUSY;
     502:	2200      	movs	r2, #0
}

/* Slave state machine handler */
int handleSlaveXferState(LPC_I2C_T *pI2C, I2C_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
     504:	233c      	movs	r3, #60	; 0x3c
     506:	e000      	b.n	50a <handleSlaveXferState+0xb2>
	case 0xC8:		/* Last data transmitted and ACK received */
	case 0x88:		/* SLA: Data received + NAK sent */
	case 0x98:		/* GC: Data received + NAK sent */
	case 0xA0:		/* STOP/Repeated START condition received */
		ret = RET_SLAVE_IDLE;
		cclr &= ~I2C_CON_AA;
     508:	2338      	movs	r3, #56	; 0x38
		}
		break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
     50a:	213c      	movs	r1, #60	; 0x3c
     50c:	4059      	eors	r1, r3
     50e:	6001      	str	r1, [r0, #0]
	pI2C->CONCLR = cclr;
     510:	6183      	str	r3, [r0, #24]

	return ret;
}
     512:	1c10      	adds	r0, r2, #0
     514:	4770      	bx	lr
	...

00000518 <Chip_I2C_Init>:
/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{

	i2c.ip = LPC_I2C;
	i2c.clk = SYSCTL_CLOCK_I2C;
     518:	2205      	movs	r2, #5

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{

	i2c.ip = LPC_I2C;
     51a:	4b0a      	ldr	r3, [pc, #40]	; (544 <Chip_I2C_Init+0x2c>)
     51c:	2180      	movs	r1, #128	; 0x80
	i2c.clk = SYSCTL_CLOCK_I2C;
     51e:	711a      	strb	r2, [r3, #4]
	i2c.mEvent = Chip_I2C_EventHandler;
     520:	4a09      	ldr	r2, [pc, #36]	; (548 <Chip_I2C_Init+0x30>)
     522:	2020      	movs	r0, #32
     524:	609a      	str	r2, [r3, #8]
	i2c.sEvent = NULL;
     526:	2200      	movs	r2, #0
     528:	60da      	str	r2, [r3, #12]
	i2c.mXfer = NULL;
     52a:	611a      	str	r2, [r3, #16]
	i2c.sXfer = NULL;
     52c:	615a      	str	r2, [r3, #20]
	i2c.flags = 0;
     52e:	619a      	str	r2, [r3, #24]
     530:	4a06      	ldr	r2, [pc, #24]	; (54c <Chip_I2C_Init+0x34>)

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{

	i2c.ip = LPC_I2C;
     532:	05c9      	lsls	r1, r1, #23
     534:	6019      	str	r1, [r3, #0]
     536:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
     538:	4303      	orrs	r3, r0
     53a:	67d3      	str	r3, [r2, #124]	; 0x7c


	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
     53c:	236c      	movs	r3, #108	; 0x6c
     53e:	618b      	str	r3, [r1, #24]
}
     540:	4770      	bx	lr
     542:	46c0      	nop			; (mov r8, r8)
     544:	10000100 	.word	0x10000100
     548:	000002e5 	.word	0x000002e5
     54c:	40048004 	.word	0x40048004

00000550 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
     550:	b508      	push	{r3, lr}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(void)
{
	// return Chip_Clock_GetMainClockRate();
	return SystemCoreClock;
     552:	4b06      	ldr	r3, [pc, #24]	; (56c <Chip_I2C_SetClockRate+0x1c>)
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate() / clockrate);
     554:	6818      	ldr	r0, [r3, #0]
     556:	f000 fc3d 	bl	dd4 <__aeabi_uidiv>
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
     55a:	4b05      	ldr	r3, [pc, #20]	; (570 <Chip_I2C_SetClockRate+0x20>)
     55c:	0842      	lsrs	r2, r0, #1
     55e:	681b      	ldr	r3, [r3, #0]
     560:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
     562:	691a      	ldr	r2, [r3, #16]
     564:	1a80      	subs	r0, r0, r2
     566:	6158      	str	r0, [r3, #20]
}
     568:	bd08      	pop	{r3, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	1000011c 	.word	0x1000011c
     570:	10000100 	.word	0x10000100

00000574 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c; 
	if (!iic->mXfer) {
     574:	4b04      	ldr	r3, [pc, #16]	; (588 <Chip_I2C_SetMasterEventHandler+0x14>)
     576:	691a      	ldr	r2, [r3, #16]
     578:	2a00      	cmp	r2, #0
     57a:	d100      	bne.n	57e <Chip_I2C_SetMasterEventHandler+0xa>
		iic->mEvent = event;
     57c:	6099      	str	r1, [r3, #8]
	}
	return iic->mEvent == event;
     57e:	689b      	ldr	r3, [r3, #8]
     580:	1a58      	subs	r0, r3, r1
     582:	4241      	negs	r1, r0
     584:	4148      	adcs	r0, r1
}
     586:	4770      	bx	lr
     588:	10000100 	.word	0x10000100

0000058c <Chip_I2C_MasterTransfer>:
	return i2c.mEvent;
}

/* Transmit and Receive data in master mode */
int Chip_I2C_MasterTransfer(I2C_ID_T id, I2C_XFER_T *xfer)
{
     58c:	b570      	push	{r4, r5, r6, lr}
	struct i2c_interface *iic = &i2c;

	i2c.mEvent(id, I2C_EVENT_LOCK);
     58e:	4c15      	ldr	r4, [pc, #84]	; (5e4 <Chip_I2C_MasterTransfer+0x58>)
	return i2c.mEvent;
}

/* Transmit and Receive data in master mode */
int Chip_I2C_MasterTransfer(I2C_ID_T id, I2C_XFER_T *xfer)
{
     590:	1c0d      	adds	r5, r1, #0
	struct i2c_interface *iic = &i2c;

	i2c.mEvent(id, I2C_EVENT_LOCK);
     592:	68a3      	ldr	r3, [r4, #8]
     594:	2103      	movs	r1, #3
	return i2c.mEvent;
}

/* Transmit and Receive data in master mode */
int Chip_I2C_MasterTransfer(I2C_ID_T id, I2C_XFER_T *xfer)
{
     596:	1c06      	adds	r6, r0, #0
	struct i2c_interface *iic = &i2c;

	i2c.mEvent(id, I2C_EVENT_LOCK);
     598:	4798      	blx	r3
	xfer->status = I2C_STATUS_BUSY;
     59a:	2304      	movs	r3, #4
     59c:	752b      	strb	r3, [r5, #20]
	iic->mXfer = xfer;
	/* If slave xfer not in progress */
	if (!iic->sXfer) {
     59e:	6963      	ldr	r3, [r4, #20]
{
	struct i2c_interface *iic = &i2c;

	i2c.mEvent(id, I2C_EVENT_LOCK);
	xfer->status = I2C_STATUS_BUSY;
	iic->mXfer = xfer;
     5a0:	6125      	str	r5, [r4, #16]
	/* If slave xfer not in progress */
	if (!iic->sXfer) {
     5a2:	2b00      	cmp	r3, #0
     5a4:	d104      	bne.n	5b0 <Chip_I2C_MasterTransfer+0x24>

/* Enable I2C and start master transfer */
STATIC INLINE void startMasterXfer(LPC_I2C_T *pI2C)
{
	/* Reset STA, STO, SI */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STO | I2C_CON_STA | I2C_CON_AA;
     5a6:	223c      	movs	r2, #60	; 0x3c
	i2c.mEvent(id, I2C_EVENT_LOCK);
	xfer->status = I2C_STATUS_BUSY;
	iic->mXfer = xfer;
	/* If slave xfer not in progress */
	if (!iic->sXfer) {
		startMasterXfer(iic->ip);
     5a8:	6823      	ldr	r3, [r4, #0]

/* Enable I2C and start master transfer */
STATIC INLINE void startMasterXfer(LPC_I2C_T *pI2C)
{
	/* Reset STA, STO, SI */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STO | I2C_CON_STA | I2C_CON_AA;
     5aa:	619a      	str	r2, [r3, #24]

	/* Enter to Master Transmitter mode */
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
     5ac:	3224      	adds	r2, #36	; 0x24
     5ae:	601a      	str	r2, [r3, #0]
	iic->mXfer = xfer;
	/* If slave xfer not in progress */
	if (!iic->sXfer) {
		startMasterXfer(iic->ip);
	} 
	i2c.mEvent(id, I2C_EVENT_WAIT);
     5b0:	68a3      	ldr	r3, [r4, #8]
     5b2:	1c30      	adds	r0, r6, #0
     5b4:	2101      	movs	r1, #1
     5b6:	4798      	blx	r3
	iic->mXfer = 0;
     5b8:	2300      	movs	r3, #0
     5ba:	6123      	str	r3, [r4, #16]

	/* Wait for stop condition to appear on bus */
	while (!isI2CBusFree(iic->ip)) {}
     5bc:	6823      	ldr	r3, [r4, #0]
}

/* Check if I2C bus is free */
STATIC INLINE int isI2CBusFree(LPC_I2C_T *pI2C)
{
	return !(pI2C->CONSET & I2C_CON_STO);
     5be:	681a      	ldr	r2, [r3, #0]
	} 
	i2c.mEvent(id, I2C_EVENT_WAIT);
	iic->mXfer = 0;

	/* Wait for stop condition to appear on bus */
	while (!isI2CBusFree(iic->ip)) {}
     5c0:	06d2      	lsls	r2, r2, #27
     5c2:	d4fc      	bmi.n	5be <Chip_I2C_MasterTransfer+0x32>

	/* Start slave if one is active */
	if (SLAVE_ACTIVE(iic)) {
     5c4:	22ff      	movs	r2, #255	; 0xff
     5c6:	69a1      	ldr	r1, [r4, #24]
     5c8:	0212      	lsls	r2, r2, #8
     5ca:	4211      	tst	r1, r2
     5cc:	d003      	beq.n	5d6 <Chip_I2C_MasterTransfer+0x4a>

/* Enable I2C and enable slave transfers */
STATIC INLINE void startSlaverXfer(LPC_I2C_T *pI2C)
{
	/* Reset STA, STO, SI */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STO | I2C_CON_STA;
     5ce:	2238      	movs	r2, #56	; 0x38
     5d0:	619a      	str	r2, [r3, #24]

	/* Enter to Master Transmitter mode */
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_AA;
     5d2:	320c      	adds	r2, #12
     5d4:	601a      	str	r2, [r3, #0]
	/* Start slave if one is active */
	if (SLAVE_ACTIVE(iic)) {
		startSlaverXfer(iic->ip);
	}

	i2c.mEvent(id, I2C_EVENT_UNLOCK);
     5d6:	1c30      	adds	r0, r6, #0
     5d8:	68a3      	ldr	r3, [r4, #8]
     5da:	2104      	movs	r1, #4
     5dc:	4798      	blx	r3
	return (int) xfer->status;
     5de:	7d28      	ldrb	r0, [r5, #20]
}
     5e0:	bd70      	pop	{r4, r5, r6, pc}
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	10000100 	.word	0x10000100

000005e8 <Chip_I2C_MasterSend>:

/* Master tx only */
int Chip_I2C_MasterSend(I2C_ID_T id, uint8_t slaveAddr, const uint8_t *buff, uint8_t len)
{
     5e8:	b530      	push	{r4, r5, lr}
     5ea:	b087      	sub	sp, #28
     5ec:	1c1c      	adds	r4, r3, #0
	I2C_XFER_T xfer;
	xfer.slaveAddr = slaveAddr;
     5ee:	466b      	mov	r3, sp
     5f0:	7019      	strb	r1, [r3, #0]
	xfer.txBuff = buff;
	xfer.txSz = len;
	xfer.rxSz = 0;
     5f2:	2300      	movs	r3, #0
	return (int) xfer->status;
}

/* Master tx only */
int Chip_I2C_MasterSend(I2C_ID_T id, uint8_t slaveAddr, const uint8_t *buff, uint8_t len)
{
     5f4:	1c05      	adds	r5, r0, #0
	I2C_XFER_T xfer;
	xfer.slaveAddr = slaveAddr;
	xfer.txBuff = buff;
     5f6:	9201      	str	r2, [sp, #4]
	xfer.txSz = len;
     5f8:	9402      	str	r4, [sp, #8]
	xfer.rxSz = 0;
     5fa:	9304      	str	r3, [sp, #16]
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {}
     5fc:	1c28      	adds	r0, r5, #0
     5fe:	4669      	mov	r1, sp
     600:	f7ff ffc4 	bl	58c <Chip_I2C_MasterTransfer>
     604:	2802      	cmp	r0, #2
     606:	d0f9      	beq.n	5fc <Chip_I2C_MasterSend+0x14>
	return len - xfer.txSz;
     608:	9802      	ldr	r0, [sp, #8]
     60a:	1a20      	subs	r0, r4, r0
}
     60c:	b007      	add	sp, #28
     60e:	bd30      	pop	{r4, r5, pc}

00000610 <Chip_I2C_MasterRead>:
	return len - xfer.rxSz;
}

/* Sequential master read */
int Chip_I2C_MasterRead(I2C_ID_T id, uint8_t slaveAddr, uint8_t *buff, int len)
{
     610:	b530      	push	{r4, r5, lr}
     612:	b087      	sub	sp, #28
     614:	1c1c      	adds	r4, r3, #0
	I2C_XFER_T xfer;
	xfer.slaveAddr = slaveAddr;
     616:	466b      	mov	r3, sp
     618:	7019      	strb	r1, [r3, #0]
	xfer.rxBuff = buff;
	xfer.rxSz = len;
	xfer.txSz = 0;
     61a:	2300      	movs	r3, #0
	return len - xfer.rxSz;
}

/* Sequential master read */
int Chip_I2C_MasterRead(I2C_ID_T id, uint8_t slaveAddr, uint8_t *buff, int len)
{
     61c:	1c05      	adds	r5, r0, #0
	I2C_XFER_T xfer;
	xfer.slaveAddr = slaveAddr;
	xfer.rxBuff = buff;
     61e:	9203      	str	r2, [sp, #12]
	xfer.rxSz = len;
     620:	9404      	str	r4, [sp, #16]
	xfer.txSz = 0;
     622:	9302      	str	r3, [sp, #8]
	while (Chip_I2C_MasterTransfer(id, &xfer) == I2C_STATUS_ARBLOST) {}
     624:	1c28      	adds	r0, r5, #0
     626:	4669      	mov	r1, sp
     628:	f7ff ffb0 	bl	58c <Chip_I2C_MasterTransfer>
     62c:	2802      	cmp	r0, #2
     62e:	d0f9      	beq.n	624 <Chip_I2C_MasterRead+0x14>
	return len - xfer.rxSz;
     630:	9804      	ldr	r0, [sp, #16]
     632:	1a20      	subs	r0, r4, r0
}
     634:	b007      	add	sp, #28
     636:	bd30      	pop	{r4, r5, pc}

00000638 <Chip_I2C_IsMasterActive>:

/* Check if master state is active */
int Chip_I2C_IsMasterActive(I2C_ID_T id)
{
	return isMasterState(i2c.ip);
     638:	4b05      	ldr	r3, [pc, #20]	; (650 <Chip_I2C_IsMasterActive+0x18>)
}

/* Check if the active state belongs to master mode*/
STATIC INLINE int isMasterState(LPC_I2C_T *pI2C)
{
	return getCurState(pI2C) < 0x60;
     63a:	215f      	movs	r1, #95	; 0x5f
}

/* Check if master state is active */
int Chip_I2C_IsMasterActive(I2C_ID_T id)
{
	return isMasterState(i2c.ip);
     63c:	681b      	ldr	r3, [r3, #0]
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
     63e:	685a      	ldr	r2, [r3, #4]
     640:	23f8      	movs	r3, #248	; 0xf8
     642:	4013      	ands	r3, r2
}

/* Check if the active state belongs to master mode*/
STATIC INLINE int isMasterState(LPC_I2C_T *pI2C)
{
	return getCurState(pI2C) < 0x60;
     644:	2200      	movs	r2, #0
     646:	0fd8      	lsrs	r0, r3, #31
     648:	4299      	cmp	r1, r3
     64a:	4150      	adcs	r0, r2

/* Check if master state is active */
int Chip_I2C_IsMasterActive(I2C_ID_T id)
{
	return isMasterState(i2c.ip);
}
     64c:	4770      	bx	lr
     64e:	46c0      	nop			; (mov r8, r8)
     650:	10000100 	.word	0x10000100

00000654 <Chip_I2C_MasterStateHandler>:

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
     654:	b538      	push	{r3, r4, r5, lr}
	if (!handleMasterXferState(i2c.ip, i2c.mXfer)) {
     656:	4c06      	ldr	r4, [pc, #24]	; (670 <Chip_I2C_MasterStateHandler+0x1c>)
	return isMasterState(i2c.ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
     658:	1c05      	adds	r5, r0, #0
	if (!handleMasterXferState(i2c.ip, i2c.mXfer)) {
     65a:	6921      	ldr	r1, [r4, #16]
     65c:	6820      	ldr	r0, [r4, #0]
     65e:	f7ff fe4b 	bl	2f8 <handleMasterXferState>
     662:	2800      	cmp	r0, #0
     664:	d103      	bne.n	66e <Chip_I2C_MasterStateHandler+0x1a>
		i2c.mEvent(id, I2C_EVENT_DONE);
     666:	68a3      	ldr	r3, [r4, #8]
     668:	1c28      	adds	r0, r5, #0
     66a:	2102      	movs	r1, #2
     66c:	4798      	blx	r3
	}
}
     66e:	bd38      	pop	{r3, r4, r5, pc}
     670:	10000100 	.word	0x10000100

00000674 <Chip_I2C_SlaveStateHandler>:
	iic->flags |= 1 << (sid + 8);
}

/* I2C Slave event handler */
void Chip_I2C_SlaveStateHandler(I2C_ID_T id)
{
     674:	b570      	push	{r4, r5, r6, lr}
	int ret;
	struct i2c_interface *iic = &i2c;

	/* Get the currently addressed slave */
	if (!iic->sXfer) {
     676:	4c14      	ldr	r4, [pc, #80]	; (6c8 <Chip_I2C_SlaveStateHandler+0x54>)
	iic->flags |= 1 << (sid + 8);
}

/* I2C Slave event handler */
void Chip_I2C_SlaveStateHandler(I2C_ID_T id)
{
     678:	1c05      	adds	r5, r0, #0
	int ret;
	struct i2c_interface *iic = &i2c;

	/* Get the currently addressed slave */
	if (!iic->sXfer) {
     67a:	6963      	ldr	r3, [r4, #20]
     67c:	2b00      	cmp	r3, #0
     67e:	d10c      	bne.n	69a <Chip_I2C_SlaveStateHandler+0x26>
		struct i2c_slave_interface *si2c;

		I2C_SLAVE_ID sid = getSlaveIndex(iic->ip);
     680:	6820      	ldr	r0, [r4, #0]
     682:	f7ff fea3 	bl	3cc <getSlaveIndex>
		si2c = &i2c_slave[id][sid];
		iic->sXfer = si2c->xfer;
     686:	2305      	movs	r3, #5
     688:	436b      	muls	r3, r5
     68a:	4a10      	ldr	r2, [pc, #64]	; (6cc <Chip_I2C_SlaveStateHandler+0x58>)
     68c:	1818      	adds	r0, r3, r0
     68e:	00c0      	lsls	r0, r0, #3
     690:	5883      	ldr	r3, [r0, r2]
		iic->sEvent = si2c->event;
     692:	1810      	adds	r0, r2, r0
	if (!iic->sXfer) {
		struct i2c_slave_interface *si2c;

		I2C_SLAVE_ID sid = getSlaveIndex(iic->ip);
		si2c = &i2c_slave[id][sid];
		iic->sXfer = si2c->xfer;
     694:	6163      	str	r3, [r4, #20]
		iic->sEvent = si2c->event;
     696:	6843      	ldr	r3, [r0, #4]
     698:	60e3      	str	r3, [r4, #12]
	}

	iic->sXfer->slaveAddr |= iic->mXfer != 0;
     69a:	6922      	ldr	r2, [r4, #16]
     69c:	6966      	ldr	r6, [r4, #20]
     69e:	1e53      	subs	r3, r2, #1
     6a0:	419a      	sbcs	r2, r3
     6a2:	7833      	ldrb	r3, [r6, #0]
	ret = handleSlaveXferState(iic->ip, iic->sXfer);
     6a4:	6820      	ldr	r0, [r4, #0]
		si2c = &i2c_slave[id][sid];
		iic->sXfer = si2c->xfer;
		iic->sEvent = si2c->event;
	}

	iic->sXfer->slaveAddr |= iic->mXfer != 0;
     6a6:	4313      	orrs	r3, r2
     6a8:	7033      	strb	r3, [r6, #0]
	ret = handleSlaveXferState(iic->ip, iic->sXfer);
     6aa:	1c31      	adds	r1, r6, #0
     6ac:	f7ff fed4 	bl	458 <handleSlaveXferState>
	if (ret) {
     6b0:	2800      	cmp	r0, #0
     6b2:	d007      	beq.n	6c4 <Chip_I2C_SlaveStateHandler+0x50>
		if (iic->sXfer->status == I2C_STATUS_DONE) {
     6b4:	7d33      	ldrb	r3, [r6, #20]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d100      	bne.n	6bc <Chip_I2C_SlaveStateHandler+0x48>
			iic->sXfer = 0;
     6ba:	6163      	str	r3, [r4, #20]
		}
		iic->sEvent(id, (I2C_EVENT_T) ret);
     6bc:	b2c1      	uxtb	r1, r0
     6be:	68e3      	ldr	r3, [r4, #12]
     6c0:	1c28      	adds	r0, r5, #0
     6c2:	4798      	blx	r3
	}
}
     6c4:	bd70      	pop	{r4, r5, r6, pc}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	10000100 	.word	0x10000100
     6cc:	10000120 	.word	0x10000120

000006d0 <Chip_SYSCTL_PowerUp>:
/* Power up one or more blocks or peripherals */
void Chip_SYSCTL_PowerUp(uint32_t powerupmask)
{
	uint32_t pdrun;

	pdrun = LPC_SYSCTL->PDRUNCFG & PDRUNCFGMASKTMP;
     6d0:	218e      	movs	r1, #142	; 0x8e
     6d2:	22ff      	movs	r2, #255	; 0xff
	LPC_SYSCTL->PDRUNCFG = (pdrun | PDRUNCFGUSEMASK);
}

/* Power up one or more blocks or peripherals */
void Chip_SYSCTL_PowerUp(uint32_t powerupmask)
{
     6d4:	b510      	push	{r4, lr}
	uint32_t pdrun;

	pdrun = LPC_SYSCTL->PDRUNCFG & PDRUNCFGMASKTMP;
     6d6:	4c05      	ldr	r4, [pc, #20]	; (6ec <Chip_SYSCTL_PowerUp+0x1c>)
     6d8:	0089      	lsls	r1, r1, #2
     6da:	5863      	ldr	r3, [r4, r1]
     6dc:	4013      	ands	r3, r2
	pdrun &= ~(powerupmask & PDRUNCFGMASKTMP);
     6de:	4002      	ands	r2, r0
     6e0:	4393      	bics	r3, r2

	LPC_SYSCTL->PDRUNCFG = (pdrun | PDRUNCFGUSEMASK);
     6e2:	22ed      	movs	r2, #237	; 0xed
     6e4:	0212      	lsls	r2, r2, #8
     6e6:	4313      	orrs	r3, r2
     6e8:	5063      	str	r3, [r4, r1]
}
     6ea:	bd10      	pop	{r4, pc}
     6ec:	40048000 	.word	0x40048000

000006f0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
     6f0:	b510      	push	{r4, lr}
     6f2:	2480      	movs	r4, #128	; 0x80
     6f4:	4b07      	ldr	r3, [pc, #28]	; (714 <Chip_UART_Init+0x24>)
     6f6:	0164      	lsls	r4, r4, #5
     6f8:	1d19      	adds	r1, r3, #4
     6fa:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
     6fc:	3398      	adds	r3, #152	; 0x98
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
     6fe:	4322      	orrs	r2, r4
     700:	67ca      	str	r2, [r1, #124]	; 0x7c
 * @note	Use 0 to disable, or a divider value of 1 to 255. The UART clock
 * rate is the main system clock divided by this value.
 */
STATIC INLINE void Chip_Clock_SetUARTClockDiv(uint32_t div)
{
	LPC_SYSCTL->USARTCLKDIV  = div;
     702:	2201      	movs	r2, #1
     704:	601a      	str	r2, [r3, #0]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
     706:	2307      	movs	r3, #7
     708:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
     70a:	3b04      	subs	r3, #4
     70c:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
     70e:	330d      	adds	r3, #13
     710:	6283      	str	r3, [r0, #40]	; 0x28
}
     712:	bd10      	pop	{r4, pc}
     714:	40048000 	.word	0x40048000

00000718 <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
	int sent = 0;
     718:	2300      	movs	r3, #0
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_UART0);
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
     71a:	b510      	push	{r4, lr}
	int sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((sent < numBytes) &&
     71c:	4293      	cmp	r3, r2
     71e:	da06      	bge.n	72e <Chip_UART_Send+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
     720:	6944      	ldr	r4, [r0, #20]
     722:	06a4      	lsls	r4, r4, #26
     724:	d503      	bpl.n	72e <Chip_UART_Send+0x16>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
     726:	5ccc      	ldrb	r4, [r1, r3]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
		Chip_UART_SendByte(pUART, *p8);
		p8++;
		sent++;
     728:	3301      	adds	r3, #1
     72a:	6004      	str	r4, [r0, #0]
     72c:	e7f6      	b.n	71c <Chip_UART_Send+0x4>
	}

	return sent;
}
     72e:	1c18      	adds	r0, r3, #0
     730:	bd10      	pop	{r4, pc}

00000732 <Chip_UART_SendBlocking>:

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
     732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     734:	1c07      	adds	r7, r0, #0
     736:	1c0e      	adds	r6, r1, #0
     738:	1c14      	adds	r4, r2, #0
	int pass, sent = 0;
     73a:	2500      	movs	r5, #0
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
     73c:	2c00      	cmp	r4, #0
     73e:	dd08      	ble.n	752 <Chip_UART_SendBlocking+0x20>
		pass = Chip_UART_Send(pUART, p8, numBytes);
     740:	1c31      	adds	r1, r6, #0
     742:	1c22      	adds	r2, r4, #0
     744:	1c38      	adds	r0, r7, #0
     746:	f7ff ffe7 	bl	718 <Chip_UART_Send>
		numBytes -= pass;
     74a:	1a24      	subs	r4, r4, r0
		sent += pass;
     74c:	182d      	adds	r5, r5, r0
		p8 += pass;
     74e:	1836      	adds	r6, r6, r0
     750:	e7f4      	b.n	73c <Chip_UART_SendBlocking+0xa>
	}

	return sent;
}
     752:	1c28      	adds	r0, r5, #0
     754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000756 <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
	int readBytes = 0;
     756:	2300      	movs	r3, #0
	return sent;
}

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
     758:	b510      	push	{r4, lr}
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
     75a:	4293      	cmp	r3, r2
     75c:	da06      	bge.n	76c <Chip_UART_Read+0x16>
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
     75e:	6944      	ldr	r4, [r0, #20]
     760:	07e4      	lsls	r4, r4, #31
     762:	d503      	bpl.n	76c <Chip_UART_Read+0x16>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
     764:	6804      	ldr	r4, [r0, #0]
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
		*p8 = Chip_UART_ReadByte(pUART);
     766:	54cc      	strb	r4, [r1, r3]
		p8++;
		readBytes++;
     768:	3301      	adds	r3, #1
     76a:	e7f6      	b.n	75a <Chip_UART_Read+0x4>
	}

	return readBytes;
}
     76c:	1c18      	adds	r0, r3, #0
     76e:	bd10      	pop	{r4, pc}

00000770 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
     770:	b570      	push	{r4, r5, r6, lr}
     772:	1c0e      	adds	r6, r1, #0
     774:	1c04      	adds	r4, r0, #0
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
     776:	f7ff fd75 	bl	264 <Chip_Clock_GetMainClockRate>
	div = clkin / (baudrate * 16);
     77a:	0131      	lsls	r1, r6, #4
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
     77c:	1c05      	adds	r5, r0, #0
	div = clkin / (baudrate * 16);
     77e:	f000 fb29 	bl	dd4 <__aeabi_uidiv>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
     782:	2280      	movs	r2, #128	; 0x80
     784:	1c01      	adds	r1, r0, #0
     786:	68e3      	ldr	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
     788:	1c0e      	adds	r6, r1, #0
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
     78a:	4313      	orrs	r3, r2
     78c:	60e3      	str	r3, [r4, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
     78e:	23ff      	movs	r3, #255	; 0xff

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
     790:	0a00      	lsrs	r0, r0, #8
     792:	401e      	ands	r6, r3
	pUART->DLM = (uint32_t) dlm;
     794:	4003      	ands	r3, r0
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
     796:	6026      	str	r6, [r4, #0]
	pUART->DLM = (uint32_t) dlm;
     798:	6063      	str	r3, [r4, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
     79a:	68e3      	ldr	r3, [r4, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return clkin / div;
     79c:	1c28      	adds	r0, r5, #0
     79e:	4393      	bics	r3, r2
     7a0:	60e3      	str	r3, [r4, #12]
     7a2:	f000 fb17 	bl	dd4 <__aeabi_uidiv>
}
     7a6:	bd70      	pop	{r4, r5, r6, pc}

000007a8 <__reverse>:
#include "util.h"

void __reverse(char* begin,char* end) {
	char temp;

	while (end  >begin)
     7a8:	4281      	cmp	r1, r0
     7aa:	d906      	bls.n	7ba <__reverse+0x12>
	{
		temp = *end;
     7ac:	780b      	ldrb	r3, [r1, #0]
		*end-- = *begin;
     7ae:	7802      	ldrb	r2, [r0, #0]
     7b0:	3901      	subs	r1, #1
     7b2:	704a      	strb	r2, [r1, #1]
		*begin++ = temp;
     7b4:	7003      	strb	r3, [r0, #0]
     7b6:	3001      	adds	r0, #1
     7b8:	e7f6      	b.n	7a8 <__reverse>
	}
}
     7ba:	4770      	bx	lr

000007bc <itoa>:

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
     7bc:	1c13      	adds	r3, r2, #0
		*end-- = *begin;
		*begin++ = temp;
	}
}

char* itoa(int value, char* buffer, int base) {
     7be:	b5f0      	push	{r4, r5, r6, r7, lr}

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
     7c0:	3b02      	subs	r3, #2
		*end-- = *begin;
		*begin++ = temp;
	}
}

char* itoa(int value, char* buffer, int base) {
     7c2:	b085      	sub	sp, #20
     7c4:	1c04      	adds	r4, r0, #0
     7c6:	1c0f      	adds	r7, r1, #0
     7c8:	9201      	str	r2, [sp, #4]
     7ca:	1c0d      	adds	r5, r1, #0

	char* buffer_copy = buffer;
	int32_t sign = 0;
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
     7cc:	2b0e      	cmp	r3, #14
     7ce:	d824      	bhi.n	81a <itoa+0x5e>

char* itoa(int value, char* buffer, int base) {
	static const char digits[] = "0123456789abcdef";

	char* buffer_copy = buffer;
	int32_t sign = 0;
     7d0:	2300      	movs	r3, #0
     7d2:	9302      	str	r3, [sp, #8]
	int32_t quot, rem;

	if ((base >= 2) && (base <= 16))				// is the base valid?
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
     7d4:	2a0a      	cmp	r2, #10
     7d6:	d103      	bne.n	7e0 <itoa+0x24>
     7d8:	17c3      	asrs	r3, r0, #31
     7da:	18c4      	adds	r4, r0, r3
     7dc:	9002      	str	r0, [sp, #8]
     7de:	405c      	eors	r4, r3
     7e0:	1c3e      	adds	r6, r7, #0
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
     7e2:	1c20      	adds	r0, r4, #0
     7e4:	9901      	ldr	r1, [sp, #4]
     7e6:	f000 fb85 	bl	ef4 <__aeabi_idiv>
			rem = value % base;
     7ea:	9901      	ldr	r1, [sp, #4]
	if ((base >= 2) && (base <= 16))				// is the base valid?
	{
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
     7ec:	9003      	str	r0, [sp, #12]
			rem = value % base;
     7ee:	1c20      	adds	r0, r4, #0
     7f0:	f000 fc66 	bl	10c0 <__aeabi_idivmod>
			*buffer++ = digits[rem];		// append the remainder to the string
     7f4:	4b0b      	ldr	r3, [pc, #44]	; (824 <itoa+0x68>)
     7f6:	9c03      	ldr	r4, [sp, #12]
     7f8:	5c5b      	ldrb	r3, [r3, r1]
     7fa:	1c75      	adds	r5, r6, #1
     7fc:	7033      	strb	r3, [r6, #0]
		} while ((value = quot));				// loop while there is something to convert
     7fe:	2c00      	cmp	r4, #0
     800:	d001      	beq.n	806 <itoa+0x4a>
		if (base == 10 && (sign = value) < 0)// negative value and base == 10? store the copy (sign)
			value = -value;					// make it positive
		do {
			quot = value / base;				// calculate quotient and remainder
			rem = value % base;
			*buffer++ = digits[rem];		// append the remainder to the string
     802:	1c2e      	adds	r6, r5, #0
     804:	e7ed      	b.n	7e2 <itoa+0x26>
		} while ((value = quot));				// loop while there is something to convert

		if (sign<0)							// was the value negative?
     806:	9b02      	ldr	r3, [sp, #8]
     808:	2b00      	cmp	r3, #0
     80a:	da02      	bge.n	812 <itoa+0x56>
			*buffer++ = '-';					// append the sign
     80c:	232d      	movs	r3, #45	; 0x2d
     80e:	1cb5      	adds	r5, r6, #2
     810:	7073      	strb	r3, [r6, #1]

		__reverse(buffer_copy, buffer-1);		// reverse the string
     812:	1e69      	subs	r1, r5, #1
     814:	1c38      	adds	r0, r7, #0
     816:	f7ff ffc7 	bl	7a8 <__reverse>
	}

	*buffer='\0';
     81a:	2300      	movs	r3, #0
	return buffer_copy;
     81c:	1c38      	adds	r0, r7, #0
			*buffer++ = '-';					// append the sign

		__reverse(buffer_copy, buffer-1);		// reverse the string
	}

	*buffer='\0';
     81e:	702b      	strb	r3, [r5, #0]
	return buffer_copy;
     820:	b005      	add	sp, #20
     822:	bdf0      	pop	{r4, r5, r6, r7, pc}
     824:	00001e1c 	.word	0x00001e1c

00000828 <SysTick_Handler>:

/**
 * SysTick Timer Interrupt Handler. Counts milliseconds since start
 */
void SysTick_Handler(void) {
	msTicks++;
     828:	4a02      	ldr	r2, [pc, #8]	; (834 <SysTick_Handler+0xc>)
     82a:	6813      	ldr	r3, [r2, #0]
     82c:	3301      	adds	r3, #1
     82e:	6013      	str	r3, [r2, #0]
}
     830:	4770      	bx	lr
     832:	46c0      	nop			; (mov r8, r8)
     834:	1000019c 	.word	0x1000019c

00000838 <CAN_IRQHandler>:

/**
 * CCAN Interrupt Handler. Calls the isr() API located in the CCAN ROM
 */
void CAN_IRQHandler(void) {
     838:	b508      	push	{r3, lr}
	LPC_CCAN_API->isr();
     83a:	4b03      	ldr	r3, [pc, #12]	; (848 <CAN_IRQHandler+0x10>)
     83c:	681b      	ldr	r3, [r3, #0]
     83e:	689b      	ldr	r3, [r3, #8]
     840:	685b      	ldr	r3, [r3, #4]
     842:	4798      	blx	r3
}
     844:	bd08      	pop	{r3, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	1fff1ff8 	.word	0x1fff1ff8

0000084c <Board_SysTick_Init>:
// -------------------------------------------------------------
// Public Functions and Members

const uint32_t OscRateIn = 0;

int8_t Board_SysTick_Init(void) {
     84c:	b510      	push	{r4, lr}
	msTicks = 0;
     84e:	2400      	movs	r4, #0
     850:	4b0c      	ldr	r3, [pc, #48]	; (884 <Board_SysTick_Init+0x38>)
     852:	601c      	str	r4, [r3, #0]

	// Update the value of SystemCoreClock to the clock speed in hz
	SystemCoreClockUpdate();
     854:	f7ff fcca 	bl	1ec <SystemCoreClockUpdate>

	// Initialize SysTick Timer to fire interrupt at 1kHz
	return (SysTick_Config (SystemCoreClock / 1000));
     858:	21fa      	movs	r1, #250	; 0xfa
     85a:	4b0b      	ldr	r3, [pc, #44]	; (888 <Board_SysTick_Init+0x3c>)
     85c:	0089      	lsls	r1, r1, #2
     85e:	6818      	ldr	r0, [r3, #0]
     860:	f000 fab8 	bl	dd4 <__aeabi_uidiv>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
     864:	4a09      	ldr	r2, [pc, #36]	; (88c <Board_SysTick_Init+0x40>)
     866:	3801      	subs	r0, #1
     868:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     86a:	20c0      	movs	r0, #192	; 0xc0
     86c:	4908      	ldr	r1, [pc, #32]	; (890 <Board_SysTick_Init+0x44>)
     86e:	0600      	lsls	r0, r0, #24
     870:	6a0b      	ldr	r3, [r1, #32]
     872:	021b      	lsls	r3, r3, #8
     874:	0a1b      	lsrs	r3, r3, #8
     876:	4303      	orrs	r3, r0
     878:	620b      	str	r3, [r1, #32]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     87a:	2307      	movs	r3, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     87c:	6094      	str	r4, [r2, #8]
}
     87e:	1c20      	adds	r0, r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     880:	6013      	str	r3, [r2, #0]
     882:	bd10      	pop	{r4, pc}
     884:	1000019c 	.word	0x1000019c
     888:	1000011c 	.word	0x1000011c
     88c:	e000e010 	.word	0xe000e010
     890:	e000ed00 	.word	0xe000ed00

00000894 <Board_LEDs_Init>:

void Board_LEDs_Init(void) {
     894:	b510      	push	{r4, lr}
	Chip_GPIO_Init(LPC_GPIO);
     896:	24a0      	movs	r4, #160	; 0xa0
     898:	05e4      	lsls	r4, r4, #23
     89a:	1c20      	adds	r0, r4, #0
     89c:	f7ff fd06 	bl	2ac <Chip_GPIO_Init>
	Chip_GPIO_WriteDirBit(LPC_GPIO, LED0, true);
     8a0:	1c20      	adds	r0, r4, #0
     8a2:	2102      	movs	r1, #2
     8a4:	2205      	movs	r2, #5
     8a6:	2301      	movs	r3, #1
     8a8:	f7ff fd08 	bl	2bc <Chip_GPIO_WriteDirBit>
}
     8ac:	bd10      	pop	{r4, pc}
	...

000008b0 <Board_UART_Init>:

void Board_UART_Init(uint32_t baudrate) {
     8b0:	b538      	push	{r3, r4, r5, lr}
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
     8b2:	4b0b      	ldr	r3, [pc, #44]	; (8e0 <Board_UART_Init+0x30>)
     8b4:	2201      	movs	r2, #1
     8b6:	1c19      	adds	r1, r3, #0
     8b8:	1c05      	adds	r5, r0, #0
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_RX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Rx pin
	Chip_IOCON_PinMuxSet(LPC_IOCON, UART_TX_IOCON, (IOCON_FUNC1 | IOCON_MODE_INACT));	// Tx Pin

	Chip_UART_Init(LPC_USART);
     8ba:	4c0a      	ldr	r4, [pc, #40]	; (8e4 <Board_UART_Init+0x34>)
     8bc:	33a8      	adds	r3, #168	; 0xa8
     8be:	31a4      	adds	r1, #164	; 0xa4
     8c0:	600a      	str	r2, [r1, #0]
     8c2:	1c20      	adds	r0, r4, #0
     8c4:	601a      	str	r2, [r3, #0]
     8c6:	f7ff ff13 	bl	6f0 <Chip_UART_Init>
	Chip_UART_SetBaud(LPC_USART, baudrate);
     8ca:	1c29      	adds	r1, r5, #0
     8cc:	1c20      	adds	r0, r4, #0
     8ce:	f7ff ff4f 	bl	770 <Chip_UART_SetBaud>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
     8d2:	2303      	movs	r3, #3
     8d4:	60e3      	str	r3, [r4, #12]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
     8d6:	337e      	adds	r3, #126	; 0x7e
     8d8:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
	pUART->TER1 = UART_TER1_TXEN;
     8da:	3b01      	subs	r3, #1
     8dc:	6323      	str	r3, [r4, #48]	; 0x30
	Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
	Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
	Chip_UART_TXEnable(LPC_USART);
}
     8de:	bd38      	pop	{r3, r4, r5, pc}
     8e0:	40044000 	.word	0x40044000
     8e4:	40008000 	.word	0x40008000

000008e8 <Board_UART_Print>:

void Board_UART_Print(const char *str) {
     8e8:	b510      	push	{r4, lr}
     8ea:	1c04      	adds	r4, r0, #0
	Chip_UART_SendBlocking(LPC_USART, str, strlen(str));
     8ec:	f001 fa42 	bl	1d74 <strlen>
     8f0:	1c21      	adds	r1, r4, #0
     8f2:	1c02      	adds	r2, r0, #0
     8f4:	4801      	ldr	r0, [pc, #4]	; (8fc <Board_UART_Print+0x14>)
     8f6:	f7ff ff1c 	bl	732 <Chip_UART_SendBlocking>
}
     8fa:	bd10      	pop	{r4, pc}
     8fc:	40008000 	.word	0x40008000

00000900 <Board_UART_Println>:

void Board_UART_Println(const char *str) {
     900:	b508      	push	{r3, lr}
	Board_UART_Print(str);
     902:	f7ff fff1 	bl	8e8 <Board_UART_Print>
	Board_UART_Print("\r\n");
     906:	4802      	ldr	r0, [pc, #8]	; (910 <Board_UART_Println+0x10>)
     908:	f7ff ffee 	bl	8e8 <Board_UART_Print>
}
     90c:	bd08      	pop	{r3, pc}
     90e:	46c0      	nop			; (mov r8, r8)
     910:	00001e34 	.word	0x00001e34

00000914 <Board_UART_PrintNum>:

void Board_UART_PrintNum(const int num, uint8_t base, bool crlf) {
     914:	b538      	push	{r3, r4, r5, lr}
     916:	1c0b      	adds	r3, r1, #0
	static char str[32];
	itoa(num, str, base);
     918:	4c07      	ldr	r4, [pc, #28]	; (938 <Board_UART_PrintNum+0x24>)
void Board_UART_Println(const char *str) {
	Board_UART_Print(str);
	Board_UART_Print("\r\n");
}

void Board_UART_PrintNum(const int num, uint8_t base, bool crlf) {
     91a:	1c15      	adds	r5, r2, #0
	static char str[32];
	itoa(num, str, base);
     91c:	1c21      	adds	r1, r4, #0
     91e:	1c1a      	adds	r2, r3, #0
     920:	f7ff ff4c 	bl	7bc <itoa>
	Board_UART_Print(str);
     924:	1c20      	adds	r0, r4, #0
     926:	f7ff ffdf 	bl	8e8 <Board_UART_Print>
	if (crlf) Board_UART_Print("\r\n");
     92a:	2d00      	cmp	r5, #0
     92c:	d002      	beq.n	934 <Board_UART_PrintNum+0x20>
     92e:	4803      	ldr	r0, [pc, #12]	; (93c <Board_UART_PrintNum+0x28>)
     930:	f7ff ffda 	bl	8e8 <Board_UART_Print>
}
     934:	bd38      	pop	{r3, r4, r5, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	10000150 	.word	0x10000150
     93c:	00001e34 	.word	0x00001e34

00000940 <Board_UART_SendBlocking>:

void Board_UART_SendBlocking(const void *data, uint8_t num_bytes) {
     940:	b508      	push	{r3, lr}
     942:	1c03      	adds	r3, r0, #0
     944:	1c0a      	adds	r2, r1, #0
	Chip_UART_SendBlocking(LPC_USART, data, num_bytes);
     946:	4802      	ldr	r0, [pc, #8]	; (950 <Board_UART_SendBlocking+0x10>)
     948:	1c19      	adds	r1, r3, #0
     94a:	f7ff fef2 	bl	732 <Chip_UART_SendBlocking>
}
     94e:	bd08      	pop	{r3, pc}
     950:	40008000 	.word	0x40008000

00000954 <Board_UART_Read>:

int8_t Board_UART_Read(void *data, uint8_t num_bytes) {
     954:	b508      	push	{r3, lr}
     956:	1c03      	adds	r3, r0, #0
     958:	1c0a      	adds	r2, r1, #0
	return Chip_UART_Read(LPC_USART, data, num_bytes);
     95a:	4803      	ldr	r0, [pc, #12]	; (968 <Board_UART_Read+0x14>)
     95c:	1c19      	adds	r1, r3, #0
     95e:	f7ff fefa 	bl	756 <Chip_UART_Read>
     962:	b240      	sxtb	r0, r0
}
     964:	bd08      	pop	{r3, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	40008000 	.word	0x40008000

0000096c <Board_I2C_Init>:
 * @note	The peripheral will stay in reset until reset is de-asserted. Call
 * Chip_SYSCTL_DeassertPeriphReset() to de-assert the reset.
 */
STATIC INLINE void Chip_SYSCTL_AssertPeriphReset(CHIP_SYSCTL_PERIPH_RESET_T periph)
{
	LPC_SYSCTL->PRESETCTRL &= ~(1 << (uint32_t) periph);
     96c:	2102      	movs	r1, #2
     96e:	2001      	movs	r0, #1

	/* Enable the CAN Interrupt */
	NVIC_EnableIRQ(CAN_IRQn);
}

void Board_I2C_Init(void){
     970:	b508      	push	{r3, lr}
     972:	4b0e      	ldr	r3, [pc, #56]	; (9ac <Board_I2C_Init+0x40>)
     974:	685a      	ldr	r2, [r3, #4]
     976:	438a      	bics	r2, r1
     978:	605a      	str	r2, [r3, #4]
 * @param	periph	: Peripheral to de-assert reset for
 * @return	Nothing
 */
STATIC INLINE void Chip_SYSCTL_DeassertPeriphReset(CHIP_SYSCTL_PERIPH_RESET_T periph)
{
	LPC_SYSCTL->PRESETCTRL |= (1 << (uint32_t) periph);
     97a:	685a      	ldr	r2, [r3, #4]
     97c:	430a      	orrs	r2, r1
     97e:	605a      	str	r2, [r3, #4]
     980:	4a0b      	ldr	r2, [pc, #44]	; (9b0 <Board_I2C_Init+0x44>)
     982:	6310      	str	r0, [r2, #48]	; 0x30
     984:	6350      	str	r0, [r2, #52]	; 0x34
     986:	685a      	ldr	r2, [r3, #4]
	Chip_SYSCTL_PeriphReset(RESET_I2C0); // Reset the I2C Peripheral
	Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO0_4, IOCON_FUNC1); // SCL
	Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO0_5, IOCON_FUNC1); // SDA

	Chip_SYSCTL_DeassertPeriphReset(RESET_I2C0);
	Chip_I2C_Init(I2C0);
     988:	2000      	movs	r0, #0
     98a:	430a      	orrs	r2, r1
     98c:	605a      	str	r2, [r3, #4]
     98e:	f7ff fdc3 	bl	518 <Chip_I2C_Init>
	Chip_I2C_SetClockRate(I2C0, 100000);
     992:	2000      	movs	r0, #0
     994:	4907      	ldr	r1, [pc, #28]	; (9b4 <Board_I2C_Init+0x48>)
     996:	f7ff fddb 	bl	550 <Chip_I2C_SetClockRate>

	Chip_I2C_SetMasterEventHandler(I2C0, Chip_I2C_EventHandler);
     99a:	2000      	movs	r0, #0
     99c:	4906      	ldr	r1, [pc, #24]	; (9b8 <Board_I2C_Init+0x4c>)
     99e:	f7ff fde9 	bl	574 <Chip_I2C_SetMasterEventHandler>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     9a2:	2280      	movs	r2, #128	; 0x80
     9a4:	4b05      	ldr	r3, [pc, #20]	; (9bc <Board_I2C_Init+0x50>)
     9a6:	0212      	lsls	r2, r2, #8
     9a8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(I2C0_IRQn);

}
     9aa:	bd08      	pop	{r3, pc}
     9ac:	40048000 	.word	0x40048000
     9b0:	40044000 	.word	0x40044000
     9b4:	000186a0 	.word	0x000186a0
     9b8:	000002e5 	.word	0x000002e5
     9bc:	e000e100 	.word	0xe000e100

000009c0 <Board_ADC_Init>:

void Board_ADC_Init(void){
     9c0:	b538      	push	{r3, r4, r5, lr}
     9c2:	2401      	movs	r4, #1
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <Board_ADC_Init+0x20>)

	Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_4, FUNC1);
//	Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_3, FUNC2);

	Chip_ADC_Init(LPC_ADC, &adc_setup);
     9c6:	4d07      	ldr	r5, [pc, #28]	; (9e4 <Board_ADC_Init+0x24>)
     9c8:	601c      	str	r4, [r3, #0]
     9ca:	1c28      	adds	r0, r5, #0
     9cc:	4906      	ldr	r1, [pc, #24]	; (9e8 <Board_ADC_Init+0x28>)
     9ce:	f7ff fb8f 	bl	f0 <Chip_ADC_Init>
//	Chip_ADC_EnableChannel(LPC_ADC, ADC_CH4, ENABLE);
	Chip_ADC_EnableChannel(LPC_ADC, ADC_CH5, ENABLE);	
     9d2:	1c28      	adds	r0, r5, #0
     9d4:	2105      	movs	r1, #5
     9d6:	1c22      	adds	r2, r4, #0
     9d8:	f7ff fbf4 	bl	1c4 <Chip_ADC_EnableChannel>
}
     9dc:	bd38      	pop	{r3, r4, r5, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	40044094 	.word	0x40044094
     9e4:	4001c000 	.word	0x4001c000
     9e8:	10000148 	.word	0x10000148

000009ec <BQ7695_set_cell>:
#include <board.h>

uint8_t rx_buf[10];
uint8_t tx;

uint8_t BQ7695_set_cell(uint8_t cell){
     9ec:	b510      	push	{r4, lr}
     9ee:	4a0b      	ldr	r2, [pc, #44]	; (a1c <BQ7695_set_cell+0x30>)
	if(cell == 7){	// Output the VREF
     9f0:	2807      	cmp	r0, #7
     9f2:	d102      	bne.n	9fa <BQ7695_set_cell+0xe>
		tx = (3<<4);
     9f4:	2330      	movs	r3, #48	; 0x30
     9f6:	7013      	strb	r3, [r2, #0]
     9f8:	e002      	b.n	a00 <BQ7695_set_cell+0x14>
	}
	else{
		tx = ((1<<4)|cell);
     9fa:	2310      	movs	r3, #16
     9fc:	4318      	orrs	r0, r3
     9fe:	7010      	strb	r0, [r2, #0]
	}
	BQ7695_Write(I2C_ADDRESS_CELL_CTL,&tx);
     a00:	2121      	movs	r1, #33	; 0x21
     a02:	2301      	movs	r3, #1
     a04:	2000      	movs	r0, #0
     a06:	f7ff fdef 	bl	5e8 <Chip_I2C_MasterSend>
	BQ7695_Read(I2C_ADDRESS_CELL_CTL,rx_buf);
     a0a:	4c05      	ldr	r4, [pc, #20]	; (a20 <BQ7695_set_cell+0x34>)
     a0c:	2121      	movs	r1, #33	; 0x21
     a0e:	1c22      	adds	r2, r4, #0
     a10:	2301      	movs	r3, #1
     a12:	2000      	movs	r0, #0
     a14:	f7ff fdfc 	bl	610 <Chip_I2C_MasterRead>
	return rx_buf[0];
     a18:	7820      	ldrb	r0, [r4, #0]
}
     a1a:	bd10      	pop	{r4, pc}
     a1c:	100001a0 	.word	0x100001a0
     a20:	100001a1 	.word	0x100001a1

00000a24 <BQ7695_disable_unecessary>:

uint8_t BQ7695_disable_unecessary(){
     a24:	b513      	push	{r0, r1, r4, lr}
	uint8_t power = 0x45; // Everything disabled
     a26:	466b      	mov	r3, sp
     a28:	1dda      	adds	r2, r3, #7
     a2a:	2345      	movs	r3, #69	; 0x45
	BQ7695_Write(I2C_ADDRESS_POWER_CTL, &power);
     a2c:	2125      	movs	r1, #37	; 0x25
	BQ7695_Read(I2C_ADDRESS_CELL_CTL,rx_buf);
	return rx_buf[0];
}

uint8_t BQ7695_disable_unecessary(){
	uint8_t power = 0x45; // Everything disabled
     a2e:	7013      	strb	r3, [r2, #0]
	BQ7695_Write(I2C_ADDRESS_POWER_CTL, &power);
     a30:	2000      	movs	r0, #0
     a32:	3b44      	subs	r3, #68	; 0x44
     a34:	f7ff fdd8 	bl	5e8 <Chip_I2C_MasterSend>
	BQ7695_Read(I2C_ADDRESS_POWER_CTL, rx_buf);
     a38:	4c04      	ldr	r4, [pc, #16]	; (a4c <BQ7695_disable_unecessary+0x28>)
     a3a:	2125      	movs	r1, #37	; 0x25
     a3c:	1c22      	adds	r2, r4, #0
     a3e:	2301      	movs	r3, #1
     a40:	2000      	movs	r0, #0
     a42:	f7ff fde5 	bl	610 <Chip_I2C_MasterRead>
	return rx_buf[0];
     a46:	7820      	ldrb	r0, [r4, #0]
}
     a48:	bd16      	pop	{r1, r2, r4, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	100001a1 	.word	0x100001a1

00000a50 <BQ7695_read_offset_corr>:


int8_t BQ7695_read_offset_corr(uint8_t vc){
	uint8_t offset = 0;
	int8_t sOffset = 0;
	BQ7695_Read(I2C_ADDRESS_VREF_CAL + vc,rx_buf); // lower bits
     a50:	1c01      	adds	r1, r0, #0
	BQ7695_Read(I2C_ADDRESS_POWER_CTL, rx_buf);
	return rx_buf[0];
}


int8_t BQ7695_read_offset_corr(uint8_t vc){
     a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t offset = 0;
	int8_t sOffset = 0;
	BQ7695_Read(I2C_ADDRESS_VREF_CAL + vc,rx_buf); // lower bits
     a54:	2520      	movs	r5, #32
     a56:	4e29      	ldr	r6, [pc, #164]	; (afc <BQ7695_read_offset_corr+0xac>)
     a58:	3110      	adds	r1, #16
     a5a:	4329      	orrs	r1, r5
	BQ7695_Read(I2C_ADDRESS_POWER_CTL, rx_buf);
	return rx_buf[0];
}


int8_t BQ7695_read_offset_corr(uint8_t vc){
     a5c:	1c07      	adds	r7, r0, #0
	uint8_t offset = 0;
	int8_t sOffset = 0;
	BQ7695_Read(I2C_ADDRESS_VREF_CAL + vc,rx_buf); // lower bits
     a5e:	b2c9      	uxtb	r1, r1
     a60:	2000      	movs	r0, #0
     a62:	1c32      	adds	r2, r6, #0
     a64:	2301      	movs	r3, #1
     a66:	f7ff fdd3 	bl	610 <Chip_I2C_MasterRead>
	offset = rx_buf[0];
     a6a:	7834      	ldrb	r4, [r6, #0]
	if(vc == 0){
     a6c:	2f00      	cmp	r7, #0
     a6e:	d110      	bne.n	a92 <BQ7695_read_offset_corr+0x42>
		BQ7695_Read(I2C_ADDRESS_VREF_CAL_EXT, rx_buf);
     a70:	2301      	movs	r3, #1
     a72:	1c38      	adds	r0, r7, #0
     a74:	213b      	movs	r1, #59	; 0x3b
     a76:	1c32      	adds	r2, r6, #0
     a78:	f7ff fdca 	bl	610 <Chip_I2C_MasterRead>
		offset |= (rx_buf[0] & I2C_MASK_VREF_CAL_EXT_VREF_OC_4)<< 3;
     a7c:	2302      	movs	r3, #2
     a7e:	7830      	ldrb	r0, [r6, #0]
     a80:	4018      	ands	r0, r3
     a82:	00c0      	lsls	r0, r0, #3
     a84:	4320      	orrs	r0, r4
     a86:	b2c3      	uxtb	r3, r0
			offset |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC6_OC_4) << 3;
		}

	}
	if(vc == 0){
		if(offset & 0x20){	// Convert the 6 bit two's complement
     a88:	422b      	tst	r3, r5
     a8a:	d035      	beq.n	af8 <BQ7695_read_offset_corr+0xa8>
			sOffset = -1*(0x20-(offset & 0x1F));
     a8c:	20e0      	movs	r0, #224	; 0xe0
     a8e:	4318      	orrs	r0, r3
     a90:	e032      	b.n	af8 <BQ7695_read_offset_corr+0xa8>
	if(vc == 0){
		BQ7695_Read(I2C_ADDRESS_VREF_CAL_EXT, rx_buf);
		offset |= (rx_buf[0] & I2C_MASK_VREF_CAL_EXT_VREF_OC_4)<< 3;
	}
	else if(vc < 3){
		BQ7695_Read(I2C_ADDRESS_VC_CAL_EXT_1,rx_buf);
     a92:	2000      	movs	r0, #0
	offset = rx_buf[0];
	if(vc == 0){
		BQ7695_Read(I2C_ADDRESS_VREF_CAL_EXT, rx_buf);
		offset |= (rx_buf[0] & I2C_MASK_VREF_CAL_EXT_VREF_OC_4)<< 3;
	}
	else if(vc < 3){
     a94:	2f02      	cmp	r7, #2
     a96:	d808      	bhi.n	aaa <BQ7695_read_offset_corr+0x5a>
		BQ7695_Read(I2C_ADDRESS_VC_CAL_EXT_1,rx_buf);
     a98:	2301      	movs	r3, #1
     a9a:	2137      	movs	r1, #55	; 0x37
     a9c:	1c32      	adds	r2, r6, #0
     a9e:	f7ff fdb7 	bl	610 <Chip_I2C_MasterRead>
     aa2:	7833      	ldrb	r3, [r6, #0]
		if(vc == 1){
     aa4:	2f01      	cmp	r7, #1
     aa6:	d10f      	bne.n	ac8 <BQ7695_read_offset_corr+0x78>
     aa8:	e007      	b.n	aba <BQ7695_read_offset_corr+0x6a>
		else if(vc == 2){
			offset |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_1_VC2_OC_4) >> 1;
		}
	}
	else{
		BQ7695_Read(I2C_ADDRESS_VREF_CAL_EXT, rx_buf);
     aaa:	213b      	movs	r1, #59	; 0x3b
     aac:	1c32      	adds	r2, r6, #0
     aae:	2301      	movs	r3, #1
     ab0:	f7ff fdae 	bl	610 <Chip_I2C_MasterRead>
		if(vc == 3){
     ab4:	2f03      	cmp	r7, #3
     ab6:	d104      	bne.n	ac2 <BQ7695_read_offset_corr+0x72>
			offset |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC3_OC_4) >> 3;
     ab8:	7833      	ldrb	r3, [r6, #0]
     aba:	227f      	movs	r2, #127	; 0x7f
     abc:	4393      	bics	r3, r2
     abe:	10db      	asrs	r3, r3, #3
     ac0:	e00c      	b.n	adc <BQ7695_read_offset_corr+0x8c>
		}
		else if(vc==4){
     ac2:	2f04      	cmp	r7, #4
     ac4:	d104      	bne.n	ad0 <BQ7695_read_offset_corr+0x80>
			offset |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC4_OC_4) >> 1;
     ac6:	7833      	ldrb	r3, [r6, #0]
     ac8:	401d      	ands	r5, r3
     aca:	106d      	asrs	r5, r5, #1
     acc:	432c      	orrs	r4, r5
     ace:	e00e      	b.n	aee <BQ7695_read_offset_corr+0x9e>
		}
		else if(vc==5){
     ad0:	2f05      	cmp	r7, #5
     ad2:	d105      	bne.n	ae0 <BQ7695_read_offset_corr+0x90>
			offset |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC5_OC_4) << 1;
     ad4:	2308      	movs	r3, #8
     ad6:	7832      	ldrb	r2, [r6, #0]
     ad8:	4013      	ands	r3, r2
     ada:	005b      	lsls	r3, r3, #1
     adc:	431c      	orrs	r4, r3
     ade:	e006      	b.n	aee <BQ7695_read_offset_corr+0x9e>
		}
		else if(vc==6){
     ae0:	2f06      	cmp	r7, #6
     ae2:	d104      	bne.n	aee <BQ7695_read_offset_corr+0x9e>
			offset |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC6_OC_4) << 3;
     ae4:	2302      	movs	r3, #2
     ae6:	7832      	ldrb	r2, [r6, #0]
     ae8:	4013      	ands	r3, r2
     aea:	00db      	lsls	r3, r3, #3
     aec:	e7f6      	b.n	adc <BQ7695_read_offset_corr+0x8c>
	else{
		if(offset & 0x10){	// Convert the 5 bit two's complement
			sOffset = -1*(0x10-(offset & 0x0F));
		}
		else{
			sOffset = offset;
     aee:	b2e0      	uxtb	r0, r4
			sOffset = offset;
		}
	
	}
	else{
		if(offset & 0x10){	// Convert the 5 bit two's complement
     af0:	06e3      	lsls	r3, r4, #27
     af2:	d501      	bpl.n	af8 <BQ7695_read_offset_corr+0xa8>
			sOffset = -1*(0x10-(offset & 0x0F));
     af4:	20f0      	movs	r0, #240	; 0xf0
     af6:	4320      	orrs	r0, r4
		}
		else{
			sOffset = offset;
		}
	}
	return sOffset;
     af8:	b240      	sxtb	r0, r0
}
     afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     afc:	100001a1 	.word	0x100001a1

00000b00 <BQ7695_read_gain_corr>:

int8_t BQ7695_read_gain_corr(uint8_t vc){
	uint8_t gain = 0;
	int8_t sGain = 0;
	BQ7695_Read(I2C_ADDRESS_VREF_CAL + vc,rx_buf); // lower bits
     b00:	1c03      	adds	r3, r0, #0
     b02:	2120      	movs	r1, #32
		}
	}
	return sOffset;
}

int8_t BQ7695_read_gain_corr(uint8_t vc){
     b04:	b570      	push	{r4, r5, r6, lr}
	uint8_t gain = 0;
	int8_t sGain = 0;
	BQ7695_Read(I2C_ADDRESS_VREF_CAL + vc,rx_buf); // lower bits
     b06:	3310      	adds	r3, #16
     b08:	4d23      	ldr	r5, [pc, #140]	; (b98 <BQ7695_read_gain_corr+0x98>)
     b0a:	4319      	orrs	r1, r3
		}
	}
	return sOffset;
}

int8_t BQ7695_read_gain_corr(uint8_t vc){
     b0c:	1c06      	adds	r6, r0, #0
	uint8_t gain = 0;
	int8_t sGain = 0;
	BQ7695_Read(I2C_ADDRESS_VREF_CAL + vc,rx_buf); // lower bits
     b0e:	b2c9      	uxtb	r1, r1
     b10:	2000      	movs	r0, #0
     b12:	1c2a      	adds	r2, r5, #0
     b14:	2301      	movs	r3, #1
     b16:	f7ff fd7b 	bl	610 <Chip_I2C_MasterRead>
	gain = rx_buf[0];
     b1a:	782c      	ldrb	r4, [r5, #0]
	if(vc == 0){
     b1c:	2e00      	cmp	r6, #0
     b1e:	d106      	bne.n	b2e <BQ7695_read_gain_corr+0x2e>
		BQ7695_Read(I2C_ADDRESS_VREF_CAL_EXT, rx_buf);
     b20:	1c30      	adds	r0, r6, #0
     b22:	213b      	movs	r1, #59	; 0x3b
     b24:	1c2a      	adds	r2, r5, #0
     b26:	2301      	movs	r3, #1
     b28:	f7ff fd72 	bl	610 <Chip_I2C_MasterRead>
     b2c:	e028      	b.n	b80 <BQ7695_read_gain_corr+0x80>
		gain |= (rx_buf[0] & I2C_MASK_VREF_CAL_EXT_VREF_GC_4) << 4;
	}
	else if(vc < 3){
		BQ7695_Read(I2C_ADDRESS_VC_CAL_EXT_1,rx_buf);
     b2e:	2000      	movs	r0, #0
	gain = rx_buf[0];
	if(vc == 0){
		BQ7695_Read(I2C_ADDRESS_VREF_CAL_EXT, rx_buf);
		gain |= (rx_buf[0] & I2C_MASK_VREF_CAL_EXT_VREF_GC_4) << 4;
	}
	else if(vc < 3){
     b30:	2e02      	cmp	r6, #2
     b32:	d80a      	bhi.n	b4a <BQ7695_read_gain_corr+0x4a>
		BQ7695_Read(I2C_ADDRESS_VC_CAL_EXT_1,rx_buf);
     b34:	1c2a      	adds	r2, r5, #0
     b36:	2301      	movs	r3, #1
     b38:	2137      	movs	r1, #55	; 0x37
     b3a:	f7ff fd69 	bl	610 <Chip_I2C_MasterRead>
     b3e:	782b      	ldrb	r3, [r5, #0]
		if(vc == 1){
			gain |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_1_VC1_GC_4) >> 2;
     b40:	2240      	movs	r2, #64	; 0x40
		BQ7695_Read(I2C_ADDRESS_VREF_CAL_EXT, rx_buf);
		gain |= (rx_buf[0] & I2C_MASK_VREF_CAL_EXT_VREF_GC_4) << 4;
	}
	else if(vc < 3){
		BQ7695_Read(I2C_ADDRESS_VC_CAL_EXT_1,rx_buf);
		if(vc == 1){
     b42:	2e01      	cmp	r6, #1
     b44:	d00a      	beq.n	b5c <BQ7695_read_gain_corr+0x5c>
			gain |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_1_VC1_GC_4) >> 2;
		}
		else if(vc == 2){
			gain |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_1_VC2_GC_4);
     b46:	2210      	movs	r2, #16
     b48:	e00f      	b.n	b6a <BQ7695_read_gain_corr+0x6a>
		}
	}
	else{
		BQ7695_Read(I2C_ADDRESS_VREF_CAL_EXT, rx_buf);
     b4a:	213b      	movs	r1, #59	; 0x3b
     b4c:	1c2a      	adds	r2, r5, #0
     b4e:	2301      	movs	r3, #1
     b50:	f7ff fd5e 	bl	610 <Chip_I2C_MasterRead>
		if(vc == 3){
     b54:	2e03      	cmp	r6, #3
     b56:	d104      	bne.n	b62 <BQ7695_read_gain_corr+0x62>
			gain |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC3_GC_4) >> 2;
     b58:	2340      	movs	r3, #64	; 0x40
     b5a:	782a      	ldrb	r2, [r5, #0]
     b5c:	4013      	ands	r3, r2
     b5e:	109b      	asrs	r3, r3, #2
     b60:	e012      	b.n	b88 <BQ7695_read_gain_corr+0x88>
		}
		else if(vc==4){
     b62:	2e04      	cmp	r6, #4
     b64:	d103      	bne.n	b6e <BQ7695_read_gain_corr+0x6e>
			gain |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC4_GC_4);
     b66:	2310      	movs	r3, #16
     b68:	782a      	ldrb	r2, [r5, #0]
     b6a:	4013      	ands	r3, r2
     b6c:	e00c      	b.n	b88 <BQ7695_read_gain_corr+0x88>
		}
		else if(vc==5){
     b6e:	2e05      	cmp	r6, #5
     b70:	d104      	bne.n	b7c <BQ7695_read_gain_corr+0x7c>
			gain |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC5_GC_4) << 2;
     b72:	2304      	movs	r3, #4
     b74:	782a      	ldrb	r2, [r5, #0]
     b76:	4013      	ands	r3, r2
     b78:	009b      	lsls	r3, r3, #2
     b7a:	e005      	b.n	b88 <BQ7695_read_gain_corr+0x88>
		}
		else if(vc==6){
     b7c:	2e06      	cmp	r6, #6
     b7e:	d104      	bne.n	b8a <BQ7695_read_gain_corr+0x8a>
			gain |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC6_GC_4) << 4;
     b80:	2301      	movs	r3, #1
     b82:	782a      	ldrb	r2, [r5, #0]
     b84:	4013      	ands	r3, r2
     b86:	011b      	lsls	r3, r3, #4
     b88:	431c      	orrs	r4, r3
	}
	if(gain & 0x10){	// Convert the 5 bit two's complement
		sGain = -1*(0x10-(gain & 0x0F));
	}
	else{
		sGain = gain;
     b8a:	b2e0      	uxtb	r0, r4
		}
		else if(vc==6){
			gain |= (rx_buf[0] & I2C_MASK_VC_CAL_EXT_2_VC6_GC_4) << 4;
		}
	}
	if(gain & 0x10){	// Convert the 5 bit two's complement
     b8c:	06e3      	lsls	r3, r4, #27
     b8e:	d501      	bpl.n	b94 <BQ7695_read_gain_corr+0x94>
		sGain = -1*(0x10-(gain & 0x0F));
     b90:	20f0      	movs	r0, #240	; 0xf0
     b92:	4320      	orrs	r0, r4
	}
	else{
		sGain = gain;
	}
	return sGain;
     b94:	b240      	sxtb	r0, r0
}
     b96:	bd70      	pop	{r4, r5, r6, pc}
     b98:	100001a1 	.word	0x100001a1

00000b9c <BQ7695_read_cells>:
	Chip_ADC_SetStartMode(LPC_ADC, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
	while (!Chip_ADC_ReadStatus(LPC_ADC, ADC_CH5, ADC_DR_DONE_STAT));	
	Chip_ADC_ReadValue(LPC_ADC, ADC_CH5, cell);
}

void BQ7695_read_cells(uint16_t *cells){
     b9c:	b538      	push	{r3, r4, r5, lr}
	uint8_t i = 0;
     b9e:	2400      	movs	r4, #0
     ba0:	1c85      	adds	r5, r0, #2
	while(i<7){
		BQ7695_set_cell(++i);
     ba2:	3401      	adds	r4, #1
     ba4:	b2e4      	uxtb	r4, r4
     ba6:	1c20      	adds	r0, r4, #0
     ba8:	f7ff ff20 	bl	9ec <BQ7695_set_cell>
	return ((rx_buf[0] & I2C_MASK_STATUS_ALERT)!= 0);
}

static inline void readCell(uint16_t *cell){
	
	Chip_ADC_SetStartMode(LPC_ADC, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
     bac:	480a      	ldr	r0, [pc, #40]	; (bd8 <BQ7695_read_cells+0x3c>)
     bae:	2101      	movs	r1, #1
     bb0:	2200      	movs	r2, #0
     bb2:	f7ff faf3 	bl	19c <Chip_ADC_SetStartMode>
	while (!Chip_ADC_ReadStatus(LPC_ADC, ADC_CH5, ADC_DR_DONE_STAT));	
     bb6:	4808      	ldr	r0, [pc, #32]	; (bd8 <BQ7695_read_cells+0x3c>)
     bb8:	2105      	movs	r1, #5
     bba:	2200      	movs	r2, #0
     bbc:	f7ff fad3 	bl	166 <Chip_ADC_ReadStatus>
     bc0:	2800      	cmp	r0, #0
     bc2:	d0f8      	beq.n	bb6 <BQ7695_read_cells+0x1a>
	Chip_ADC_ReadValue(LPC_ADC, ADC_CH5, cell);
     bc4:	1c2a      	adds	r2, r5, #0
     bc6:	4804      	ldr	r0, [pc, #16]	; (bd8 <BQ7695_read_cells+0x3c>)
     bc8:	2105      	movs	r1, #5
     bca:	f7ff fac1 	bl	150 <Chip_ADC_ReadValue>
     bce:	3502      	adds	r5, #2
}

void BQ7695_read_cells(uint16_t *cells){
	uint8_t i = 0;
	while(i<7){
     bd0:	2c07      	cmp	r4, #7
     bd2:	d1e6      	bne.n	ba2 <BQ7695_read_cells+0x6>
		BQ7695_set_cell(++i);
		readCell(&(cells[i]));
	}
}
     bd4:	bd38      	pop	{r3, r4, r5, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	4001c000 	.word	0x4001c000

00000bdc <BQ7695_setup_corrections>:
	Chip_ADC_SetStartMode(LPC_ADC, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
	while (!Chip_ADC_ReadStatus(LPC_ADC, ADC_CH4, ADC_DR_DONE_STAT));	
	Chip_ADC_ReadValue(LPC_ADC, ADC_CH4, current);
}

void BQ7695_setup_corrections(int8_t *gc, int8_t *oc){
     bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bde:	1c07      	adds	r7, r0, #0
     be0:	1c0e      	adds	r6, r1, #0
     be2:	2400      	movs	r4, #0
     be4:	b2e5      	uxtb	r5, r4
	uint8_t i =0;
	while(i<7){
		gc[i] = BQ7695_read_gain_corr(i);
     be6:	1c28      	adds	r0, r5, #0
     be8:	f7ff ff8a 	bl	b00 <BQ7695_read_gain_corr>
     bec:	5538      	strb	r0, [r7, r4]
		oc[i] = BQ7695_read_offset_corr(i);
     bee:	1c28      	adds	r0, r5, #0
     bf0:	f7ff ff2e 	bl	a50 <BQ7695_read_offset_corr>
     bf4:	5530      	strb	r0, [r6, r4]
     bf6:	3401      	adds	r4, #1
	Chip_ADC_ReadValue(LPC_ADC, ADC_CH4, current);
}

void BQ7695_setup_corrections(int8_t *gc, int8_t *oc){
	uint8_t i =0;
	while(i<7){
     bf8:	2c07      	cmp	r4, #7
     bfa:	d1f3      	bne.n	be4 <BQ7695_setup_corrections+0x8>
		gc[i] = BQ7695_read_gain_corr(i);
		oc[i] = BQ7695_read_offset_corr(i);
		i++;
	}
}
     bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000bfe <I2C_IRQHandler>:
}

// -------------------------------------------------------------
// Interrupt Service Routines

void I2C_IRQHandler(void){
     bfe:	b508      	push	{r3, lr}
	if(Chip_I2C_IsMasterActive(I2C0)){
     c00:	2000      	movs	r0, #0
     c02:	f7ff fd19 	bl	638 <Chip_I2C_IsMasterActive>
     c06:	2800      	cmp	r0, #0
     c08:	d003      	beq.n	c12 <I2C_IRQHandler+0x14>
		Chip_I2C_MasterStateHandler(I2C0);
     c0a:	2000      	movs	r0, #0
     c0c:	f7ff fd22 	bl	654 <Chip_I2C_MasterStateHandler>
     c10:	e001      	b.n	c16 <I2C_IRQHandler+0x18>
	}
	else{
		Chip_I2C_SlaveStateHandler(I2C0);
     c12:	f7ff fd2f 	bl	674 <Chip_I2C_SlaveStateHandler>
	}
}
     c16:	bd08      	pop	{r3, pc}

00000c18 <main>:

// -------------------------------------------------------------
// Main Program Loop

int main(void)
{
     c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	//---------------
	// Initialize UART Communication
	Board_UART_Init(UART_BAUD_RATE);
     c1a:	20e1      	movs	r0, #225	; 0xe1
     c1c:	0200      	lsls	r0, r0, #8
     c1e:	f7ff fe47 	bl	8b0 <Board_UART_Init>
	Board_UART_Println("Started up");
     c22:	4837      	ldr	r0, [pc, #220]	; (d00 <main+0xe8>)
     c24:	f7ff fe6c 	bl	900 <Board_UART_Println>
//	while(i<8){
//		Board_UART_PrintNum(&(cellVolts[i++]),16,true);
//	}
	//---------------
	// Initialize SysTick Timer to generate millisecond count
	if (Board_SysTick_Init()) {
     c28:	f7ff fe10 	bl	84c <Board_SysTick_Init>
     c2c:	2800      	cmp	r0, #0
     c2e:	d003      	beq.n	c38 <main+0x20>
		Board_UART_Println("Failed to Initialize SysTick. ");
     c30:	4834      	ldr	r0, [pc, #208]	; (d04 <main+0xec>)
     c32:	f7ff fe65 	bl	900 <Board_UART_Println>
		// Unrecoverable Error. Hang.
		while(1);
     c36:	e7fe      	b.n	c36 <main+0x1e>
	}

	//---------------
	// Initialize GPIO and LED as output
	Board_LEDs_Init();
     c38:	f7ff fe2c 	bl	894 <Board_LEDs_Init>
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
     c3c:	2220      	movs	r2, #32
     c3e:	4b32      	ldr	r3, [pc, #200]	; (d08 <main+0xf0>)
     c40:	67da      	str	r2, [r3, #124]	; 0x7c
	Board_LED_On(LED0);


	//---------------
	// Initialize Things relevant to taking data
	Board_I2C_Init();
     c42:	f7ff fe93 	bl	96c <Board_I2C_Init>
	Board_ADC_Init();
     c46:	f7ff febb 	bl	9c0 <Board_ADC_Init>
	
	BQ7695_disable_unecessary();	
     c4a:	f7ff feeb 	bl	a24 <BQ7695_disable_unecessary>
	BQ7695_setup_corrections(gc,oc);
     c4e:	482f      	ldr	r0, [pc, #188]	; (d0c <main+0xf4>)
     c50:	492f      	ldr	r1, [pc, #188]	; (d10 <main+0xf8>)
     c52:	f7ff ffc3 	bl	bdc <BQ7695_setup_corrections>
//	while(i<7){
//		Board_UART_PrintNum(gc[i],10,true);
//		Board_UART_PrintNum(oc[i++],10,true);
//	}

	msTicks = 1000;
     c56:	23fa      	movs	r3, #250	; 0xfa
     c58:	4c2e      	ldr	r4, [pc, #184]	; (d14 <main+0xfc>)
     c5a:	009b      	lsls	r3, r3, #2
     c5c:	6023      	str	r3, [r4, #0]
	lastPrint = msTicks;
     c5e:	6823      	ldr	r3, [r4, #0]
     c60:	4d2d      	ldr	r5, [pc, #180]	; (d18 <main+0x100>)
     c62:	602b      	str	r3, [r5, #0]
	
	while (1) {

		if(lastPrint < msTicks-1000){
     c64:	4a2d      	ldr	r2, [pc, #180]	; (d1c <main+0x104>)
     c66:	6823      	ldr	r3, [r4, #0]
     c68:	189b      	adds	r3, r3, r2
     c6a:	682a      	ldr	r2, [r5, #0]
     c6c:	429a      	cmp	r2, r3
     c6e:	d30b      	bcc.n	c88 <main+0x70>
			Board_UART_PrintNum(msTicks,10,false);
			Board_UART_Println("]");
			print_cells();
		}
		uint8_t count;
		if ((count = Board_UART_Read(uart_rx_buffer, BUFFER_SIZE)) != 0) {
     c70:	4e2b      	ldr	r6, [pc, #172]	; (d20 <main+0x108>)
     c72:	2108      	movs	r1, #8
     c74:	1c30      	adds	r0, r6, #0
     c76:	f7ff fe6d 	bl	954 <Board_UART_Read>
     c7a:	b2c1      	uxtb	r1, r0
     c7c:	2900      	cmp	r1, #0
     c7e:	d0f1      	beq.n	c64 <main+0x4c>
			Board_UART_SendBlocking(uart_rx_buffer, count); // Echo user input
     c80:	1c30      	adds	r0, r6, #0
     c82:	f7ff fe5d 	bl	940 <Board_UART_SendBlocking>
     c86:	e7ed      	b.n	c64 <main+0x4c>
		if(lastPrint < msTicks-1000){
			lastPrint = msTicks;
			BQ7695_read_cells(cellVolts);
			Board_UART_Print("[msTicks : ");	
			Board_UART_PrintNum(msTicks,10,false);
			Board_UART_Println("]");
     c88:	2601      	movs	r6, #1
	
	while (1) {

		if(lastPrint < msTicks-1000){
			lastPrint = msTicks;
			BQ7695_read_cells(cellVolts);
     c8a:	4f26      	ldr	r7, [pc, #152]	; (d24 <main+0x10c>)
	lastPrint = msTicks;
	
	while (1) {

		if(lastPrint < msTicks-1000){
			lastPrint = msTicks;
     c8c:	6823      	ldr	r3, [r4, #0]
			BQ7695_read_cells(cellVolts);
     c8e:	1c38      	adds	r0, r7, #0
	lastPrint = msTicks;
	
	while (1) {

		if(lastPrint < msTicks-1000){
			lastPrint = msTicks;
     c90:	602b      	str	r3, [r5, #0]
			BQ7695_read_cells(cellVolts);
     c92:	f7ff ff83 	bl	b9c <BQ7695_read_cells>
			Board_UART_Print("[msTicks : ");	
     c96:	4824      	ldr	r0, [pc, #144]	; (d28 <main+0x110>)
     c98:	f7ff fe26 	bl	8e8 <Board_UART_Print>
			Board_UART_PrintNum(msTicks,10,false);
     c9c:	6820      	ldr	r0, [r4, #0]
     c9e:	210a      	movs	r1, #10
     ca0:	2200      	movs	r2, #0
     ca2:	f7ff fe37 	bl	914 <Board_UART_PrintNum>
			Board_UART_Println("]");
     ca6:	4821      	ldr	r0, [pc, #132]	; (d2c <main+0x114>)
     ca8:	f7ff fe2a 	bl	900 <Board_UART_Println>
     cac:	4b1f      	ldr	r3, [pc, #124]	; (d2c <main+0x114>)
     cae:	9301      	str	r3, [sp, #4]
}

static inline void print_cells(void){
	uint8_t i = 1;
	while(i<7){
		Board_UART_Print("[Cell Voltage ");
     cb0:	481f      	ldr	r0, [pc, #124]	; (d30 <main+0x118>)
     cb2:	f7ff fe19 	bl	8e8 <Board_UART_Print>
		Board_UART_PrintNum(i,10,false);
     cb6:	2200      	movs	r2, #0
     cb8:	1c30      	adds	r0, r6, #0
     cba:	210a      	movs	r1, #10
     cbc:	f7ff fe2a 	bl	914 <Board_UART_PrintNum>
		Board_UART_Print(": ");
     cc0:	481c      	ldr	r0, [pc, #112]	; (d34 <main+0x11c>)
     cc2:	f7ff fe11 	bl	8e8 <Board_UART_Print>
     cc6:	0073      	lsls	r3, r6, #1

//		Board_UART_PrintNum(((((3.3*cellVolts[i++]*1000)/1023)+oc[i])*(1+gc[i]))/gc[i],10,false);
		Board_UART_PrintNum((3.3*cellVolts[i++]*1000)/1023, 10, false);
     cc8:	5af8      	ldrh	r0, [r7, r3]
     cca:	f000 fff9 	bl	1cc0 <__aeabi_i2d>
     cce:	4a1a      	ldr	r2, [pc, #104]	; (d38 <main+0x120>)
     cd0:	4b1a      	ldr	r3, [pc, #104]	; (d3c <main+0x124>)
     cd2:	f000 fd25 	bl	1720 <__aeabi_dmul>
     cd6:	2200      	movs	r2, #0
     cd8:	4b19      	ldr	r3, [pc, #100]	; (d40 <main+0x128>)
     cda:	f000 fd21 	bl	1720 <__aeabi_dmul>
     cde:	4b19      	ldr	r3, [pc, #100]	; (d44 <main+0x12c>)
     ce0:	2200      	movs	r2, #0
     ce2:	f000 f9f9 	bl	10d8 <__aeabi_ddiv>
     ce6:	f000 ffb5 	bl	1c54 <__aeabi_d2iz>
     cea:	210a      	movs	r1, #10
     cec:	2200      	movs	r2, #0
     cee:	f7ff fe11 	bl	914 <Board_UART_PrintNum>
     cf2:	3601      	adds	r6, #1
		Board_UART_Println("]");
     cf4:	9801      	ldr	r0, [sp, #4]
     cf6:	f7ff fe03 	bl	900 <Board_UART_Println>
	while ((msTicks - curTicks) < ms);
}

static inline void print_cells(void){
	uint8_t i = 1;
	while(i<7){
     cfa:	2e07      	cmp	r6, #7
     cfc:	d1d8      	bne.n	cb0 <main+0x98>
     cfe:	e7b7      	b.n	c70 <main+0x58>
     d00:	00001e37 	.word	0x00001e37
     d04:	00001e42 	.word	0x00001e42
     d08:	50020004 	.word	0x50020004
     d0c:	10000194 	.word	0x10000194
     d10:	10000170 	.word	0x10000170
     d14:	1000019c 	.word	0x1000019c
     d18:	10000180 	.word	0x10000180
     d1c:	fffffc18 	.word	0xfffffc18
     d20:	10000177 	.word	0x10000177
     d24:	10000184 	.word	0x10000184
     d28:	00001e61 	.word	0x00001e61
     d2c:	00001e6d 	.word	0x00001e6d
     d30:	00001e6f 	.word	0x00001e6f
     d34:	00001e6a 	.word	0x00001e6a
     d38:	66666666 	.word	0x66666666
     d3c:	400a6666 	.word	0x400a6666
     d40:	408f4000 	.word	0x408f4000
     d44:	408ff800 	.word	0x408ff800

00000d48 <SystemInit>:
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
     d48:	218e      	movs	r1, #142	; 0x8e
     d4a:	2020      	movs	r0, #32
     d4c:	4b1e      	ldr	r3, [pc, #120]	; (dc8 <SystemInit+0x80>)
     d4e:	0089      	lsls	r1, r1, #2
     d50:	585a      	ldr	r2, [r3, r1]
 *
 * @brief  Setup the microcontroller system.
 *         Initialize the System.
 */
void SystemInit (void)
{
     d52:	b510      	push	{r4, lr}
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
     d54:	4382      	bics	r2, r0
     d56:	505a      	str	r2, [r3, r1]
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
     d58:	2200      	movs	r2, #0
     d5a:	621a      	str	r2, [r3, #32]
     d5c:	32c8      	adds	r2, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	3a01      	subs	r2, #1
  for (i = 0; i < 200; i++) __NOP();
     d62:	2a00      	cmp	r2, #0
     d64:	d1fb      	bne.n	d5e <SystemInit+0x16>
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
     d66:	2101      	movs	r1, #1
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
  for (i = 0; i < 200; i++) __NOP();
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
     d68:	641a      	str	r2, [r3, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
     d6a:	6459      	str	r1, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
     d6c:	645a      	str	r2, [r3, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
     d6e:	6459      	str	r1, [r3, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
     d70:	6c59      	ldr	r1, [r3, #68]	; 0x44
     d72:	4a15      	ldr	r2, [pc, #84]	; (dc8 <SystemInit+0x80>)
     d74:	07c9      	lsls	r1, r1, #31
     d76:	d5fb      	bpl.n	d70 <SystemInit+0x28>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
     d78:	2161      	movs	r1, #97	; 0x61
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
     d7a:	208e      	movs	r0, #142	; 0x8e
     d7c:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
     d7e:	6091      	str	r1, [r2, #8]
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
     d80:	0080      	lsls	r0, r0, #2
     d82:	5811      	ldr	r1, [r2, r0]
     d84:	43a1      	bics	r1, r4
     d86:	5011      	str	r1, [r2, r0]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));	      /* Wait Until PLL Locked    */
     d88:	2101      	movs	r1, #1
     d8a:	68d8      	ldr	r0, [r3, #12]
     d8c:	4a0e      	ldr	r2, [pc, #56]	; (dc8 <SystemInit+0x80>)
     d8e:	4208      	tst	r0, r1
     d90:	d0fa      	beq.n	d88 <SystemInit+0x40>
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
     d92:	2000      	movs	r0, #0
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
     d94:	6711      	str	r1, [r2, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
     d96:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
     d98:	6750      	str	r0, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
     d9a:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
     d9c:	2001      	movs	r0, #1
     d9e:	6f59      	ldr	r1, [r3, #116]	; 0x74
     da0:	4a09      	ldr	r2, [pc, #36]	; (dc8 <SystemInit+0x80>)
     da2:	4201      	tst	r1, r0
     da4:	d0fa      	beq.n	d9c <SystemInit+0x54>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
     da6:	238e      	movs	r3, #142	; 0x8e
     da8:	2480      	movs	r4, #128	; 0x80
     daa:	009b      	lsls	r3, r3, #2
     dac:	58d1      	ldr	r1, [r2, r3]
     dae:	00e4      	lsls	r4, r4, #3
     db0:	4321      	orrs	r1, r4
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
     db2:	2480      	movs	r4, #128	; 0x80
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
     db4:	50d1      	str	r1, [r2, r3]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
     db6:	58d1      	ldr	r1, [r2, r3]
     db8:	0064      	lsls	r4, r4, #1
     dba:	4321      	orrs	r1, r4
     dbc:	50d1      	str	r1, [r2, r3]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
     dbe:	6790      	str	r0, [r2, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
     dc0:	4b02      	ldr	r3, [pc, #8]	; (dcc <SystemInit+0x84>)
     dc2:	4a03      	ldr	r2, [pc, #12]	; (dd0 <SystemInit+0x88>)
     dc4:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
     dc6:	bd10      	pop	{r4, pc}
     dc8:	40048000 	.word	0x40048000
     dcc:	40048004 	.word	0x40048004
     dd0:	0001005f 	.word	0x0001005f

00000dd4 <__aeabi_uidiv>:
     dd4:	2200      	movs	r2, #0
     dd6:	0843      	lsrs	r3, r0, #1
     dd8:	428b      	cmp	r3, r1
     dda:	d374      	bcc.n	ec6 <__aeabi_uidiv+0xf2>
     ddc:	0903      	lsrs	r3, r0, #4
     dde:	428b      	cmp	r3, r1
     de0:	d35f      	bcc.n	ea2 <__aeabi_uidiv+0xce>
     de2:	0a03      	lsrs	r3, r0, #8
     de4:	428b      	cmp	r3, r1
     de6:	d344      	bcc.n	e72 <__aeabi_uidiv+0x9e>
     de8:	0b03      	lsrs	r3, r0, #12
     dea:	428b      	cmp	r3, r1
     dec:	d328      	bcc.n	e40 <__aeabi_uidiv+0x6c>
     dee:	0c03      	lsrs	r3, r0, #16
     df0:	428b      	cmp	r3, r1
     df2:	d30d      	bcc.n	e10 <__aeabi_uidiv+0x3c>
     df4:	22ff      	movs	r2, #255	; 0xff
     df6:	0209      	lsls	r1, r1, #8
     df8:	ba12      	rev	r2, r2
     dfa:	0c03      	lsrs	r3, r0, #16
     dfc:	428b      	cmp	r3, r1
     dfe:	d302      	bcc.n	e06 <__aeabi_uidiv+0x32>
     e00:	1212      	asrs	r2, r2, #8
     e02:	0209      	lsls	r1, r1, #8
     e04:	d065      	beq.n	ed2 <__aeabi_uidiv+0xfe>
     e06:	0b03      	lsrs	r3, r0, #12
     e08:	428b      	cmp	r3, r1
     e0a:	d319      	bcc.n	e40 <__aeabi_uidiv+0x6c>
     e0c:	e000      	b.n	e10 <__aeabi_uidiv+0x3c>
     e0e:	0a09      	lsrs	r1, r1, #8
     e10:	0bc3      	lsrs	r3, r0, #15
     e12:	428b      	cmp	r3, r1
     e14:	d301      	bcc.n	e1a <__aeabi_uidiv+0x46>
     e16:	03cb      	lsls	r3, r1, #15
     e18:	1ac0      	subs	r0, r0, r3
     e1a:	4152      	adcs	r2, r2
     e1c:	0b83      	lsrs	r3, r0, #14
     e1e:	428b      	cmp	r3, r1
     e20:	d301      	bcc.n	e26 <__aeabi_uidiv+0x52>
     e22:	038b      	lsls	r3, r1, #14
     e24:	1ac0      	subs	r0, r0, r3
     e26:	4152      	adcs	r2, r2
     e28:	0b43      	lsrs	r3, r0, #13
     e2a:	428b      	cmp	r3, r1
     e2c:	d301      	bcc.n	e32 <__aeabi_uidiv+0x5e>
     e2e:	034b      	lsls	r3, r1, #13
     e30:	1ac0      	subs	r0, r0, r3
     e32:	4152      	adcs	r2, r2
     e34:	0b03      	lsrs	r3, r0, #12
     e36:	428b      	cmp	r3, r1
     e38:	d301      	bcc.n	e3e <__aeabi_uidiv+0x6a>
     e3a:	030b      	lsls	r3, r1, #12
     e3c:	1ac0      	subs	r0, r0, r3
     e3e:	4152      	adcs	r2, r2
     e40:	0ac3      	lsrs	r3, r0, #11
     e42:	428b      	cmp	r3, r1
     e44:	d301      	bcc.n	e4a <__aeabi_uidiv+0x76>
     e46:	02cb      	lsls	r3, r1, #11
     e48:	1ac0      	subs	r0, r0, r3
     e4a:	4152      	adcs	r2, r2
     e4c:	0a83      	lsrs	r3, r0, #10
     e4e:	428b      	cmp	r3, r1
     e50:	d301      	bcc.n	e56 <__aeabi_uidiv+0x82>
     e52:	028b      	lsls	r3, r1, #10
     e54:	1ac0      	subs	r0, r0, r3
     e56:	4152      	adcs	r2, r2
     e58:	0a43      	lsrs	r3, r0, #9
     e5a:	428b      	cmp	r3, r1
     e5c:	d301      	bcc.n	e62 <__aeabi_uidiv+0x8e>
     e5e:	024b      	lsls	r3, r1, #9
     e60:	1ac0      	subs	r0, r0, r3
     e62:	4152      	adcs	r2, r2
     e64:	0a03      	lsrs	r3, r0, #8
     e66:	428b      	cmp	r3, r1
     e68:	d301      	bcc.n	e6e <__aeabi_uidiv+0x9a>
     e6a:	020b      	lsls	r3, r1, #8
     e6c:	1ac0      	subs	r0, r0, r3
     e6e:	4152      	adcs	r2, r2
     e70:	d2cd      	bcs.n	e0e <__aeabi_uidiv+0x3a>
     e72:	09c3      	lsrs	r3, r0, #7
     e74:	428b      	cmp	r3, r1
     e76:	d301      	bcc.n	e7c <__aeabi_uidiv+0xa8>
     e78:	01cb      	lsls	r3, r1, #7
     e7a:	1ac0      	subs	r0, r0, r3
     e7c:	4152      	adcs	r2, r2
     e7e:	0983      	lsrs	r3, r0, #6
     e80:	428b      	cmp	r3, r1
     e82:	d301      	bcc.n	e88 <__aeabi_uidiv+0xb4>
     e84:	018b      	lsls	r3, r1, #6
     e86:	1ac0      	subs	r0, r0, r3
     e88:	4152      	adcs	r2, r2
     e8a:	0943      	lsrs	r3, r0, #5
     e8c:	428b      	cmp	r3, r1
     e8e:	d301      	bcc.n	e94 <__aeabi_uidiv+0xc0>
     e90:	014b      	lsls	r3, r1, #5
     e92:	1ac0      	subs	r0, r0, r3
     e94:	4152      	adcs	r2, r2
     e96:	0903      	lsrs	r3, r0, #4
     e98:	428b      	cmp	r3, r1
     e9a:	d301      	bcc.n	ea0 <__aeabi_uidiv+0xcc>
     e9c:	010b      	lsls	r3, r1, #4
     e9e:	1ac0      	subs	r0, r0, r3
     ea0:	4152      	adcs	r2, r2
     ea2:	08c3      	lsrs	r3, r0, #3
     ea4:	428b      	cmp	r3, r1
     ea6:	d301      	bcc.n	eac <__aeabi_uidiv+0xd8>
     ea8:	00cb      	lsls	r3, r1, #3
     eaa:	1ac0      	subs	r0, r0, r3
     eac:	4152      	adcs	r2, r2
     eae:	0883      	lsrs	r3, r0, #2
     eb0:	428b      	cmp	r3, r1
     eb2:	d301      	bcc.n	eb8 <__aeabi_uidiv+0xe4>
     eb4:	008b      	lsls	r3, r1, #2
     eb6:	1ac0      	subs	r0, r0, r3
     eb8:	4152      	adcs	r2, r2
     eba:	0843      	lsrs	r3, r0, #1
     ebc:	428b      	cmp	r3, r1
     ebe:	d301      	bcc.n	ec4 <__aeabi_uidiv+0xf0>
     ec0:	004b      	lsls	r3, r1, #1
     ec2:	1ac0      	subs	r0, r0, r3
     ec4:	4152      	adcs	r2, r2
     ec6:	1a41      	subs	r1, r0, r1
     ec8:	d200      	bcs.n	ecc <__aeabi_uidiv+0xf8>
     eca:	4601      	mov	r1, r0
     ecc:	4152      	adcs	r2, r2
     ece:	4610      	mov	r0, r2
     ed0:	4770      	bx	lr
     ed2:	e7ff      	b.n	ed4 <__aeabi_uidiv+0x100>
     ed4:	b501      	push	{r0, lr}
     ed6:	2000      	movs	r0, #0
     ed8:	f000 f8fc 	bl	10d4 <__aeabi_idiv0>
     edc:	bd02      	pop	{r1, pc}
     ede:	46c0      	nop			; (mov r8, r8)

00000ee0 <__aeabi_uidivmod>:
     ee0:	2900      	cmp	r1, #0
     ee2:	d0f7      	beq.n	ed4 <__aeabi_uidiv+0x100>
     ee4:	b503      	push	{r0, r1, lr}
     ee6:	f7ff ff75 	bl	dd4 <__aeabi_uidiv>
     eea:	bc0e      	pop	{r1, r2, r3}
     eec:	4342      	muls	r2, r0
     eee:	1a89      	subs	r1, r1, r2
     ef0:	4718      	bx	r3
     ef2:	46c0      	nop			; (mov r8, r8)

00000ef4 <__aeabi_idiv>:
     ef4:	4603      	mov	r3, r0
     ef6:	430b      	orrs	r3, r1
     ef8:	d47f      	bmi.n	ffa <__aeabi_idiv+0x106>
     efa:	2200      	movs	r2, #0
     efc:	0843      	lsrs	r3, r0, #1
     efe:	428b      	cmp	r3, r1
     f00:	d374      	bcc.n	fec <__aeabi_idiv+0xf8>
     f02:	0903      	lsrs	r3, r0, #4
     f04:	428b      	cmp	r3, r1
     f06:	d35f      	bcc.n	fc8 <__aeabi_idiv+0xd4>
     f08:	0a03      	lsrs	r3, r0, #8
     f0a:	428b      	cmp	r3, r1
     f0c:	d344      	bcc.n	f98 <__aeabi_idiv+0xa4>
     f0e:	0b03      	lsrs	r3, r0, #12
     f10:	428b      	cmp	r3, r1
     f12:	d328      	bcc.n	f66 <__aeabi_idiv+0x72>
     f14:	0c03      	lsrs	r3, r0, #16
     f16:	428b      	cmp	r3, r1
     f18:	d30d      	bcc.n	f36 <__aeabi_idiv+0x42>
     f1a:	22ff      	movs	r2, #255	; 0xff
     f1c:	0209      	lsls	r1, r1, #8
     f1e:	ba12      	rev	r2, r2
     f20:	0c03      	lsrs	r3, r0, #16
     f22:	428b      	cmp	r3, r1
     f24:	d302      	bcc.n	f2c <__aeabi_idiv+0x38>
     f26:	1212      	asrs	r2, r2, #8
     f28:	0209      	lsls	r1, r1, #8
     f2a:	d065      	beq.n	ff8 <__aeabi_idiv+0x104>
     f2c:	0b03      	lsrs	r3, r0, #12
     f2e:	428b      	cmp	r3, r1
     f30:	d319      	bcc.n	f66 <__aeabi_idiv+0x72>
     f32:	e000      	b.n	f36 <__aeabi_idiv+0x42>
     f34:	0a09      	lsrs	r1, r1, #8
     f36:	0bc3      	lsrs	r3, r0, #15
     f38:	428b      	cmp	r3, r1
     f3a:	d301      	bcc.n	f40 <__aeabi_idiv+0x4c>
     f3c:	03cb      	lsls	r3, r1, #15
     f3e:	1ac0      	subs	r0, r0, r3
     f40:	4152      	adcs	r2, r2
     f42:	0b83      	lsrs	r3, r0, #14
     f44:	428b      	cmp	r3, r1
     f46:	d301      	bcc.n	f4c <__aeabi_idiv+0x58>
     f48:	038b      	lsls	r3, r1, #14
     f4a:	1ac0      	subs	r0, r0, r3
     f4c:	4152      	adcs	r2, r2
     f4e:	0b43      	lsrs	r3, r0, #13
     f50:	428b      	cmp	r3, r1
     f52:	d301      	bcc.n	f58 <__aeabi_idiv+0x64>
     f54:	034b      	lsls	r3, r1, #13
     f56:	1ac0      	subs	r0, r0, r3
     f58:	4152      	adcs	r2, r2
     f5a:	0b03      	lsrs	r3, r0, #12
     f5c:	428b      	cmp	r3, r1
     f5e:	d301      	bcc.n	f64 <__aeabi_idiv+0x70>
     f60:	030b      	lsls	r3, r1, #12
     f62:	1ac0      	subs	r0, r0, r3
     f64:	4152      	adcs	r2, r2
     f66:	0ac3      	lsrs	r3, r0, #11
     f68:	428b      	cmp	r3, r1
     f6a:	d301      	bcc.n	f70 <__aeabi_idiv+0x7c>
     f6c:	02cb      	lsls	r3, r1, #11
     f6e:	1ac0      	subs	r0, r0, r3
     f70:	4152      	adcs	r2, r2
     f72:	0a83      	lsrs	r3, r0, #10
     f74:	428b      	cmp	r3, r1
     f76:	d301      	bcc.n	f7c <__aeabi_idiv+0x88>
     f78:	028b      	lsls	r3, r1, #10
     f7a:	1ac0      	subs	r0, r0, r3
     f7c:	4152      	adcs	r2, r2
     f7e:	0a43      	lsrs	r3, r0, #9
     f80:	428b      	cmp	r3, r1
     f82:	d301      	bcc.n	f88 <__aeabi_idiv+0x94>
     f84:	024b      	lsls	r3, r1, #9
     f86:	1ac0      	subs	r0, r0, r3
     f88:	4152      	adcs	r2, r2
     f8a:	0a03      	lsrs	r3, r0, #8
     f8c:	428b      	cmp	r3, r1
     f8e:	d301      	bcc.n	f94 <__aeabi_idiv+0xa0>
     f90:	020b      	lsls	r3, r1, #8
     f92:	1ac0      	subs	r0, r0, r3
     f94:	4152      	adcs	r2, r2
     f96:	d2cd      	bcs.n	f34 <__aeabi_idiv+0x40>
     f98:	09c3      	lsrs	r3, r0, #7
     f9a:	428b      	cmp	r3, r1
     f9c:	d301      	bcc.n	fa2 <__aeabi_idiv+0xae>
     f9e:	01cb      	lsls	r3, r1, #7
     fa0:	1ac0      	subs	r0, r0, r3
     fa2:	4152      	adcs	r2, r2
     fa4:	0983      	lsrs	r3, r0, #6
     fa6:	428b      	cmp	r3, r1
     fa8:	d301      	bcc.n	fae <__aeabi_idiv+0xba>
     faa:	018b      	lsls	r3, r1, #6
     fac:	1ac0      	subs	r0, r0, r3
     fae:	4152      	adcs	r2, r2
     fb0:	0943      	lsrs	r3, r0, #5
     fb2:	428b      	cmp	r3, r1
     fb4:	d301      	bcc.n	fba <__aeabi_idiv+0xc6>
     fb6:	014b      	lsls	r3, r1, #5
     fb8:	1ac0      	subs	r0, r0, r3
     fba:	4152      	adcs	r2, r2
     fbc:	0903      	lsrs	r3, r0, #4
     fbe:	428b      	cmp	r3, r1
     fc0:	d301      	bcc.n	fc6 <__aeabi_idiv+0xd2>
     fc2:	010b      	lsls	r3, r1, #4
     fc4:	1ac0      	subs	r0, r0, r3
     fc6:	4152      	adcs	r2, r2
     fc8:	08c3      	lsrs	r3, r0, #3
     fca:	428b      	cmp	r3, r1
     fcc:	d301      	bcc.n	fd2 <__aeabi_idiv+0xde>
     fce:	00cb      	lsls	r3, r1, #3
     fd0:	1ac0      	subs	r0, r0, r3
     fd2:	4152      	adcs	r2, r2
     fd4:	0883      	lsrs	r3, r0, #2
     fd6:	428b      	cmp	r3, r1
     fd8:	d301      	bcc.n	fde <__aeabi_idiv+0xea>
     fda:	008b      	lsls	r3, r1, #2
     fdc:	1ac0      	subs	r0, r0, r3
     fde:	4152      	adcs	r2, r2
     fe0:	0843      	lsrs	r3, r0, #1
     fe2:	428b      	cmp	r3, r1
     fe4:	d301      	bcc.n	fea <__aeabi_idiv+0xf6>
     fe6:	004b      	lsls	r3, r1, #1
     fe8:	1ac0      	subs	r0, r0, r3
     fea:	4152      	adcs	r2, r2
     fec:	1a41      	subs	r1, r0, r1
     fee:	d200      	bcs.n	ff2 <__aeabi_idiv+0xfe>
     ff0:	4601      	mov	r1, r0
     ff2:	4152      	adcs	r2, r2
     ff4:	4610      	mov	r0, r2
     ff6:	4770      	bx	lr
     ff8:	e05d      	b.n	10b6 <Heap_Size+0xb6>
     ffa:	0fca      	lsrs	r2, r1, #31
     ffc:	d000      	beq.n	1000 <Heap_Size>
     ffe:	4249      	negs	r1, r1
    1000:	1003      	asrs	r3, r0, #32
    1002:	d300      	bcc.n	1006 <Heap_Size+0x6>
    1004:	4240      	negs	r0, r0
    1006:	4053      	eors	r3, r2
    1008:	2200      	movs	r2, #0
    100a:	469c      	mov	ip, r3
    100c:	0903      	lsrs	r3, r0, #4
    100e:	428b      	cmp	r3, r1
    1010:	d32d      	bcc.n	106e <Heap_Size+0x6e>
    1012:	0a03      	lsrs	r3, r0, #8
    1014:	428b      	cmp	r3, r1
    1016:	d312      	bcc.n	103e <Heap_Size+0x3e>
    1018:	22fc      	movs	r2, #252	; 0xfc
    101a:	0189      	lsls	r1, r1, #6
    101c:	ba12      	rev	r2, r2
    101e:	0a03      	lsrs	r3, r0, #8
    1020:	428b      	cmp	r3, r1
    1022:	d30c      	bcc.n	103e <Heap_Size+0x3e>
    1024:	0189      	lsls	r1, r1, #6
    1026:	1192      	asrs	r2, r2, #6
    1028:	428b      	cmp	r3, r1
    102a:	d308      	bcc.n	103e <Heap_Size+0x3e>
    102c:	0189      	lsls	r1, r1, #6
    102e:	1192      	asrs	r2, r2, #6
    1030:	428b      	cmp	r3, r1
    1032:	d304      	bcc.n	103e <Heap_Size+0x3e>
    1034:	0189      	lsls	r1, r1, #6
    1036:	d03a      	beq.n	10ae <Heap_Size+0xae>
    1038:	1192      	asrs	r2, r2, #6
    103a:	e000      	b.n	103e <Heap_Size+0x3e>
    103c:	0989      	lsrs	r1, r1, #6
    103e:	09c3      	lsrs	r3, r0, #7
    1040:	428b      	cmp	r3, r1
    1042:	d301      	bcc.n	1048 <Heap_Size+0x48>
    1044:	01cb      	lsls	r3, r1, #7
    1046:	1ac0      	subs	r0, r0, r3
    1048:	4152      	adcs	r2, r2
    104a:	0983      	lsrs	r3, r0, #6
    104c:	428b      	cmp	r3, r1
    104e:	d301      	bcc.n	1054 <Heap_Size+0x54>
    1050:	018b      	lsls	r3, r1, #6
    1052:	1ac0      	subs	r0, r0, r3
    1054:	4152      	adcs	r2, r2
    1056:	0943      	lsrs	r3, r0, #5
    1058:	428b      	cmp	r3, r1
    105a:	d301      	bcc.n	1060 <Heap_Size+0x60>
    105c:	014b      	lsls	r3, r1, #5
    105e:	1ac0      	subs	r0, r0, r3
    1060:	4152      	adcs	r2, r2
    1062:	0903      	lsrs	r3, r0, #4
    1064:	428b      	cmp	r3, r1
    1066:	d301      	bcc.n	106c <Heap_Size+0x6c>
    1068:	010b      	lsls	r3, r1, #4
    106a:	1ac0      	subs	r0, r0, r3
    106c:	4152      	adcs	r2, r2
    106e:	08c3      	lsrs	r3, r0, #3
    1070:	428b      	cmp	r3, r1
    1072:	d301      	bcc.n	1078 <Heap_Size+0x78>
    1074:	00cb      	lsls	r3, r1, #3
    1076:	1ac0      	subs	r0, r0, r3
    1078:	4152      	adcs	r2, r2
    107a:	0883      	lsrs	r3, r0, #2
    107c:	428b      	cmp	r3, r1
    107e:	d301      	bcc.n	1084 <Heap_Size+0x84>
    1080:	008b      	lsls	r3, r1, #2
    1082:	1ac0      	subs	r0, r0, r3
    1084:	4152      	adcs	r2, r2
    1086:	d2d9      	bcs.n	103c <Heap_Size+0x3c>
    1088:	0843      	lsrs	r3, r0, #1
    108a:	428b      	cmp	r3, r1
    108c:	d301      	bcc.n	1092 <Heap_Size+0x92>
    108e:	004b      	lsls	r3, r1, #1
    1090:	1ac0      	subs	r0, r0, r3
    1092:	4152      	adcs	r2, r2
    1094:	1a41      	subs	r1, r0, r1
    1096:	d200      	bcs.n	109a <Heap_Size+0x9a>
    1098:	4601      	mov	r1, r0
    109a:	4663      	mov	r3, ip
    109c:	4152      	adcs	r2, r2
    109e:	105b      	asrs	r3, r3, #1
    10a0:	4610      	mov	r0, r2
    10a2:	d301      	bcc.n	10a8 <Heap_Size+0xa8>
    10a4:	4240      	negs	r0, r0
    10a6:	2b00      	cmp	r3, #0
    10a8:	d500      	bpl.n	10ac <Heap_Size+0xac>
    10aa:	4249      	negs	r1, r1
    10ac:	4770      	bx	lr
    10ae:	4663      	mov	r3, ip
    10b0:	105b      	asrs	r3, r3, #1
    10b2:	d300      	bcc.n	10b6 <Heap_Size+0xb6>
    10b4:	4240      	negs	r0, r0
    10b6:	b501      	push	{r0, lr}
    10b8:	2000      	movs	r0, #0
    10ba:	f000 f80b 	bl	10d4 <__aeabi_idiv0>
    10be:	bd02      	pop	{r1, pc}

000010c0 <__aeabi_idivmod>:
    10c0:	2900      	cmp	r1, #0
    10c2:	d0f8      	beq.n	10b6 <Heap_Size+0xb6>
    10c4:	b503      	push	{r0, r1, lr}
    10c6:	f7ff ff15 	bl	ef4 <__aeabi_idiv>
    10ca:	bc0e      	pop	{r1, r2, r3}
    10cc:	4342      	muls	r2, r0
    10ce:	1a89      	subs	r1, r1, r2
    10d0:	4718      	bx	r3
    10d2:	46c0      	nop			; (mov r8, r8)

000010d4 <__aeabi_idiv0>:
    10d4:	4770      	bx	lr
    10d6:	46c0      	nop			; (mov r8, r8)

000010d8 <__aeabi_ddiv>:
    10d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10da:	465f      	mov	r7, fp
    10dc:	4656      	mov	r6, sl
    10de:	464d      	mov	r5, r9
    10e0:	4644      	mov	r4, r8
    10e2:	b4f0      	push	{r4, r5, r6, r7}
    10e4:	030f      	lsls	r7, r1, #12
    10e6:	b087      	sub	sp, #28
    10e8:	4698      	mov	r8, r3
    10ea:	004d      	lsls	r5, r1, #1
    10ec:	0b3b      	lsrs	r3, r7, #12
    10ee:	0fcc      	lsrs	r4, r1, #31
    10f0:	1c06      	adds	r6, r0, #0
    10f2:	4692      	mov	sl, r2
    10f4:	4681      	mov	r9, r0
    10f6:	469b      	mov	fp, r3
    10f8:	0d6d      	lsrs	r5, r5, #21
    10fa:	9401      	str	r4, [sp, #4]
    10fc:	d06b      	beq.n	11d6 <__aeabi_ddiv+0xfe>
    10fe:	4b66      	ldr	r3, [pc, #408]	; (1298 <__aeabi_ddiv+0x1c0>)
    1100:	429d      	cmp	r5, r3
    1102:	d035      	beq.n	1170 <__aeabi_ddiv+0x98>
    1104:	2780      	movs	r7, #128	; 0x80
    1106:	465b      	mov	r3, fp
    1108:	037f      	lsls	r7, r7, #13
    110a:	431f      	orrs	r7, r3
    110c:	00f3      	lsls	r3, r6, #3
    110e:	4699      	mov	r9, r3
    1110:	4b62      	ldr	r3, [pc, #392]	; (129c <__aeabi_ddiv+0x1c4>)
    1112:	00ff      	lsls	r7, r7, #3
    1114:	0f40      	lsrs	r0, r0, #29
    1116:	469c      	mov	ip, r3
    1118:	4307      	orrs	r7, r0
    111a:	2300      	movs	r3, #0
    111c:	46bb      	mov	fp, r7
    111e:	2600      	movs	r6, #0
    1120:	4465      	add	r5, ip
    1122:	9300      	str	r3, [sp, #0]
    1124:	4642      	mov	r2, r8
    1126:	0317      	lsls	r7, r2, #12
    1128:	0050      	lsls	r0, r2, #1
    112a:	0fd2      	lsrs	r2, r2, #31
    112c:	4653      	mov	r3, sl
    112e:	0b3f      	lsrs	r7, r7, #12
    1130:	0d40      	lsrs	r0, r0, #21
    1132:	4690      	mov	r8, r2
    1134:	d100      	bne.n	1138 <__aeabi_ddiv+0x60>
    1136:	e072      	b.n	121e <__aeabi_ddiv+0x146>
    1138:	4a57      	ldr	r2, [pc, #348]	; (1298 <__aeabi_ddiv+0x1c0>)
    113a:	4290      	cmp	r0, r2
    113c:	d067      	beq.n	120e <__aeabi_ddiv+0x136>
    113e:	2380      	movs	r3, #128	; 0x80
    1140:	035b      	lsls	r3, r3, #13
    1142:	431f      	orrs	r7, r3
    1144:	4653      	mov	r3, sl
    1146:	4a55      	ldr	r2, [pc, #340]	; (129c <__aeabi_ddiv+0x1c4>)
    1148:	0f5b      	lsrs	r3, r3, #29
    114a:	00ff      	lsls	r7, r7, #3
    114c:	431f      	orrs	r7, r3
    114e:	4694      	mov	ip, r2
    1150:	4653      	mov	r3, sl
    1152:	2100      	movs	r1, #0
    1154:	00db      	lsls	r3, r3, #3
    1156:	4460      	add	r0, ip
    1158:	4642      	mov	r2, r8
    115a:	4062      	eors	r2, r4
    115c:	4692      	mov	sl, r2
    115e:	1a2d      	subs	r5, r5, r0
    1160:	430e      	orrs	r6, r1
    1162:	2e0f      	cmp	r6, #15
    1164:	d900      	bls.n	1168 <__aeabi_ddiv+0x90>
    1166:	e0a1      	b.n	12ac <__aeabi_ddiv+0x1d4>
    1168:	484d      	ldr	r0, [pc, #308]	; (12a0 <__aeabi_ddiv+0x1c8>)
    116a:	00b6      	lsls	r6, r6, #2
    116c:	5980      	ldr	r0, [r0, r6]
    116e:	4687      	mov	pc, r0
    1170:	465b      	mov	r3, fp
    1172:	431e      	orrs	r6, r3
    1174:	d000      	beq.n	1178 <__aeabi_ddiv+0xa0>
    1176:	e076      	b.n	1266 <__aeabi_ddiv+0x18e>
    1178:	2300      	movs	r3, #0
    117a:	469b      	mov	fp, r3
    117c:	4699      	mov	r9, r3
    117e:	3302      	adds	r3, #2
    1180:	2608      	movs	r6, #8
    1182:	9300      	str	r3, [sp, #0]
    1184:	e7ce      	b.n	1124 <__aeabi_ddiv+0x4c>
    1186:	4699      	mov	r9, r3
    1188:	4643      	mov	r3, r8
    118a:	46bb      	mov	fp, r7
    118c:	9301      	str	r3, [sp, #4]
    118e:	9100      	str	r1, [sp, #0]
    1190:	9b00      	ldr	r3, [sp, #0]
    1192:	2b02      	cmp	r3, #2
    1194:	d16b      	bne.n	126e <__aeabi_ddiv+0x196>
    1196:	9b01      	ldr	r3, [sp, #4]
    1198:	469a      	mov	sl, r3
    119a:	2100      	movs	r1, #0
    119c:	4653      	mov	r3, sl
    119e:	2201      	movs	r2, #1
    11a0:	2700      	movs	r7, #0
    11a2:	4689      	mov	r9, r1
    11a4:	401a      	ands	r2, r3
    11a6:	4b3c      	ldr	r3, [pc, #240]	; (1298 <__aeabi_ddiv+0x1c0>)
    11a8:	2100      	movs	r1, #0
    11aa:	033f      	lsls	r7, r7, #12
    11ac:	0d0c      	lsrs	r4, r1, #20
    11ae:	0524      	lsls	r4, r4, #20
    11b0:	0b3f      	lsrs	r7, r7, #12
    11b2:	4327      	orrs	r7, r4
    11b4:	4c3b      	ldr	r4, [pc, #236]	; (12a4 <__aeabi_ddiv+0x1cc>)
    11b6:	051b      	lsls	r3, r3, #20
    11b8:	4027      	ands	r7, r4
    11ba:	431f      	orrs	r7, r3
    11bc:	007f      	lsls	r7, r7, #1
    11be:	07d2      	lsls	r2, r2, #31
    11c0:	087f      	lsrs	r7, r7, #1
    11c2:	4317      	orrs	r7, r2
    11c4:	4648      	mov	r0, r9
    11c6:	1c39      	adds	r1, r7, #0
    11c8:	b007      	add	sp, #28
    11ca:	bc3c      	pop	{r2, r3, r4, r5}
    11cc:	4690      	mov	r8, r2
    11ce:	4699      	mov	r9, r3
    11d0:	46a2      	mov	sl, r4
    11d2:	46ab      	mov	fp, r5
    11d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11d6:	4303      	orrs	r3, r0
    11d8:	d03e      	beq.n	1258 <__aeabi_ddiv+0x180>
    11da:	465b      	mov	r3, fp
    11dc:	2b00      	cmp	r3, #0
    11de:	d100      	bne.n	11e2 <__aeabi_ddiv+0x10a>
    11e0:	e19c      	b.n	151c <__aeabi_ddiv+0x444>
    11e2:	4658      	mov	r0, fp
    11e4:	f000 fda8 	bl	1d38 <__clzsi2>
    11e8:	2328      	movs	r3, #40	; 0x28
    11ea:	1c31      	adds	r1, r6, #0
    11ec:	1a1b      	subs	r3, r3, r0
    11ee:	1c02      	adds	r2, r0, #0
    11f0:	465f      	mov	r7, fp
    11f2:	40d9      	lsrs	r1, r3
    11f4:	3a08      	subs	r2, #8
    11f6:	4097      	lsls	r7, r2
    11f8:	1c0b      	adds	r3, r1, #0
    11fa:	4096      	lsls	r6, r2
    11fc:	433b      	orrs	r3, r7
    11fe:	469b      	mov	fp, r3
    1200:	46b1      	mov	r9, r6
    1202:	2300      	movs	r3, #0
    1204:	4d28      	ldr	r5, [pc, #160]	; (12a8 <__aeabi_ddiv+0x1d0>)
    1206:	2600      	movs	r6, #0
    1208:	1a2d      	subs	r5, r5, r0
    120a:	9300      	str	r3, [sp, #0]
    120c:	e78a      	b.n	1124 <__aeabi_ddiv+0x4c>
    120e:	4652      	mov	r2, sl
    1210:	2103      	movs	r1, #3
    1212:	433a      	orrs	r2, r7
    1214:	d1a0      	bne.n	1158 <__aeabi_ddiv+0x80>
    1216:	2700      	movs	r7, #0
    1218:	2300      	movs	r3, #0
    121a:	2102      	movs	r1, #2
    121c:	e79c      	b.n	1158 <__aeabi_ddiv+0x80>
    121e:	4652      	mov	r2, sl
    1220:	433a      	orrs	r2, r7
    1222:	d015      	beq.n	1250 <__aeabi_ddiv+0x178>
    1224:	2f00      	cmp	r7, #0
    1226:	d100      	bne.n	122a <__aeabi_ddiv+0x152>
    1228:	e185      	b.n	1536 <__aeabi_ddiv+0x45e>
    122a:	1c38      	adds	r0, r7, #0
    122c:	f000 fd84 	bl	1d38 <__clzsi2>
    1230:	1c02      	adds	r2, r0, #0
    1232:	2128      	movs	r1, #40	; 0x28
    1234:	4650      	mov	r0, sl
    1236:	1a89      	subs	r1, r1, r2
    1238:	1c13      	adds	r3, r2, #0
    123a:	40c8      	lsrs	r0, r1
    123c:	4651      	mov	r1, sl
    123e:	3b08      	subs	r3, #8
    1240:	4099      	lsls	r1, r3
    1242:	409f      	lsls	r7, r3
    1244:	1c0b      	adds	r3, r1, #0
    1246:	4307      	orrs	r7, r0
    1248:	4817      	ldr	r0, [pc, #92]	; (12a8 <__aeabi_ddiv+0x1d0>)
    124a:	2100      	movs	r1, #0
    124c:	1a80      	subs	r0, r0, r2
    124e:	e783      	b.n	1158 <__aeabi_ddiv+0x80>
    1250:	2700      	movs	r7, #0
    1252:	2300      	movs	r3, #0
    1254:	2101      	movs	r1, #1
    1256:	e77f      	b.n	1158 <__aeabi_ddiv+0x80>
    1258:	2300      	movs	r3, #0
    125a:	469b      	mov	fp, r3
    125c:	4699      	mov	r9, r3
    125e:	3301      	adds	r3, #1
    1260:	2604      	movs	r6, #4
    1262:	9300      	str	r3, [sp, #0]
    1264:	e75e      	b.n	1124 <__aeabi_ddiv+0x4c>
    1266:	2303      	movs	r3, #3
    1268:	260c      	movs	r6, #12
    126a:	9300      	str	r3, [sp, #0]
    126c:	e75a      	b.n	1124 <__aeabi_ddiv+0x4c>
    126e:	2b03      	cmp	r3, #3
    1270:	d100      	bne.n	1274 <__aeabi_ddiv+0x19c>
    1272:	e23c      	b.n	16ee <__aeabi_ddiv+0x616>
    1274:	2b01      	cmp	r3, #1
    1276:	d000      	beq.n	127a <__aeabi_ddiv+0x1a2>
    1278:	e1bf      	b.n	15fa <__aeabi_ddiv+0x522>
    127a:	1c1a      	adds	r2, r3, #0
    127c:	9b01      	ldr	r3, [sp, #4]
    127e:	401a      	ands	r2, r3
    1280:	2100      	movs	r1, #0
    1282:	2300      	movs	r3, #0
    1284:	2700      	movs	r7, #0
    1286:	4689      	mov	r9, r1
    1288:	e78e      	b.n	11a8 <__aeabi_ddiv+0xd0>
    128a:	2300      	movs	r3, #0
    128c:	2780      	movs	r7, #128	; 0x80
    128e:	4699      	mov	r9, r3
    1290:	2200      	movs	r2, #0
    1292:	033f      	lsls	r7, r7, #12
    1294:	4b00      	ldr	r3, [pc, #0]	; (1298 <__aeabi_ddiv+0x1c0>)
    1296:	e787      	b.n	11a8 <__aeabi_ddiv+0xd0>
    1298:	000007ff 	.word	0x000007ff
    129c:	fffffc01 	.word	0xfffffc01
    12a0:	00001e80 	.word	0x00001e80
    12a4:	800fffff 	.word	0x800fffff
    12a8:	fffffc0d 	.word	0xfffffc0d
    12ac:	45bb      	cmp	fp, r7
    12ae:	d900      	bls.n	12b2 <__aeabi_ddiv+0x1da>
    12b0:	e151      	b.n	1556 <__aeabi_ddiv+0x47e>
    12b2:	d100      	bne.n	12b6 <__aeabi_ddiv+0x1de>
    12b4:	e14c      	b.n	1550 <__aeabi_ddiv+0x478>
    12b6:	464a      	mov	r2, r9
    12b8:	9203      	str	r2, [sp, #12]
    12ba:	2200      	movs	r2, #0
    12bc:	465c      	mov	r4, fp
    12be:	4690      	mov	r8, r2
    12c0:	3d01      	subs	r5, #1
    12c2:	0e18      	lsrs	r0, r3, #24
    12c4:	023f      	lsls	r7, r7, #8
    12c6:	4338      	orrs	r0, r7
    12c8:	021b      	lsls	r3, r3, #8
    12ca:	9301      	str	r3, [sp, #4]
    12cc:	0c03      	lsrs	r3, r0, #16
    12ce:	4699      	mov	r9, r3
    12d0:	0403      	lsls	r3, r0, #16
    12d2:	0c1b      	lsrs	r3, r3, #16
    12d4:	4649      	mov	r1, r9
    12d6:	1c06      	adds	r6, r0, #0
    12d8:	1c20      	adds	r0, r4, #0
    12da:	1c1f      	adds	r7, r3, #0
    12dc:	9300      	str	r3, [sp, #0]
    12de:	f7ff fd79 	bl	dd4 <__aeabi_uidiv>
    12e2:	1c02      	adds	r2, r0, #0
    12e4:	437a      	muls	r2, r7
    12e6:	9002      	str	r0, [sp, #8]
    12e8:	4649      	mov	r1, r9
    12ea:	1c20      	adds	r0, r4, #0
    12ec:	1c17      	adds	r7, r2, #0
    12ee:	f7ff fdf7 	bl	ee0 <__aeabi_uidivmod>
    12f2:	9b03      	ldr	r3, [sp, #12]
    12f4:	0409      	lsls	r1, r1, #16
    12f6:	0c1b      	lsrs	r3, r3, #16
    12f8:	4319      	orrs	r1, r3
    12fa:	428f      	cmp	r7, r1
    12fc:	d90c      	bls.n	1318 <__aeabi_ddiv+0x240>
    12fe:	9b02      	ldr	r3, [sp, #8]
    1300:	1989      	adds	r1, r1, r6
    1302:	3b01      	subs	r3, #1
    1304:	428e      	cmp	r6, r1
    1306:	d900      	bls.n	130a <__aeabi_ddiv+0x232>
    1308:	e152      	b.n	15b0 <__aeabi_ddiv+0x4d8>
    130a:	428f      	cmp	r7, r1
    130c:	d800      	bhi.n	1310 <__aeabi_ddiv+0x238>
    130e:	e14f      	b.n	15b0 <__aeabi_ddiv+0x4d8>
    1310:	9b02      	ldr	r3, [sp, #8]
    1312:	1989      	adds	r1, r1, r6
    1314:	3b02      	subs	r3, #2
    1316:	9302      	str	r3, [sp, #8]
    1318:	1bcc      	subs	r4, r1, r7
    131a:	1c20      	adds	r0, r4, #0
    131c:	4649      	mov	r1, r9
    131e:	f7ff fd59 	bl	dd4 <__aeabi_uidiv>
    1322:	9f00      	ldr	r7, [sp, #0]
    1324:	4683      	mov	fp, r0
    1326:	4347      	muls	r7, r0
    1328:	4649      	mov	r1, r9
    132a:	1c20      	adds	r0, r4, #0
    132c:	f7ff fdd8 	bl	ee0 <__aeabi_uidivmod>
    1330:	9a03      	ldr	r2, [sp, #12]
    1332:	040b      	lsls	r3, r1, #16
    1334:	0414      	lsls	r4, r2, #16
    1336:	0c24      	lsrs	r4, r4, #16
    1338:	4323      	orrs	r3, r4
    133a:	429f      	cmp	r7, r3
    133c:	d90d      	bls.n	135a <__aeabi_ddiv+0x282>
    133e:	465a      	mov	r2, fp
    1340:	199b      	adds	r3, r3, r6
    1342:	3a01      	subs	r2, #1
    1344:	429e      	cmp	r6, r3
    1346:	d900      	bls.n	134a <__aeabi_ddiv+0x272>
    1348:	e130      	b.n	15ac <__aeabi_ddiv+0x4d4>
    134a:	429f      	cmp	r7, r3
    134c:	d800      	bhi.n	1350 <__aeabi_ddiv+0x278>
    134e:	e12d      	b.n	15ac <__aeabi_ddiv+0x4d4>
    1350:	2202      	movs	r2, #2
    1352:	4252      	negs	r2, r2
    1354:	4694      	mov	ip, r2
    1356:	199b      	adds	r3, r3, r6
    1358:	44e3      	add	fp, ip
    135a:	9a02      	ldr	r2, [sp, #8]
    135c:	1bdb      	subs	r3, r3, r7
    135e:	0417      	lsls	r7, r2, #16
    1360:	465a      	mov	r2, fp
    1362:	433a      	orrs	r2, r7
    1364:	4693      	mov	fp, r2
    1366:	9c01      	ldr	r4, [sp, #4]
    1368:	0c17      	lsrs	r7, r2, #16
    136a:	0c22      	lsrs	r2, r4, #16
    136c:	1c10      	adds	r0, r2, #0
    136e:	9204      	str	r2, [sp, #16]
    1370:	465a      	mov	r2, fp
    1372:	0411      	lsls	r1, r2, #16
    1374:	0422      	lsls	r2, r4, #16
    1376:	0c12      	lsrs	r2, r2, #16
    1378:	1c14      	adds	r4, r2, #0
    137a:	0c09      	lsrs	r1, r1, #16
    137c:	437c      	muls	r4, r7
    137e:	9205      	str	r2, [sp, #20]
    1380:	434a      	muls	r2, r1
    1382:	4341      	muls	r1, r0
    1384:	4347      	muls	r7, r0
    1386:	1861      	adds	r1, r4, r1
    1388:	0c10      	lsrs	r0, r2, #16
    138a:	1809      	adds	r1, r1, r0
    138c:	428c      	cmp	r4, r1
    138e:	d903      	bls.n	1398 <__aeabi_ddiv+0x2c0>
    1390:	2080      	movs	r0, #128	; 0x80
    1392:	0240      	lsls	r0, r0, #9
    1394:	4684      	mov	ip, r0
    1396:	4467      	add	r7, ip
    1398:	0c0c      	lsrs	r4, r1, #16
    139a:	0412      	lsls	r2, r2, #16
    139c:	0408      	lsls	r0, r1, #16
    139e:	0c12      	lsrs	r2, r2, #16
    13a0:	193c      	adds	r4, r7, r4
    13a2:	1881      	adds	r1, r0, r2
    13a4:	42a3      	cmp	r3, r4
    13a6:	d200      	bcs.n	13aa <__aeabi_ddiv+0x2d2>
    13a8:	e0e5      	b.n	1576 <__aeabi_ddiv+0x49e>
    13aa:	d100      	bne.n	13ae <__aeabi_ddiv+0x2d6>
    13ac:	e0df      	b.n	156e <__aeabi_ddiv+0x496>
    13ae:	1b1f      	subs	r7, r3, r4
    13b0:	4643      	mov	r3, r8
    13b2:	1a5c      	subs	r4, r3, r1
    13b4:	45a0      	cmp	r8, r4
    13b6:	4192      	sbcs	r2, r2
    13b8:	4252      	negs	r2, r2
    13ba:	1abf      	subs	r7, r7, r2
    13bc:	42b7      	cmp	r7, r6
    13be:	d100      	bne.n	13c2 <__aeabi_ddiv+0x2ea>
    13c0:	e10e      	b.n	15e0 <__aeabi_ddiv+0x508>
    13c2:	1c38      	adds	r0, r7, #0
    13c4:	4649      	mov	r1, r9
    13c6:	f7ff fd05 	bl	dd4 <__aeabi_uidiv>
    13ca:	9b00      	ldr	r3, [sp, #0]
    13cc:	9002      	str	r0, [sp, #8]
    13ce:	4343      	muls	r3, r0
    13d0:	4649      	mov	r1, r9
    13d2:	1c38      	adds	r0, r7, #0
    13d4:	4698      	mov	r8, r3
    13d6:	f7ff fd83 	bl	ee0 <__aeabi_uidivmod>
    13da:	0c23      	lsrs	r3, r4, #16
    13dc:	040f      	lsls	r7, r1, #16
    13de:	431f      	orrs	r7, r3
    13e0:	45b8      	cmp	r8, r7
    13e2:	d90c      	bls.n	13fe <__aeabi_ddiv+0x326>
    13e4:	9b02      	ldr	r3, [sp, #8]
    13e6:	19bf      	adds	r7, r7, r6
    13e8:	3b01      	subs	r3, #1
    13ea:	42be      	cmp	r6, r7
    13ec:	d900      	bls.n	13f0 <__aeabi_ddiv+0x318>
    13ee:	e0fb      	b.n	15e8 <__aeabi_ddiv+0x510>
    13f0:	45b8      	cmp	r8, r7
    13f2:	d800      	bhi.n	13f6 <__aeabi_ddiv+0x31e>
    13f4:	e0f8      	b.n	15e8 <__aeabi_ddiv+0x510>
    13f6:	9b02      	ldr	r3, [sp, #8]
    13f8:	19bf      	adds	r7, r7, r6
    13fa:	3b02      	subs	r3, #2
    13fc:	9302      	str	r3, [sp, #8]
    13fe:	4643      	mov	r3, r8
    1400:	1aff      	subs	r7, r7, r3
    1402:	4649      	mov	r1, r9
    1404:	1c38      	adds	r0, r7, #0
    1406:	f7ff fce5 	bl	dd4 <__aeabi_uidiv>
    140a:	9b00      	ldr	r3, [sp, #0]
    140c:	9003      	str	r0, [sp, #12]
    140e:	4343      	muls	r3, r0
    1410:	4649      	mov	r1, r9
    1412:	1c38      	adds	r0, r7, #0
    1414:	4698      	mov	r8, r3
    1416:	f7ff fd63 	bl	ee0 <__aeabi_uidivmod>
    141a:	0424      	lsls	r4, r4, #16
    141c:	0409      	lsls	r1, r1, #16
    141e:	0c24      	lsrs	r4, r4, #16
    1420:	4321      	orrs	r1, r4
    1422:	4588      	cmp	r8, r1
    1424:	d90c      	bls.n	1440 <__aeabi_ddiv+0x368>
    1426:	9b03      	ldr	r3, [sp, #12]
    1428:	1989      	adds	r1, r1, r6
    142a:	3b01      	subs	r3, #1
    142c:	428e      	cmp	r6, r1
    142e:	d900      	bls.n	1432 <__aeabi_ddiv+0x35a>
    1430:	e0dc      	b.n	15ec <__aeabi_ddiv+0x514>
    1432:	4588      	cmp	r8, r1
    1434:	d800      	bhi.n	1438 <__aeabi_ddiv+0x360>
    1436:	e0d9      	b.n	15ec <__aeabi_ddiv+0x514>
    1438:	9b03      	ldr	r3, [sp, #12]
    143a:	1989      	adds	r1, r1, r6
    143c:	3b02      	subs	r3, #2
    143e:	9303      	str	r3, [sp, #12]
    1440:	4643      	mov	r3, r8
    1442:	1ac9      	subs	r1, r1, r3
    1444:	9b02      	ldr	r3, [sp, #8]
    1446:	9a03      	ldr	r2, [sp, #12]
    1448:	041b      	lsls	r3, r3, #16
    144a:	9c05      	ldr	r4, [sp, #20]
    144c:	431a      	orrs	r2, r3
    144e:	0c10      	lsrs	r0, r2, #16
    1450:	0413      	lsls	r3, r2, #16
    1452:	4691      	mov	r9, r2
    1454:	1c22      	adds	r2, r4, #0
    1456:	9f04      	ldr	r7, [sp, #16]
    1458:	0c1b      	lsrs	r3, r3, #16
    145a:	435a      	muls	r2, r3
    145c:	4344      	muls	r4, r0
    145e:	437b      	muls	r3, r7
    1460:	4378      	muls	r0, r7
    1462:	18e3      	adds	r3, r4, r3
    1464:	0c17      	lsrs	r7, r2, #16
    1466:	19db      	adds	r3, r3, r7
    1468:	429c      	cmp	r4, r3
    146a:	d903      	bls.n	1474 <__aeabi_ddiv+0x39c>
    146c:	2480      	movs	r4, #128	; 0x80
    146e:	0264      	lsls	r4, r4, #9
    1470:	46a4      	mov	ip, r4
    1472:	4460      	add	r0, ip
    1474:	0c1c      	lsrs	r4, r3, #16
    1476:	0412      	lsls	r2, r2, #16
    1478:	041b      	lsls	r3, r3, #16
    147a:	0c12      	lsrs	r2, r2, #16
    147c:	1900      	adds	r0, r0, r4
    147e:	189b      	adds	r3, r3, r2
    1480:	4281      	cmp	r1, r0
    1482:	d200      	bcs.n	1486 <__aeabi_ddiv+0x3ae>
    1484:	e096      	b.n	15b4 <__aeabi_ddiv+0x4dc>
    1486:	d100      	bne.n	148a <__aeabi_ddiv+0x3b2>
    1488:	e0fc      	b.n	1684 <__aeabi_ddiv+0x5ac>
    148a:	464a      	mov	r2, r9
    148c:	2301      	movs	r3, #1
    148e:	431a      	orrs	r2, r3
    1490:	4691      	mov	r9, r2
    1492:	4b9b      	ldr	r3, [pc, #620]	; (1700 <__aeabi_ddiv+0x628>)
    1494:	18eb      	adds	r3, r5, r3
    1496:	2b00      	cmp	r3, #0
    1498:	dc00      	bgt.n	149c <__aeabi_ddiv+0x3c4>
    149a:	e099      	b.n	15d0 <__aeabi_ddiv+0x4f8>
    149c:	464a      	mov	r2, r9
    149e:	0752      	lsls	r2, r2, #29
    14a0:	d00a      	beq.n	14b8 <__aeabi_ddiv+0x3e0>
    14a2:	220f      	movs	r2, #15
    14a4:	4649      	mov	r1, r9
    14a6:	400a      	ands	r2, r1
    14a8:	2a04      	cmp	r2, #4
    14aa:	d005      	beq.n	14b8 <__aeabi_ddiv+0x3e0>
    14ac:	3104      	adds	r1, #4
    14ae:	4549      	cmp	r1, r9
    14b0:	4192      	sbcs	r2, r2
    14b2:	4689      	mov	r9, r1
    14b4:	4252      	negs	r2, r2
    14b6:	4493      	add	fp, r2
    14b8:	465a      	mov	r2, fp
    14ba:	01d2      	lsls	r2, r2, #7
    14bc:	d506      	bpl.n	14cc <__aeabi_ddiv+0x3f4>
    14be:	465a      	mov	r2, fp
    14c0:	4b90      	ldr	r3, [pc, #576]	; (1704 <__aeabi_ddiv+0x62c>)
    14c2:	401a      	ands	r2, r3
    14c4:	2380      	movs	r3, #128	; 0x80
    14c6:	4693      	mov	fp, r2
    14c8:	00db      	lsls	r3, r3, #3
    14ca:	18eb      	adds	r3, r5, r3
    14cc:	4a8e      	ldr	r2, [pc, #568]	; (1708 <__aeabi_ddiv+0x630>)
    14ce:	4293      	cmp	r3, r2
    14d0:	dd00      	ble.n	14d4 <__aeabi_ddiv+0x3fc>
    14d2:	e662      	b.n	119a <__aeabi_ddiv+0xc2>
    14d4:	464a      	mov	r2, r9
    14d6:	4659      	mov	r1, fp
    14d8:	08d2      	lsrs	r2, r2, #3
    14da:	0749      	lsls	r1, r1, #29
    14dc:	4311      	orrs	r1, r2
    14de:	465a      	mov	r2, fp
    14e0:	4689      	mov	r9, r1
    14e2:	0257      	lsls	r7, r2, #9
    14e4:	4651      	mov	r1, sl
    14e6:	2201      	movs	r2, #1
    14e8:	055b      	lsls	r3, r3, #21
    14ea:	0b3f      	lsrs	r7, r7, #12
    14ec:	0d5b      	lsrs	r3, r3, #21
    14ee:	400a      	ands	r2, r1
    14f0:	e65a      	b.n	11a8 <__aeabi_ddiv+0xd0>
    14f2:	2080      	movs	r0, #128	; 0x80
    14f4:	465a      	mov	r2, fp
    14f6:	0300      	lsls	r0, r0, #12
    14f8:	4202      	tst	r2, r0
    14fa:	d008      	beq.n	150e <__aeabi_ddiv+0x436>
    14fc:	4207      	tst	r7, r0
    14fe:	d106      	bne.n	150e <__aeabi_ddiv+0x436>
    1500:	4307      	orrs	r7, r0
    1502:	033f      	lsls	r7, r7, #12
    1504:	4699      	mov	r9, r3
    1506:	0b3f      	lsrs	r7, r7, #12
    1508:	4642      	mov	r2, r8
    150a:	4b80      	ldr	r3, [pc, #512]	; (170c <__aeabi_ddiv+0x634>)
    150c:	e64c      	b.n	11a8 <__aeabi_ddiv+0xd0>
    150e:	465f      	mov	r7, fp
    1510:	4307      	orrs	r7, r0
    1512:	033f      	lsls	r7, r7, #12
    1514:	0b3f      	lsrs	r7, r7, #12
    1516:	1c22      	adds	r2, r4, #0
    1518:	4b7c      	ldr	r3, [pc, #496]	; (170c <__aeabi_ddiv+0x634>)
    151a:	e645      	b.n	11a8 <__aeabi_ddiv+0xd0>
    151c:	f000 fc0c 	bl	1d38 <__clzsi2>
    1520:	1c03      	adds	r3, r0, #0
    1522:	3020      	adds	r0, #32
    1524:	2827      	cmp	r0, #39	; 0x27
    1526:	dc00      	bgt.n	152a <__aeabi_ddiv+0x452>
    1528:	e65e      	b.n	11e8 <__aeabi_ddiv+0x110>
    152a:	3b08      	subs	r3, #8
    152c:	409e      	lsls	r6, r3
    152e:	2300      	movs	r3, #0
    1530:	46b3      	mov	fp, r6
    1532:	4699      	mov	r9, r3
    1534:	e665      	b.n	1202 <__aeabi_ddiv+0x12a>
    1536:	4650      	mov	r0, sl
    1538:	f000 fbfe 	bl	1d38 <__clzsi2>
    153c:	1c02      	adds	r2, r0, #0
    153e:	3220      	adds	r2, #32
    1540:	2a27      	cmp	r2, #39	; 0x27
    1542:	dc00      	bgt.n	1546 <__aeabi_ddiv+0x46e>
    1544:	e675      	b.n	1232 <__aeabi_ddiv+0x15a>
    1546:	4657      	mov	r7, sl
    1548:	3808      	subs	r0, #8
    154a:	4087      	lsls	r7, r0
    154c:	2300      	movs	r3, #0
    154e:	e67b      	b.n	1248 <__aeabi_ddiv+0x170>
    1550:	4599      	cmp	r9, r3
    1552:	d200      	bcs.n	1556 <__aeabi_ddiv+0x47e>
    1554:	e6af      	b.n	12b6 <__aeabi_ddiv+0x1de>
    1556:	465a      	mov	r2, fp
    1558:	4659      	mov	r1, fp
    155a:	0854      	lsrs	r4, r2, #1
    155c:	464a      	mov	r2, r9
    155e:	07c8      	lsls	r0, r1, #31
    1560:	0852      	lsrs	r2, r2, #1
    1562:	4302      	orrs	r2, r0
    1564:	9203      	str	r2, [sp, #12]
    1566:	464a      	mov	r2, r9
    1568:	07d2      	lsls	r2, r2, #31
    156a:	4690      	mov	r8, r2
    156c:	e6a9      	b.n	12c2 <__aeabi_ddiv+0x1ea>
    156e:	2700      	movs	r7, #0
    1570:	4588      	cmp	r8, r1
    1572:	d300      	bcc.n	1576 <__aeabi_ddiv+0x49e>
    1574:	e71c      	b.n	13b0 <__aeabi_ddiv+0x2d8>
    1576:	9f01      	ldr	r7, [sp, #4]
    1578:	465a      	mov	r2, fp
    157a:	46bc      	mov	ip, r7
    157c:	44e0      	add	r8, ip
    157e:	45b8      	cmp	r8, r7
    1580:	41bf      	sbcs	r7, r7
    1582:	427f      	negs	r7, r7
    1584:	19bf      	adds	r7, r7, r6
    1586:	18ff      	adds	r7, r7, r3
    1588:	3a01      	subs	r2, #1
    158a:	42be      	cmp	r6, r7
    158c:	d206      	bcs.n	159c <__aeabi_ddiv+0x4c4>
    158e:	42bc      	cmp	r4, r7
    1590:	d85f      	bhi.n	1652 <__aeabi_ddiv+0x57a>
    1592:	d100      	bne.n	1596 <__aeabi_ddiv+0x4be>
    1594:	e09f      	b.n	16d6 <__aeabi_ddiv+0x5fe>
    1596:	1b3f      	subs	r7, r7, r4
    1598:	4693      	mov	fp, r2
    159a:	e709      	b.n	13b0 <__aeabi_ddiv+0x2d8>
    159c:	42b7      	cmp	r7, r6
    159e:	d1fa      	bne.n	1596 <__aeabi_ddiv+0x4be>
    15a0:	9b01      	ldr	r3, [sp, #4]
    15a2:	4543      	cmp	r3, r8
    15a4:	d9f3      	bls.n	158e <__aeabi_ddiv+0x4b6>
    15a6:	1b37      	subs	r7, r6, r4
    15a8:	4693      	mov	fp, r2
    15aa:	e701      	b.n	13b0 <__aeabi_ddiv+0x2d8>
    15ac:	4693      	mov	fp, r2
    15ae:	e6d4      	b.n	135a <__aeabi_ddiv+0x282>
    15b0:	9302      	str	r3, [sp, #8]
    15b2:	e6b1      	b.n	1318 <__aeabi_ddiv+0x240>
    15b4:	464a      	mov	r2, r9
    15b6:	1989      	adds	r1, r1, r6
    15b8:	3a01      	subs	r2, #1
    15ba:	428e      	cmp	r6, r1
    15bc:	d918      	bls.n	15f0 <__aeabi_ddiv+0x518>
    15be:	4691      	mov	r9, r2
    15c0:	4281      	cmp	r1, r0
    15c2:	d000      	beq.n	15c6 <__aeabi_ddiv+0x4ee>
    15c4:	e761      	b.n	148a <__aeabi_ddiv+0x3b2>
    15c6:	9a01      	ldr	r2, [sp, #4]
    15c8:	429a      	cmp	r2, r3
    15ca:	d000      	beq.n	15ce <__aeabi_ddiv+0x4f6>
    15cc:	e75d      	b.n	148a <__aeabi_ddiv+0x3b2>
    15ce:	e760      	b.n	1492 <__aeabi_ddiv+0x3ba>
    15d0:	4f4f      	ldr	r7, [pc, #316]	; (1710 <__aeabi_ddiv+0x638>)
    15d2:	1b7f      	subs	r7, r7, r5
    15d4:	2f38      	cmp	r7, #56	; 0x38
    15d6:	dd13      	ble.n	1600 <__aeabi_ddiv+0x528>
    15d8:	2201      	movs	r2, #1
    15da:	4653      	mov	r3, sl
    15dc:	401a      	ands	r2, r3
    15de:	e64f      	b.n	1280 <__aeabi_ddiv+0x1a8>
    15e0:	2301      	movs	r3, #1
    15e2:	425b      	negs	r3, r3
    15e4:	4699      	mov	r9, r3
    15e6:	e754      	b.n	1492 <__aeabi_ddiv+0x3ba>
    15e8:	9302      	str	r3, [sp, #8]
    15ea:	e708      	b.n	13fe <__aeabi_ddiv+0x326>
    15ec:	9303      	str	r3, [sp, #12]
    15ee:	e727      	b.n	1440 <__aeabi_ddiv+0x368>
    15f0:	4288      	cmp	r0, r1
    15f2:	d83c      	bhi.n	166e <__aeabi_ddiv+0x596>
    15f4:	d074      	beq.n	16e0 <__aeabi_ddiv+0x608>
    15f6:	4691      	mov	r9, r2
    15f8:	e747      	b.n	148a <__aeabi_ddiv+0x3b2>
    15fa:	9b01      	ldr	r3, [sp, #4]
    15fc:	469a      	mov	sl, r3
    15fe:	e748      	b.n	1492 <__aeabi_ddiv+0x3ba>
    1600:	2f1f      	cmp	r7, #31
    1602:	dc44      	bgt.n	168e <__aeabi_ddiv+0x5b6>
    1604:	4b43      	ldr	r3, [pc, #268]	; (1714 <__aeabi_ddiv+0x63c>)
    1606:	464a      	mov	r2, r9
    1608:	469c      	mov	ip, r3
    160a:	465b      	mov	r3, fp
    160c:	4465      	add	r5, ip
    160e:	40fa      	lsrs	r2, r7
    1610:	40ab      	lsls	r3, r5
    1612:	4313      	orrs	r3, r2
    1614:	464a      	mov	r2, r9
    1616:	40aa      	lsls	r2, r5
    1618:	1c15      	adds	r5, r2, #0
    161a:	1e6a      	subs	r2, r5, #1
    161c:	4195      	sbcs	r5, r2
    161e:	465a      	mov	r2, fp
    1620:	40fa      	lsrs	r2, r7
    1622:	432b      	orrs	r3, r5
    1624:	1c17      	adds	r7, r2, #0
    1626:	075a      	lsls	r2, r3, #29
    1628:	d009      	beq.n	163e <__aeabi_ddiv+0x566>
    162a:	220f      	movs	r2, #15
    162c:	401a      	ands	r2, r3
    162e:	2a04      	cmp	r2, #4
    1630:	d005      	beq.n	163e <__aeabi_ddiv+0x566>
    1632:	1d1a      	adds	r2, r3, #4
    1634:	429a      	cmp	r2, r3
    1636:	419b      	sbcs	r3, r3
    1638:	425b      	negs	r3, r3
    163a:	18ff      	adds	r7, r7, r3
    163c:	1c13      	adds	r3, r2, #0
    163e:	023a      	lsls	r2, r7, #8
    1640:	d53e      	bpl.n	16c0 <__aeabi_ddiv+0x5e8>
    1642:	4653      	mov	r3, sl
    1644:	2201      	movs	r2, #1
    1646:	2100      	movs	r1, #0
    1648:	401a      	ands	r2, r3
    164a:	2700      	movs	r7, #0
    164c:	2301      	movs	r3, #1
    164e:	4689      	mov	r9, r1
    1650:	e5aa      	b.n	11a8 <__aeabi_ddiv+0xd0>
    1652:	2302      	movs	r3, #2
    1654:	425b      	negs	r3, r3
    1656:	469c      	mov	ip, r3
    1658:	9a01      	ldr	r2, [sp, #4]
    165a:	44e3      	add	fp, ip
    165c:	4694      	mov	ip, r2
    165e:	44e0      	add	r8, ip
    1660:	4590      	cmp	r8, r2
    1662:	419b      	sbcs	r3, r3
    1664:	425b      	negs	r3, r3
    1666:	199b      	adds	r3, r3, r6
    1668:	19df      	adds	r7, r3, r7
    166a:	1b3f      	subs	r7, r7, r4
    166c:	e6a0      	b.n	13b0 <__aeabi_ddiv+0x2d8>
    166e:	9f01      	ldr	r7, [sp, #4]
    1670:	464a      	mov	r2, r9
    1672:	007c      	lsls	r4, r7, #1
    1674:	42bc      	cmp	r4, r7
    1676:	41bf      	sbcs	r7, r7
    1678:	427f      	negs	r7, r7
    167a:	19bf      	adds	r7, r7, r6
    167c:	3a02      	subs	r2, #2
    167e:	19c9      	adds	r1, r1, r7
    1680:	9401      	str	r4, [sp, #4]
    1682:	e79c      	b.n	15be <__aeabi_ddiv+0x4e6>
    1684:	2b00      	cmp	r3, #0
    1686:	d195      	bne.n	15b4 <__aeabi_ddiv+0x4dc>
    1688:	2200      	movs	r2, #0
    168a:	9201      	str	r2, [sp, #4]
    168c:	e79b      	b.n	15c6 <__aeabi_ddiv+0x4ee>
    168e:	465a      	mov	r2, fp
    1690:	4b21      	ldr	r3, [pc, #132]	; (1718 <__aeabi_ddiv+0x640>)
    1692:	1b5b      	subs	r3, r3, r5
    1694:	40da      	lsrs	r2, r3
    1696:	2f20      	cmp	r7, #32
    1698:	d027      	beq.n	16ea <__aeabi_ddiv+0x612>
    169a:	4b20      	ldr	r3, [pc, #128]	; (171c <__aeabi_ddiv+0x644>)
    169c:	469c      	mov	ip, r3
    169e:	465b      	mov	r3, fp
    16a0:	4465      	add	r5, ip
    16a2:	40ab      	lsls	r3, r5
    16a4:	4649      	mov	r1, r9
    16a6:	430b      	orrs	r3, r1
    16a8:	1e59      	subs	r1, r3, #1
    16aa:	418b      	sbcs	r3, r1
    16ac:	4313      	orrs	r3, r2
    16ae:	2207      	movs	r2, #7
    16b0:	2700      	movs	r7, #0
    16b2:	401a      	ands	r2, r3
    16b4:	d007      	beq.n	16c6 <__aeabi_ddiv+0x5ee>
    16b6:	220f      	movs	r2, #15
    16b8:	2700      	movs	r7, #0
    16ba:	401a      	ands	r2, r3
    16bc:	2a04      	cmp	r2, #4
    16be:	d1b8      	bne.n	1632 <__aeabi_ddiv+0x55a>
    16c0:	077a      	lsls	r2, r7, #29
    16c2:	027f      	lsls	r7, r7, #9
    16c4:	0b3f      	lsrs	r7, r7, #12
    16c6:	08db      	lsrs	r3, r3, #3
    16c8:	4313      	orrs	r3, r2
    16ca:	4699      	mov	r9, r3
    16cc:	2201      	movs	r2, #1
    16ce:	4653      	mov	r3, sl
    16d0:	401a      	ands	r2, r3
    16d2:	2300      	movs	r3, #0
    16d4:	e568      	b.n	11a8 <__aeabi_ddiv+0xd0>
    16d6:	4541      	cmp	r1, r8
    16d8:	d8bb      	bhi.n	1652 <__aeabi_ddiv+0x57a>
    16da:	4693      	mov	fp, r2
    16dc:	2700      	movs	r7, #0
    16de:	e667      	b.n	13b0 <__aeabi_ddiv+0x2d8>
    16e0:	9c01      	ldr	r4, [sp, #4]
    16e2:	429c      	cmp	r4, r3
    16e4:	d3c3      	bcc.n	166e <__aeabi_ddiv+0x596>
    16e6:	4691      	mov	r9, r2
    16e8:	e76d      	b.n	15c6 <__aeabi_ddiv+0x4ee>
    16ea:	2300      	movs	r3, #0
    16ec:	e7da      	b.n	16a4 <__aeabi_ddiv+0x5cc>
    16ee:	2780      	movs	r7, #128	; 0x80
    16f0:	465b      	mov	r3, fp
    16f2:	033f      	lsls	r7, r7, #12
    16f4:	431f      	orrs	r7, r3
    16f6:	033f      	lsls	r7, r7, #12
    16f8:	0b3f      	lsrs	r7, r7, #12
    16fa:	9a01      	ldr	r2, [sp, #4]
    16fc:	4b03      	ldr	r3, [pc, #12]	; (170c <__aeabi_ddiv+0x634>)
    16fe:	e553      	b.n	11a8 <__aeabi_ddiv+0xd0>
    1700:	000003ff 	.word	0x000003ff
    1704:	feffffff 	.word	0xfeffffff
    1708:	000007fe 	.word	0x000007fe
    170c:	000007ff 	.word	0x000007ff
    1710:	fffffc02 	.word	0xfffffc02
    1714:	0000041e 	.word	0x0000041e
    1718:	fffffbe2 	.word	0xfffffbe2
    171c:	0000043e 	.word	0x0000043e

00001720 <__aeabi_dmul>:
    1720:	b5f0      	push	{r4, r5, r6, r7, lr}
    1722:	465f      	mov	r7, fp
    1724:	4656      	mov	r6, sl
    1726:	464d      	mov	r5, r9
    1728:	4644      	mov	r4, r8
    172a:	b4f0      	push	{r4, r5, r6, r7}
    172c:	1c05      	adds	r5, r0, #0
    172e:	1c06      	adds	r6, r0, #0
    1730:	0308      	lsls	r0, r1, #12
    1732:	b087      	sub	sp, #28
    1734:	4699      	mov	r9, r3
    1736:	004f      	lsls	r7, r1, #1
    1738:	0b03      	lsrs	r3, r0, #12
    173a:	0fcc      	lsrs	r4, r1, #31
    173c:	4692      	mov	sl, r2
    173e:	469b      	mov	fp, r3
    1740:	0d7f      	lsrs	r7, r7, #21
    1742:	9401      	str	r4, [sp, #4]
    1744:	d067      	beq.n	1816 <__aeabi_dmul+0xf6>
    1746:	4b6c      	ldr	r3, [pc, #432]	; (18f8 <__aeabi_dmul+0x1d8>)
    1748:	429f      	cmp	r7, r3
    174a:	d036      	beq.n	17ba <__aeabi_dmul+0x9a>
    174c:	2080      	movs	r0, #128	; 0x80
    174e:	465b      	mov	r3, fp
    1750:	0340      	lsls	r0, r0, #13
    1752:	4318      	orrs	r0, r3
    1754:	00c0      	lsls	r0, r0, #3
    1756:	0f6b      	lsrs	r3, r5, #29
    1758:	4318      	orrs	r0, r3
    175a:	4b68      	ldr	r3, [pc, #416]	; (18fc <__aeabi_dmul+0x1dc>)
    175c:	4683      	mov	fp, r0
    175e:	469c      	mov	ip, r3
    1760:	2300      	movs	r3, #0
    1762:	4698      	mov	r8, r3
    1764:	00ee      	lsls	r6, r5, #3
    1766:	4467      	add	r7, ip
    1768:	9300      	str	r3, [sp, #0]
    176a:	464b      	mov	r3, r9
    176c:	4649      	mov	r1, r9
    176e:	031d      	lsls	r5, r3, #12
    1770:	0fc9      	lsrs	r1, r1, #31
    1772:	005b      	lsls	r3, r3, #1
    1774:	4652      	mov	r2, sl
    1776:	0b2d      	lsrs	r5, r5, #12
    1778:	0d5b      	lsrs	r3, r3, #21
    177a:	4689      	mov	r9, r1
    177c:	d100      	bne.n	1780 <__aeabi_dmul+0x60>
    177e:	e06e      	b.n	185e <__aeabi_dmul+0x13e>
    1780:	495d      	ldr	r1, [pc, #372]	; (18f8 <__aeabi_dmul+0x1d8>)
    1782:	428b      	cmp	r3, r1
    1784:	d064      	beq.n	1850 <__aeabi_dmul+0x130>
    1786:	2080      	movs	r0, #128	; 0x80
    1788:	495c      	ldr	r1, [pc, #368]	; (18fc <__aeabi_dmul+0x1dc>)
    178a:	0340      	lsls	r0, r0, #13
    178c:	468c      	mov	ip, r1
    178e:	2100      	movs	r1, #0
    1790:	4305      	orrs	r5, r0
    1792:	00ed      	lsls	r5, r5, #3
    1794:	0f50      	lsrs	r0, r2, #29
    1796:	4305      	orrs	r5, r0
    1798:	00d2      	lsls	r2, r2, #3
    179a:	4463      	add	r3, ip
    179c:	4648      	mov	r0, r9
    179e:	18ff      	adds	r7, r7, r3
    17a0:	1c7b      	adds	r3, r7, #1
    17a2:	469a      	mov	sl, r3
    17a4:	9b00      	ldr	r3, [sp, #0]
    17a6:	4060      	eors	r0, r4
    17a8:	9002      	str	r0, [sp, #8]
    17aa:	430b      	orrs	r3, r1
    17ac:	2b0f      	cmp	r3, #15
    17ae:	d900      	bls.n	17b2 <__aeabi_dmul+0x92>
    17b0:	e0ac      	b.n	190c <__aeabi_dmul+0x1ec>
    17b2:	4853      	ldr	r0, [pc, #332]	; (1900 <__aeabi_dmul+0x1e0>)
    17b4:	009b      	lsls	r3, r3, #2
    17b6:	58c3      	ldr	r3, [r0, r3]
    17b8:	469f      	mov	pc, r3
    17ba:	465b      	mov	r3, fp
    17bc:	431d      	orrs	r5, r3
    17be:	d000      	beq.n	17c2 <__aeabi_dmul+0xa2>
    17c0:	e082      	b.n	18c8 <__aeabi_dmul+0x1a8>
    17c2:	2308      	movs	r3, #8
    17c4:	9300      	str	r3, [sp, #0]
    17c6:	2300      	movs	r3, #0
    17c8:	469b      	mov	fp, r3
    17ca:	3302      	adds	r3, #2
    17cc:	2600      	movs	r6, #0
    17ce:	4698      	mov	r8, r3
    17d0:	e7cb      	b.n	176a <__aeabi_dmul+0x4a>
    17d2:	9b02      	ldr	r3, [sp, #8]
    17d4:	9301      	str	r3, [sp, #4]
    17d6:	4643      	mov	r3, r8
    17d8:	2b02      	cmp	r3, #2
    17da:	d159      	bne.n	1890 <__aeabi_dmul+0x170>
    17dc:	2401      	movs	r4, #1
    17de:	2500      	movs	r5, #0
    17e0:	2600      	movs	r6, #0
    17e2:	9b01      	ldr	r3, [sp, #4]
    17e4:	401c      	ands	r4, r3
    17e6:	4b44      	ldr	r3, [pc, #272]	; (18f8 <__aeabi_dmul+0x1d8>)
    17e8:	2100      	movs	r1, #0
    17ea:	032d      	lsls	r5, r5, #12
    17ec:	0d0a      	lsrs	r2, r1, #20
    17ee:	0512      	lsls	r2, r2, #20
    17f0:	0b2d      	lsrs	r5, r5, #12
    17f2:	4315      	orrs	r5, r2
    17f4:	4a43      	ldr	r2, [pc, #268]	; (1904 <__aeabi_dmul+0x1e4>)
    17f6:	051b      	lsls	r3, r3, #20
    17f8:	4015      	ands	r5, r2
    17fa:	431d      	orrs	r5, r3
    17fc:	006d      	lsls	r5, r5, #1
    17fe:	07e4      	lsls	r4, r4, #31
    1800:	086d      	lsrs	r5, r5, #1
    1802:	4325      	orrs	r5, r4
    1804:	1c30      	adds	r0, r6, #0
    1806:	1c29      	adds	r1, r5, #0
    1808:	b007      	add	sp, #28
    180a:	bc3c      	pop	{r2, r3, r4, r5}
    180c:	4690      	mov	r8, r2
    180e:	4699      	mov	r9, r3
    1810:	46a2      	mov	sl, r4
    1812:	46ab      	mov	fp, r5
    1814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1816:	432b      	orrs	r3, r5
    1818:	d04e      	beq.n	18b8 <__aeabi_dmul+0x198>
    181a:	465b      	mov	r3, fp
    181c:	2b00      	cmp	r3, #0
    181e:	d100      	bne.n	1822 <__aeabi_dmul+0x102>
    1820:	e185      	b.n	1b2e <__aeabi_dmul+0x40e>
    1822:	4658      	mov	r0, fp
    1824:	f000 fa88 	bl	1d38 <__clzsi2>
    1828:	1c02      	adds	r2, r0, #0
    182a:	2328      	movs	r3, #40	; 0x28
    182c:	1c29      	adds	r1, r5, #0
    182e:	1a9b      	subs	r3, r3, r2
    1830:	1c16      	adds	r6, r2, #0
    1832:	4658      	mov	r0, fp
    1834:	40d9      	lsrs	r1, r3
    1836:	3e08      	subs	r6, #8
    1838:	40b0      	lsls	r0, r6
    183a:	1c0b      	adds	r3, r1, #0
    183c:	40b5      	lsls	r5, r6
    183e:	4303      	orrs	r3, r0
    1840:	469b      	mov	fp, r3
    1842:	1c2e      	adds	r6, r5, #0
    1844:	2300      	movs	r3, #0
    1846:	4f30      	ldr	r7, [pc, #192]	; (1908 <__aeabi_dmul+0x1e8>)
    1848:	9300      	str	r3, [sp, #0]
    184a:	1abf      	subs	r7, r7, r2
    184c:	4698      	mov	r8, r3
    184e:	e78c      	b.n	176a <__aeabi_dmul+0x4a>
    1850:	4651      	mov	r1, sl
    1852:	4329      	orrs	r1, r5
    1854:	d12e      	bne.n	18b4 <__aeabi_dmul+0x194>
    1856:	2500      	movs	r5, #0
    1858:	2200      	movs	r2, #0
    185a:	2102      	movs	r1, #2
    185c:	e79e      	b.n	179c <__aeabi_dmul+0x7c>
    185e:	4651      	mov	r1, sl
    1860:	4329      	orrs	r1, r5
    1862:	d023      	beq.n	18ac <__aeabi_dmul+0x18c>
    1864:	2d00      	cmp	r5, #0
    1866:	d100      	bne.n	186a <__aeabi_dmul+0x14a>
    1868:	e154      	b.n	1b14 <__aeabi_dmul+0x3f4>
    186a:	1c28      	adds	r0, r5, #0
    186c:	f000 fa64 	bl	1d38 <__clzsi2>
    1870:	1c03      	adds	r3, r0, #0
    1872:	2128      	movs	r1, #40	; 0x28
    1874:	4650      	mov	r0, sl
    1876:	1ac9      	subs	r1, r1, r3
    1878:	1c1a      	adds	r2, r3, #0
    187a:	40c8      	lsrs	r0, r1
    187c:	4651      	mov	r1, sl
    187e:	3a08      	subs	r2, #8
    1880:	4091      	lsls	r1, r2
    1882:	4095      	lsls	r5, r2
    1884:	1c0a      	adds	r2, r1, #0
    1886:	4305      	orrs	r5, r0
    1888:	481f      	ldr	r0, [pc, #124]	; (1908 <__aeabi_dmul+0x1e8>)
    188a:	2100      	movs	r1, #0
    188c:	1ac3      	subs	r3, r0, r3
    188e:	e785      	b.n	179c <__aeabi_dmul+0x7c>
    1890:	2b03      	cmp	r3, #3
    1892:	d100      	bne.n	1896 <__aeabi_dmul+0x176>
    1894:	e1c2      	b.n	1c1c <__aeabi_dmul+0x4fc>
    1896:	2b01      	cmp	r3, #1
    1898:	d000      	beq.n	189c <__aeabi_dmul+0x17c>
    189a:	e16d      	b.n	1b78 <__aeabi_dmul+0x458>
    189c:	4644      	mov	r4, r8
    189e:	9b01      	ldr	r3, [sp, #4]
    18a0:	2500      	movs	r5, #0
    18a2:	401c      	ands	r4, r3
    18a4:	b2e4      	uxtb	r4, r4
    18a6:	2300      	movs	r3, #0
    18a8:	2600      	movs	r6, #0
    18aa:	e79d      	b.n	17e8 <__aeabi_dmul+0xc8>
    18ac:	2500      	movs	r5, #0
    18ae:	2200      	movs	r2, #0
    18b0:	2101      	movs	r1, #1
    18b2:	e773      	b.n	179c <__aeabi_dmul+0x7c>
    18b4:	2103      	movs	r1, #3
    18b6:	e771      	b.n	179c <__aeabi_dmul+0x7c>
    18b8:	2304      	movs	r3, #4
    18ba:	9300      	str	r3, [sp, #0]
    18bc:	2300      	movs	r3, #0
    18be:	469b      	mov	fp, r3
    18c0:	3301      	adds	r3, #1
    18c2:	2600      	movs	r6, #0
    18c4:	4698      	mov	r8, r3
    18c6:	e750      	b.n	176a <__aeabi_dmul+0x4a>
    18c8:	230c      	movs	r3, #12
    18ca:	9300      	str	r3, [sp, #0]
    18cc:	3b09      	subs	r3, #9
    18ce:	4698      	mov	r8, r3
    18d0:	e74b      	b.n	176a <__aeabi_dmul+0x4a>
    18d2:	2580      	movs	r5, #128	; 0x80
    18d4:	2400      	movs	r4, #0
    18d6:	032d      	lsls	r5, r5, #12
    18d8:	2600      	movs	r6, #0
    18da:	4b07      	ldr	r3, [pc, #28]	; (18f8 <__aeabi_dmul+0x1d8>)
    18dc:	e784      	b.n	17e8 <__aeabi_dmul+0xc8>
    18de:	464b      	mov	r3, r9
    18e0:	46ab      	mov	fp, r5
    18e2:	1c16      	adds	r6, r2, #0
    18e4:	9301      	str	r3, [sp, #4]
    18e6:	4688      	mov	r8, r1
    18e8:	e775      	b.n	17d6 <__aeabi_dmul+0xb6>
    18ea:	9b02      	ldr	r3, [sp, #8]
    18ec:	46ab      	mov	fp, r5
    18ee:	1c16      	adds	r6, r2, #0
    18f0:	9301      	str	r3, [sp, #4]
    18f2:	4688      	mov	r8, r1
    18f4:	e76f      	b.n	17d6 <__aeabi_dmul+0xb6>
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	000007ff 	.word	0x000007ff
    18fc:	fffffc01 	.word	0xfffffc01
    1900:	00001ec0 	.word	0x00001ec0
    1904:	800fffff 	.word	0x800fffff
    1908:	fffffc0d 	.word	0xfffffc0d
    190c:	0c33      	lsrs	r3, r6, #16
    190e:	0436      	lsls	r6, r6, #16
    1910:	0c36      	lsrs	r6, r6, #16
    1912:	469c      	mov	ip, r3
    1914:	1c33      	adds	r3, r6, #0
    1916:	0c14      	lsrs	r4, r2, #16
    1918:	0412      	lsls	r2, r2, #16
    191a:	0c12      	lsrs	r2, r2, #16
    191c:	4353      	muls	r3, r2
    191e:	4698      	mov	r8, r3
    1920:	4663      	mov	r3, ip
    1922:	4353      	muls	r3, r2
    1924:	4699      	mov	r9, r3
    1926:	4663      	mov	r3, ip
    1928:	4363      	muls	r3, r4
    192a:	9301      	str	r3, [sp, #4]
    192c:	1c33      	adds	r3, r6, #0
    192e:	4641      	mov	r1, r8
    1930:	4363      	muls	r3, r4
    1932:	0c09      	lsrs	r1, r1, #16
    1934:	444b      	add	r3, r9
    1936:	185b      	adds	r3, r3, r1
    1938:	4599      	cmp	r9, r3
    193a:	d905      	bls.n	1948 <__aeabi_dmul+0x228>
    193c:	2080      	movs	r0, #128	; 0x80
    193e:	0240      	lsls	r0, r0, #9
    1940:	4681      	mov	r9, r0
    1942:	9901      	ldr	r1, [sp, #4]
    1944:	4449      	add	r1, r9
    1946:	9101      	str	r1, [sp, #4]
    1948:	0c19      	lsrs	r1, r3, #16
    194a:	9103      	str	r1, [sp, #12]
    194c:	4641      	mov	r1, r8
    194e:	0409      	lsls	r1, r1, #16
    1950:	0c09      	lsrs	r1, r1, #16
    1952:	041b      	lsls	r3, r3, #16
    1954:	185b      	adds	r3, r3, r1
    1956:	9304      	str	r3, [sp, #16]
    1958:	0c2b      	lsrs	r3, r5, #16
    195a:	4698      	mov	r8, r3
    195c:	1c33      	adds	r3, r6, #0
    195e:	042d      	lsls	r5, r5, #16
    1960:	0c29      	lsrs	r1, r5, #16
    1962:	434b      	muls	r3, r1
    1964:	4660      	mov	r0, ip
    1966:	9300      	str	r3, [sp, #0]
    1968:	4643      	mov	r3, r8
    196a:	4665      	mov	r5, ip
    196c:	4358      	muls	r0, r3
    196e:	435e      	muls	r6, r3
    1970:	9b00      	ldr	r3, [sp, #0]
    1972:	434d      	muls	r5, r1
    1974:	0c1b      	lsrs	r3, r3, #16
    1976:	4699      	mov	r9, r3
    1978:	19ae      	adds	r6, r5, r6
    197a:	444e      	add	r6, r9
    197c:	4684      	mov	ip, r0
    197e:	42b5      	cmp	r5, r6
    1980:	d903      	bls.n	198a <__aeabi_dmul+0x26a>
    1982:	2380      	movs	r3, #128	; 0x80
    1984:	025b      	lsls	r3, r3, #9
    1986:	4699      	mov	r9, r3
    1988:	44cc      	add	ip, r9
    198a:	0c35      	lsrs	r5, r6, #16
    198c:	1c2b      	adds	r3, r5, #0
    198e:	9803      	ldr	r0, [sp, #12]
    1990:	4463      	add	r3, ip
    1992:	4684      	mov	ip, r0
    1994:	9305      	str	r3, [sp, #20]
    1996:	9b00      	ldr	r3, [sp, #0]
    1998:	0436      	lsls	r6, r6, #16
    199a:	041b      	lsls	r3, r3, #16
    199c:	0c1b      	lsrs	r3, r3, #16
    199e:	18f3      	adds	r3, r6, r3
    19a0:	449c      	add	ip, r3
    19a2:	4660      	mov	r0, ip
    19a4:	9003      	str	r0, [sp, #12]
    19a6:	4658      	mov	r0, fp
    19a8:	0405      	lsls	r5, r0, #16
    19aa:	0c06      	lsrs	r6, r0, #16
    19ac:	0c28      	lsrs	r0, r5, #16
    19ae:	4684      	mov	ip, r0
    19b0:	4350      	muls	r0, r2
    19b2:	1c35      	adds	r5, r6, #0
    19b4:	4681      	mov	r9, r0
    19b6:	4660      	mov	r0, ip
    19b8:	4365      	muls	r5, r4
    19ba:	4344      	muls	r4, r0
    19bc:	4648      	mov	r0, r9
    19be:	0c00      	lsrs	r0, r0, #16
    19c0:	4683      	mov	fp, r0
    19c2:	4372      	muls	r2, r6
    19c4:	1914      	adds	r4, r2, r4
    19c6:	445c      	add	r4, fp
    19c8:	42a2      	cmp	r2, r4
    19ca:	d903      	bls.n	19d4 <__aeabi_dmul+0x2b4>
    19cc:	2280      	movs	r2, #128	; 0x80
    19ce:	0252      	lsls	r2, r2, #9
    19d0:	4693      	mov	fp, r2
    19d2:	445d      	add	r5, fp
    19d4:	0c22      	lsrs	r2, r4, #16
    19d6:	18ad      	adds	r5, r5, r2
    19d8:	464a      	mov	r2, r9
    19da:	0412      	lsls	r2, r2, #16
    19dc:	0c12      	lsrs	r2, r2, #16
    19de:	0424      	lsls	r4, r4, #16
    19e0:	4640      	mov	r0, r8
    19e2:	18a4      	adds	r4, r4, r2
    19e4:	4662      	mov	r2, ip
    19e6:	434a      	muls	r2, r1
    19e8:	4371      	muls	r1, r6
    19ea:	4346      	muls	r6, r0
    19ec:	4660      	mov	r0, ip
    19ee:	9600      	str	r6, [sp, #0]
    19f0:	4646      	mov	r6, r8
    19f2:	4370      	muls	r0, r6
    19f4:	4680      	mov	r8, r0
    19f6:	0c10      	lsrs	r0, r2, #16
    19f8:	4684      	mov	ip, r0
    19fa:	4488      	add	r8, r1
    19fc:	44e0      	add	r8, ip
    19fe:	4541      	cmp	r1, r8
    1a00:	d905      	bls.n	1a0e <__aeabi_dmul+0x2ee>
    1a02:	2180      	movs	r1, #128	; 0x80
    1a04:	0249      	lsls	r1, r1, #9
    1a06:	468c      	mov	ip, r1
    1a08:	9900      	ldr	r1, [sp, #0]
    1a0a:	4461      	add	r1, ip
    1a0c:	9100      	str	r1, [sp, #0]
    1a0e:	9801      	ldr	r0, [sp, #4]
    1a10:	9903      	ldr	r1, [sp, #12]
    1a12:	4684      	mov	ip, r0
    1a14:	4461      	add	r1, ip
    1a16:	4299      	cmp	r1, r3
    1a18:	419b      	sbcs	r3, r3
    1a1a:	425b      	negs	r3, r3
    1a1c:	4699      	mov	r9, r3
    1a1e:	9805      	ldr	r0, [sp, #20]
    1a20:	4643      	mov	r3, r8
    1a22:	4684      	mov	ip, r0
    1a24:	0412      	lsls	r2, r2, #16
    1a26:	0c12      	lsrs	r2, r2, #16
    1a28:	041b      	lsls	r3, r3, #16
    1a2a:	189b      	adds	r3, r3, r2
    1a2c:	4463      	add	r3, ip
    1a2e:	469c      	mov	ip, r3
    1a30:	46ab      	mov	fp, r5
    1a32:	4283      	cmp	r3, r0
    1a34:	419b      	sbcs	r3, r3
    1a36:	4640      	mov	r0, r8
    1a38:	190a      	adds	r2, r1, r4
    1a3a:	44cc      	add	ip, r9
    1a3c:	42a2      	cmp	r2, r4
    1a3e:	4189      	sbcs	r1, r1
    1a40:	44e3      	add	fp, ip
    1a42:	45cc      	cmp	ip, r9
    1a44:	41b6      	sbcs	r6, r6
    1a46:	465c      	mov	r4, fp
    1a48:	0c00      	lsrs	r0, r0, #16
    1a4a:	4680      	mov	r8, r0
    1a4c:	4249      	negs	r1, r1
    1a4e:	4276      	negs	r6, r6
    1a50:	425b      	negs	r3, r3
    1a52:	1864      	adds	r4, r4, r1
    1a54:	4333      	orrs	r3, r6
    1a56:	4498      	add	r8, r3
    1a58:	428c      	cmp	r4, r1
    1a5a:	4189      	sbcs	r1, r1
    1a5c:	45ab      	cmp	fp, r5
    1a5e:	419b      	sbcs	r3, r3
    1a60:	4249      	negs	r1, r1
    1a62:	425b      	negs	r3, r3
    1a64:	4319      	orrs	r1, r3
    1a66:	1c0d      	adds	r5, r1, #0
    1a68:	9b00      	ldr	r3, [sp, #0]
    1a6a:	4445      	add	r5, r8
    1a6c:	18ee      	adds	r6, r5, r3
    1a6e:	0276      	lsls	r6, r6, #9
    1a70:	0de5      	lsrs	r5, r4, #23
    1a72:	432e      	orrs	r6, r5
    1a74:	46b3      	mov	fp, r6
    1a76:	9b04      	ldr	r3, [sp, #16]
    1a78:	0256      	lsls	r6, r2, #9
    1a7a:	431e      	orrs	r6, r3
    1a7c:	1e73      	subs	r3, r6, #1
    1a7e:	419e      	sbcs	r6, r3
    1a80:	465b      	mov	r3, fp
    1a82:	0dd2      	lsrs	r2, r2, #23
    1a84:	4332      	orrs	r2, r6
    1a86:	0266      	lsls	r6, r4, #9
    1a88:	4316      	orrs	r6, r2
    1a8a:	01db      	lsls	r3, r3, #7
    1a8c:	d50a      	bpl.n	1aa4 <__aeabi_dmul+0x384>
    1a8e:	2301      	movs	r3, #1
    1a90:	4033      	ands	r3, r6
    1a92:	0876      	lsrs	r6, r6, #1
    1a94:	431e      	orrs	r6, r3
    1a96:	465b      	mov	r3, fp
    1a98:	07db      	lsls	r3, r3, #31
    1a9a:	431e      	orrs	r6, r3
    1a9c:	465b      	mov	r3, fp
    1a9e:	085b      	lsrs	r3, r3, #1
    1aa0:	469b      	mov	fp, r3
    1aa2:	4657      	mov	r7, sl
    1aa4:	4b63      	ldr	r3, [pc, #396]	; (1c34 <__aeabi_dmul+0x514>)
    1aa6:	18fb      	adds	r3, r7, r3
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	dd5a      	ble.n	1b62 <__aeabi_dmul+0x442>
    1aac:	0772      	lsls	r2, r6, #29
    1aae:	d009      	beq.n	1ac4 <__aeabi_dmul+0x3a4>
    1ab0:	220f      	movs	r2, #15
    1ab2:	4032      	ands	r2, r6
    1ab4:	2a04      	cmp	r2, #4
    1ab6:	d005      	beq.n	1ac4 <__aeabi_dmul+0x3a4>
    1ab8:	1d32      	adds	r2, r6, #4
    1aba:	42b2      	cmp	r2, r6
    1abc:	41b6      	sbcs	r6, r6
    1abe:	4276      	negs	r6, r6
    1ac0:	44b3      	add	fp, r6
    1ac2:	1c16      	adds	r6, r2, #0
    1ac4:	465a      	mov	r2, fp
    1ac6:	01d2      	lsls	r2, r2, #7
    1ac8:	d506      	bpl.n	1ad8 <__aeabi_dmul+0x3b8>
    1aca:	465a      	mov	r2, fp
    1acc:	4b5a      	ldr	r3, [pc, #360]	; (1c38 <__aeabi_dmul+0x518>)
    1ace:	401a      	ands	r2, r3
    1ad0:	2380      	movs	r3, #128	; 0x80
    1ad2:	4693      	mov	fp, r2
    1ad4:	00db      	lsls	r3, r3, #3
    1ad6:	18fb      	adds	r3, r7, r3
    1ad8:	4a58      	ldr	r2, [pc, #352]	; (1c3c <__aeabi_dmul+0x51c>)
    1ada:	4293      	cmp	r3, r2
    1adc:	dd34      	ble.n	1b48 <__aeabi_dmul+0x428>
    1ade:	2401      	movs	r4, #1
    1ae0:	9b02      	ldr	r3, [sp, #8]
    1ae2:	2500      	movs	r5, #0
    1ae4:	401c      	ands	r4, r3
    1ae6:	2600      	movs	r6, #0
    1ae8:	4b55      	ldr	r3, [pc, #340]	; (1c40 <__aeabi_dmul+0x520>)
    1aea:	e67d      	b.n	17e8 <__aeabi_dmul+0xc8>
    1aec:	2080      	movs	r0, #128	; 0x80
    1aee:	465b      	mov	r3, fp
    1af0:	0300      	lsls	r0, r0, #12
    1af2:	4203      	tst	r3, r0
    1af4:	d008      	beq.n	1b08 <__aeabi_dmul+0x3e8>
    1af6:	4205      	tst	r5, r0
    1af8:	d106      	bne.n	1b08 <__aeabi_dmul+0x3e8>
    1afa:	4305      	orrs	r5, r0
    1afc:	032d      	lsls	r5, r5, #12
    1afe:	0b2d      	lsrs	r5, r5, #12
    1b00:	464c      	mov	r4, r9
    1b02:	1c16      	adds	r6, r2, #0
    1b04:	4b4e      	ldr	r3, [pc, #312]	; (1c40 <__aeabi_dmul+0x520>)
    1b06:	e66f      	b.n	17e8 <__aeabi_dmul+0xc8>
    1b08:	465d      	mov	r5, fp
    1b0a:	4305      	orrs	r5, r0
    1b0c:	032d      	lsls	r5, r5, #12
    1b0e:	0b2d      	lsrs	r5, r5, #12
    1b10:	4b4b      	ldr	r3, [pc, #300]	; (1c40 <__aeabi_dmul+0x520>)
    1b12:	e669      	b.n	17e8 <__aeabi_dmul+0xc8>
    1b14:	4650      	mov	r0, sl
    1b16:	f000 f90f 	bl	1d38 <__clzsi2>
    1b1a:	1c03      	adds	r3, r0, #0
    1b1c:	3320      	adds	r3, #32
    1b1e:	2b27      	cmp	r3, #39	; 0x27
    1b20:	dc00      	bgt.n	1b24 <__aeabi_dmul+0x404>
    1b22:	e6a6      	b.n	1872 <__aeabi_dmul+0x152>
    1b24:	4655      	mov	r5, sl
    1b26:	3808      	subs	r0, #8
    1b28:	4085      	lsls	r5, r0
    1b2a:	2200      	movs	r2, #0
    1b2c:	e6ac      	b.n	1888 <__aeabi_dmul+0x168>
    1b2e:	1c28      	adds	r0, r5, #0
    1b30:	f000 f902 	bl	1d38 <__clzsi2>
    1b34:	1c02      	adds	r2, r0, #0
    1b36:	3220      	adds	r2, #32
    1b38:	2a27      	cmp	r2, #39	; 0x27
    1b3a:	dc00      	bgt.n	1b3e <__aeabi_dmul+0x41e>
    1b3c:	e675      	b.n	182a <__aeabi_dmul+0x10a>
    1b3e:	3808      	subs	r0, #8
    1b40:	4085      	lsls	r5, r0
    1b42:	2600      	movs	r6, #0
    1b44:	46ab      	mov	fp, r5
    1b46:	e67d      	b.n	1844 <__aeabi_dmul+0x124>
    1b48:	465a      	mov	r2, fp
    1b4a:	08f6      	lsrs	r6, r6, #3
    1b4c:	0752      	lsls	r2, r2, #29
    1b4e:	4316      	orrs	r6, r2
    1b50:	465a      	mov	r2, fp
    1b52:	2401      	movs	r4, #1
    1b54:	0255      	lsls	r5, r2, #9
    1b56:	9a02      	ldr	r2, [sp, #8]
    1b58:	055b      	lsls	r3, r3, #21
    1b5a:	0b2d      	lsrs	r5, r5, #12
    1b5c:	0d5b      	lsrs	r3, r3, #21
    1b5e:	4014      	ands	r4, r2
    1b60:	e642      	b.n	17e8 <__aeabi_dmul+0xc8>
    1b62:	4d38      	ldr	r5, [pc, #224]	; (1c44 <__aeabi_dmul+0x524>)
    1b64:	1bed      	subs	r5, r5, r7
    1b66:	2d38      	cmp	r5, #56	; 0x38
    1b68:	dd0a      	ble.n	1b80 <__aeabi_dmul+0x460>
    1b6a:	2401      	movs	r4, #1
    1b6c:	9b02      	ldr	r3, [sp, #8]
    1b6e:	2500      	movs	r5, #0
    1b70:	401c      	ands	r4, r3
    1b72:	2600      	movs	r6, #0
    1b74:	2300      	movs	r3, #0
    1b76:	e637      	b.n	17e8 <__aeabi_dmul+0xc8>
    1b78:	9b01      	ldr	r3, [sp, #4]
    1b7a:	4657      	mov	r7, sl
    1b7c:	9302      	str	r3, [sp, #8]
    1b7e:	e791      	b.n	1aa4 <__aeabi_dmul+0x384>
    1b80:	2d1f      	cmp	r5, #31
    1b82:	dc25      	bgt.n	1bd0 <__aeabi_dmul+0x4b0>
    1b84:	4b30      	ldr	r3, [pc, #192]	; (1c48 <__aeabi_dmul+0x528>)
    1b86:	1c32      	adds	r2, r6, #0
    1b88:	469c      	mov	ip, r3
    1b8a:	4467      	add	r7, ip
    1b8c:	40be      	lsls	r6, r7
    1b8e:	465b      	mov	r3, fp
    1b90:	40bb      	lsls	r3, r7
    1b92:	1c37      	adds	r7, r6, #0
    1b94:	40ea      	lsrs	r2, r5
    1b96:	1e7e      	subs	r6, r7, #1
    1b98:	41b7      	sbcs	r7, r6
    1b9a:	4313      	orrs	r3, r2
    1b9c:	433b      	orrs	r3, r7
    1b9e:	1c1e      	adds	r6, r3, #0
    1ba0:	465b      	mov	r3, fp
    1ba2:	40eb      	lsrs	r3, r5
    1ba4:	1c1d      	adds	r5, r3, #0
    1ba6:	0773      	lsls	r3, r6, #29
    1ba8:	d009      	beq.n	1bbe <__aeabi_dmul+0x49e>
    1baa:	230f      	movs	r3, #15
    1bac:	4033      	ands	r3, r6
    1bae:	2b04      	cmp	r3, #4
    1bb0:	d005      	beq.n	1bbe <__aeabi_dmul+0x49e>
    1bb2:	1d33      	adds	r3, r6, #4
    1bb4:	42b3      	cmp	r3, r6
    1bb6:	41b6      	sbcs	r6, r6
    1bb8:	4276      	negs	r6, r6
    1bba:	19ad      	adds	r5, r5, r6
    1bbc:	1c1e      	adds	r6, r3, #0
    1bbe:	022b      	lsls	r3, r5, #8
    1bc0:	d520      	bpl.n	1c04 <__aeabi_dmul+0x4e4>
    1bc2:	2401      	movs	r4, #1
    1bc4:	9b02      	ldr	r3, [sp, #8]
    1bc6:	2500      	movs	r5, #0
    1bc8:	401c      	ands	r4, r3
    1bca:	2600      	movs	r6, #0
    1bcc:	2301      	movs	r3, #1
    1bce:	e60b      	b.n	17e8 <__aeabi_dmul+0xc8>
    1bd0:	465a      	mov	r2, fp
    1bd2:	4b1e      	ldr	r3, [pc, #120]	; (1c4c <__aeabi_dmul+0x52c>)
    1bd4:	1bdb      	subs	r3, r3, r7
    1bd6:	40da      	lsrs	r2, r3
    1bd8:	1c13      	adds	r3, r2, #0
    1bda:	2d20      	cmp	r5, #32
    1bdc:	d01c      	beq.n	1c18 <__aeabi_dmul+0x4f8>
    1bde:	4a1c      	ldr	r2, [pc, #112]	; (1c50 <__aeabi_dmul+0x530>)
    1be0:	4694      	mov	ip, r2
    1be2:	465a      	mov	r2, fp
    1be4:	4467      	add	r7, ip
    1be6:	40ba      	lsls	r2, r7
    1be8:	1c17      	adds	r7, r2, #0
    1bea:	433e      	orrs	r6, r7
    1bec:	1e72      	subs	r2, r6, #1
    1bee:	4196      	sbcs	r6, r2
    1bf0:	431e      	orrs	r6, r3
    1bf2:	2307      	movs	r3, #7
    1bf4:	2500      	movs	r5, #0
    1bf6:	4033      	ands	r3, r6
    1bf8:	d007      	beq.n	1c0a <__aeabi_dmul+0x4ea>
    1bfa:	230f      	movs	r3, #15
    1bfc:	2500      	movs	r5, #0
    1bfe:	4033      	ands	r3, r6
    1c00:	2b04      	cmp	r3, #4
    1c02:	d1d6      	bne.n	1bb2 <__aeabi_dmul+0x492>
    1c04:	076b      	lsls	r3, r5, #29
    1c06:	026d      	lsls	r5, r5, #9
    1c08:	0b2d      	lsrs	r5, r5, #12
    1c0a:	2401      	movs	r4, #1
    1c0c:	08f6      	lsrs	r6, r6, #3
    1c0e:	431e      	orrs	r6, r3
    1c10:	9b02      	ldr	r3, [sp, #8]
    1c12:	401c      	ands	r4, r3
    1c14:	2300      	movs	r3, #0
    1c16:	e5e7      	b.n	17e8 <__aeabi_dmul+0xc8>
    1c18:	2700      	movs	r7, #0
    1c1a:	e7e6      	b.n	1bea <__aeabi_dmul+0x4ca>
    1c1c:	2580      	movs	r5, #128	; 0x80
    1c1e:	465b      	mov	r3, fp
    1c20:	2401      	movs	r4, #1
    1c22:	032d      	lsls	r5, r5, #12
    1c24:	431d      	orrs	r5, r3
    1c26:	9b01      	ldr	r3, [sp, #4]
    1c28:	032d      	lsls	r5, r5, #12
    1c2a:	4023      	ands	r3, r4
    1c2c:	1c1c      	adds	r4, r3, #0
    1c2e:	0b2d      	lsrs	r5, r5, #12
    1c30:	4b03      	ldr	r3, [pc, #12]	; (1c40 <__aeabi_dmul+0x520>)
    1c32:	e5d9      	b.n	17e8 <__aeabi_dmul+0xc8>
    1c34:	000003ff 	.word	0x000003ff
    1c38:	feffffff 	.word	0xfeffffff
    1c3c:	000007fe 	.word	0x000007fe
    1c40:	000007ff 	.word	0x000007ff
    1c44:	fffffc02 	.word	0xfffffc02
    1c48:	0000041e 	.word	0x0000041e
    1c4c:	fffffbe2 	.word	0xfffffbe2
    1c50:	0000043e 	.word	0x0000043e

00001c54 <__aeabi_d2iz>:
    1c54:	030b      	lsls	r3, r1, #12
    1c56:	b530      	push	{r4, r5, lr}
    1c58:	4c13      	ldr	r4, [pc, #76]	; (1ca8 <__aeabi_d2iz+0x54>)
    1c5a:	0b1a      	lsrs	r2, r3, #12
    1c5c:	004b      	lsls	r3, r1, #1
    1c5e:	1c05      	adds	r5, r0, #0
    1c60:	0d5b      	lsrs	r3, r3, #21
    1c62:	0fc9      	lsrs	r1, r1, #31
    1c64:	2000      	movs	r0, #0
    1c66:	42a3      	cmp	r3, r4
    1c68:	dd10      	ble.n	1c8c <__aeabi_d2iz+0x38>
    1c6a:	4810      	ldr	r0, [pc, #64]	; (1cac <__aeabi_d2iz+0x58>)
    1c6c:	4283      	cmp	r3, r0
    1c6e:	dc0e      	bgt.n	1c8e <__aeabi_d2iz+0x3a>
    1c70:	2080      	movs	r0, #128	; 0x80
    1c72:	4c0f      	ldr	r4, [pc, #60]	; (1cb0 <__aeabi_d2iz+0x5c>)
    1c74:	0340      	lsls	r0, r0, #13
    1c76:	4302      	orrs	r2, r0
    1c78:	1ae4      	subs	r4, r4, r3
    1c7a:	2c1f      	cmp	r4, #31
    1c7c:	dd0a      	ble.n	1c94 <__aeabi_d2iz+0x40>
    1c7e:	480d      	ldr	r0, [pc, #52]	; (1cb4 <__aeabi_d2iz+0x60>)
    1c80:	1ac3      	subs	r3, r0, r3
    1c82:	40da      	lsrs	r2, r3
    1c84:	1c13      	adds	r3, r2, #0
    1c86:	4248      	negs	r0, r1
    1c88:	4043      	eors	r3, r0
    1c8a:	1858      	adds	r0, r3, r1
    1c8c:	bd30      	pop	{r4, r5, pc}
    1c8e:	4b0a      	ldr	r3, [pc, #40]	; (1cb8 <__aeabi_d2iz+0x64>)
    1c90:	18c8      	adds	r0, r1, r3
    1c92:	e7fb      	b.n	1c8c <__aeabi_d2iz+0x38>
    1c94:	1c28      	adds	r0, r5, #0
    1c96:	40e0      	lsrs	r0, r4
    1c98:	4c08      	ldr	r4, [pc, #32]	; (1cbc <__aeabi_d2iz+0x68>)
    1c9a:	46a4      	mov	ip, r4
    1c9c:	4463      	add	r3, ip
    1c9e:	409a      	lsls	r2, r3
    1ca0:	1c13      	adds	r3, r2, #0
    1ca2:	4303      	orrs	r3, r0
    1ca4:	e7ef      	b.n	1c86 <__aeabi_d2iz+0x32>
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	000003fe 	.word	0x000003fe
    1cac:	0000041d 	.word	0x0000041d
    1cb0:	00000433 	.word	0x00000433
    1cb4:	00000413 	.word	0x00000413
    1cb8:	7fffffff 	.word	0x7fffffff
    1cbc:	fffffbed 	.word	0xfffffbed

00001cc0 <__aeabi_i2d>:
    1cc0:	b538      	push	{r3, r4, r5, lr}
    1cc2:	1e04      	subs	r4, r0, #0
    1cc4:	d016      	beq.n	1cf4 <__aeabi_i2d+0x34>
    1cc6:	0fc5      	lsrs	r5, r0, #31
    1cc8:	d000      	beq.n	1ccc <__aeabi_i2d+0xc>
    1cca:	4244      	negs	r4, r0
    1ccc:	1c20      	adds	r0, r4, #0
    1cce:	f000 f833 	bl	1d38 <__clzsi2>
    1cd2:	4b17      	ldr	r3, [pc, #92]	; (1d30 <__aeabi_i2d+0x70>)
    1cd4:	1a1b      	subs	r3, r3, r0
    1cd6:	280a      	cmp	r0, #10
    1cd8:	dc21      	bgt.n	1d1e <__aeabi_i2d+0x5e>
    1cda:	1c02      	adds	r2, r0, #0
    1cdc:	1c21      	adds	r1, r4, #0
    1cde:	3215      	adds	r2, #21
    1ce0:	4091      	lsls	r1, r2
    1ce2:	1c0a      	adds	r2, r1, #0
    1ce4:	210b      	movs	r1, #11
    1ce6:	1a08      	subs	r0, r1, r0
    1ce8:	40c4      	lsrs	r4, r0
    1cea:	055b      	lsls	r3, r3, #21
    1cec:	0324      	lsls	r4, r4, #12
    1cee:	0b24      	lsrs	r4, r4, #12
    1cf0:	0d5b      	lsrs	r3, r3, #21
    1cf2:	e003      	b.n	1cfc <__aeabi_i2d+0x3c>
    1cf4:	2500      	movs	r5, #0
    1cf6:	2300      	movs	r3, #0
    1cf8:	2400      	movs	r4, #0
    1cfa:	2200      	movs	r2, #0
    1cfc:	2100      	movs	r1, #0
    1cfe:	1c10      	adds	r0, r2, #0
    1d00:	0324      	lsls	r4, r4, #12
    1d02:	0d0a      	lsrs	r2, r1, #20
    1d04:	0512      	lsls	r2, r2, #20
    1d06:	0b24      	lsrs	r4, r4, #12
    1d08:	4314      	orrs	r4, r2
    1d0a:	4a0a      	ldr	r2, [pc, #40]	; (1d34 <__aeabi_i2d+0x74>)
    1d0c:	051b      	lsls	r3, r3, #20
    1d0e:	4014      	ands	r4, r2
    1d10:	431c      	orrs	r4, r3
    1d12:	0064      	lsls	r4, r4, #1
    1d14:	07ed      	lsls	r5, r5, #31
    1d16:	0864      	lsrs	r4, r4, #1
    1d18:	432c      	orrs	r4, r5
    1d1a:	1c21      	adds	r1, r4, #0
    1d1c:	bd38      	pop	{r3, r4, r5, pc}
    1d1e:	380b      	subs	r0, #11
    1d20:	4084      	lsls	r4, r0
    1d22:	055b      	lsls	r3, r3, #21
    1d24:	0324      	lsls	r4, r4, #12
    1d26:	0b24      	lsrs	r4, r4, #12
    1d28:	0d5b      	lsrs	r3, r3, #21
    1d2a:	2200      	movs	r2, #0
    1d2c:	e7e6      	b.n	1cfc <__aeabi_i2d+0x3c>
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	0000041e 	.word	0x0000041e
    1d34:	800fffff 	.word	0x800fffff

00001d38 <__clzsi2>:
    1d38:	211c      	movs	r1, #28
    1d3a:	2301      	movs	r3, #1
    1d3c:	041b      	lsls	r3, r3, #16
    1d3e:	4298      	cmp	r0, r3
    1d40:	d301      	bcc.n	1d46 <__clzsi2+0xe>
    1d42:	0c00      	lsrs	r0, r0, #16
    1d44:	3910      	subs	r1, #16
    1d46:	0a1b      	lsrs	r3, r3, #8
    1d48:	4298      	cmp	r0, r3
    1d4a:	d301      	bcc.n	1d50 <__clzsi2+0x18>
    1d4c:	0a00      	lsrs	r0, r0, #8
    1d4e:	3908      	subs	r1, #8
    1d50:	091b      	lsrs	r3, r3, #4
    1d52:	4298      	cmp	r0, r3
    1d54:	d301      	bcc.n	1d5a <__clzsi2+0x22>
    1d56:	0900      	lsrs	r0, r0, #4
    1d58:	3904      	subs	r1, #4
    1d5a:	a202      	add	r2, pc, #8	; (adr r2, 1d64 <__clzsi2+0x2c>)
    1d5c:	5c10      	ldrb	r0, [r2, r0]
    1d5e:	1840      	adds	r0, r0, r1
    1d60:	4770      	bx	lr
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	02020304 	.word	0x02020304
    1d68:	01010101 	.word	0x01010101
	...

00001d74 <strlen>:
    1d74:	b510      	push	{r4, lr}
    1d76:	0783      	lsls	r3, r0, #30
    1d78:	d027      	beq.n	1dca <strlen+0x56>
    1d7a:	7803      	ldrb	r3, [r0, #0]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d026      	beq.n	1dce <strlen+0x5a>
    1d80:	1c03      	adds	r3, r0, #0
    1d82:	2103      	movs	r1, #3
    1d84:	e002      	b.n	1d8c <strlen+0x18>
    1d86:	781a      	ldrb	r2, [r3, #0]
    1d88:	2a00      	cmp	r2, #0
    1d8a:	d01c      	beq.n	1dc6 <strlen+0x52>
    1d8c:	3301      	adds	r3, #1
    1d8e:	420b      	tst	r3, r1
    1d90:	d1f9      	bne.n	1d86 <strlen+0x12>
    1d92:	6819      	ldr	r1, [r3, #0]
    1d94:	4a0f      	ldr	r2, [pc, #60]	; (1dd4 <strlen+0x60>)
    1d96:	4c10      	ldr	r4, [pc, #64]	; (1dd8 <strlen+0x64>)
    1d98:	188a      	adds	r2, r1, r2
    1d9a:	438a      	bics	r2, r1
    1d9c:	4222      	tst	r2, r4
    1d9e:	d10f      	bne.n	1dc0 <strlen+0x4c>
    1da0:	3304      	adds	r3, #4
    1da2:	6819      	ldr	r1, [r3, #0]
    1da4:	4a0b      	ldr	r2, [pc, #44]	; (1dd4 <strlen+0x60>)
    1da6:	188a      	adds	r2, r1, r2
    1da8:	438a      	bics	r2, r1
    1daa:	4222      	tst	r2, r4
    1dac:	d108      	bne.n	1dc0 <strlen+0x4c>
    1dae:	3304      	adds	r3, #4
    1db0:	6819      	ldr	r1, [r3, #0]
    1db2:	4a08      	ldr	r2, [pc, #32]	; (1dd4 <strlen+0x60>)
    1db4:	188a      	adds	r2, r1, r2
    1db6:	438a      	bics	r2, r1
    1db8:	4222      	tst	r2, r4
    1dba:	d0f1      	beq.n	1da0 <strlen+0x2c>
    1dbc:	e000      	b.n	1dc0 <strlen+0x4c>
    1dbe:	3301      	adds	r3, #1
    1dc0:	781a      	ldrb	r2, [r3, #0]
    1dc2:	2a00      	cmp	r2, #0
    1dc4:	d1fb      	bne.n	1dbe <strlen+0x4a>
    1dc6:	1a18      	subs	r0, r3, r0
    1dc8:	bd10      	pop	{r4, pc}
    1dca:	1c03      	adds	r3, r0, #0
    1dcc:	e7e1      	b.n	1d92 <strlen+0x1e>
    1dce:	2000      	movs	r0, #0
    1dd0:	e7fa      	b.n	1dc8 <strlen+0x54>
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	fefefeff 	.word	0xfefefeff
    1dd8:	80808080 	.word	0x80808080

00001ddc <wdtOSCRate>:
    1ddc:	00000000 000927c0 00100590 00155cc0     .....'.......\..
    1dec:	001ab3f0 00200b20 00249f00 002932e0     .... . ...$..2).
    1dfc:	002dc6c0 00319750 003567e0 00393870     ..-.P.1..g5.p89.
    1e0c:	003d0900 00401640 00432380 004630c0     ..=.@.@..#C..0F.

00001e1c <digits.4175>:
    1e1c:	33323130 37363534 62613938 66656463     0123456789abcdef
    1e2c:	00000000                                ....

00001e30 <OscRateIn>:
    1e30:	00000000 53000a0d 74726174 75206465     .......Started u
    1e40:	61460070 64656c69 206f7420 74696e49     p.Failed to Init
    1e50:	696c6169 5320657a 69547379 202e6b63     ialize SysTick. 
    1e60:	736d5b00 6b636954 203a2073 5b005d00     .[msTicks : .].[
    1e70:	6c6c6543 6c6f5620 65676174 00000020     Cell Voltage ...
    1e80:	000012ac 0000119a 00001280 00001186     ................
    1e90:	00001280 0000128a 00001280 00001186     ................
    1ea0:	0000119a 0000119a 0000128a 00001186     ................
    1eb0:	00001190 00001190 00001190 000014f2     ................
    1ec0:	0000190c 000018ea 000018ea 000018de     ................
    1ed0:	000017d2 000017d2 000018d2 000018de     ................
    1ee0:	000017d2 000018d2 000017d2 000018de     ................
    1ef0:	000017d6 000017d6 000017d6 00001aec     ................
